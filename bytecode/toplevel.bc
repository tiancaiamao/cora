((iFreeze (iMark) (iConst shen.credits) (iGetF) (iApply) (iPop) (iConst shen.loop) (iGetF) (iTailApply)) (iConst shen.shen) (iDefun) (iReturn) (iHalt))

((iConst shen.*continue-repl-loop*) (iConst true) (iPrimCall 37) (iReturn) (iHalt))

((iFreeze (iGrab) (iConst shen.*continue-repl-loop*) (iConst false) (iPrimCall 37) (iReturn)) (iConst exit) (iDefun) (iReturn) (iHalt))

((iFreeze (iMark) (iConst shen.initialise_environment) (iGetF) (iApply) (iPop) (iMark) (iConst shen.prompt) (iGetF) (iApply) (iPop) (iFreeze (iGrab) (iMark) (iConst stoutput) (iGetF) (iApply) (iAccess 0) (iPrimCall 17) (iConst pr) (iGetF) (iTailApply)) (iSetJmp (iMark) (iConst shen.read-evaluate-print) (iGetF) (iApply) (iClearJmp)) (iPop) (iConst shen.*continue-repl-loop*) (iPrimCall 36) (iJF (iConst shen.loop) (iGetF) (iTailApply)) (iJMP (iConst exit) (iReturn))) (iConst shen.loop) (iDefun) (iReturn) (iHalt))

((iFreeze (iMark) (iMark) (iConst stoutput) (iGetF) (iApply) (iConst "Cora, my own lisp!
") (iConst shen.prhush) (iGetF) (iApply) (iPop) (iMark) (iConst stoutput) (iGetF) (iApply) (iConst "Copyright (C) 2018 Arthur Mao <tiancaiamao@gmail.com>
") (iConst shen.prhush) (iGetF) (iTailApply)) (iConst shen.credits) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst shen.*call*) (iConst 0) (iConst shen.*infs*) (iConst 0) (iConst shen.*process-counter*) (iConst 0) (iConst shen.*catch*) (iConst 0) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iConst shen.multiple-set) (iGetF) (iTailApply)) (iConst shen.initialise_environment) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iConst ()) (iAccess 0) (iPrimCall 19) (iJF (iConst ()) (iReturn)) (iJMP (iAccess 0) (iPrimCall 35) (iJF (iAccess 0) (iPrimCall 33) (iPrimCall 35)) (iJMP (iConst false)) (iJF (iAccess 0) (iPrimCall 32) (iAccess 0) (iPrimCall 33) (iPrimCall 32) (iPrimCall 37) (iPop) (iAccess 0) (iPrimCall 33) (iPrimCall 33) (iConst shen.multiple-set) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.multiple-set) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn))))) (iConst shen.multiple-set) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iConst symbol) (iAccess 0) (iConst declare) (iGetF) (iTailApply)) (iConst destroy) (iDefun) (iReturn) (iHalt))

((iConst shen.*history*) (iConst ()) (iPrimCall 37) (iReturn) (iHalt))

((iFreeze (iMark) (iConst shen.toplineread) (iGetF) (iApply) (iFreeze (iGrab) (iConst shen.*history*) (iPrimCall 36) (iFreeze (iGrab) (iMark) (iAccess 0) (iAccess 1) (iConst shen.retrieve-from-history-if-needed) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 1) (iAccess 0) (iConst shen.update_history) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 1) (iConst fst) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 0) (iConst shen.toplevel) (iGetF) (iTailApply)) (iTailApply)) (iTailApply)) (iTailApply)) (iTailApply)) (iTailApply)) (iConst shen.read-evaluate-print) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 1) (iConst tuple?) (iGetF) (iApply) (iJF (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 35) (iJF (iMark) (iMark) (iConst shen.space) (iGetF) (iApply) (iMark) (iConst shen.newline) (iGetF) (iApply) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 32) (iConst element?) (iGetF) (iApply)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iAccess 0) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 33) (iMark) (iAccess 1) (iConst fst) (iGetF) (iApply) (iConst @p) (iGetF) (iApply) (iConst shen.retrieve-from-history-if-needed) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst tuple?) (iGetF) (iApply) (iJF (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 35) (iJF (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 33) (iPrimCall 35) (iJF (iConst ()) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 33) (iPrimCall 33) (iPrimCall 19) (iJF (iAccess 0) (iPrimCall 35) (iJF (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 32) (iMark) (iConst shen.exclamation) (iGetF) (iApply) (iPrimCall 19) (iJF (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 33) (iPrimCall 32) (iMark) (iConst shen.exclamation) (iGetF) (iApply) (iPrimCall 19)) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iMark) (iAccess 0) (iPrimCall 32) (iConst snd) (iGetF) (iApply) (iConst shen.prbytes) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 1) (iPrimCall 32) (iReturn)) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst tuple?) (iGetF) (iApply) (iJF (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 35) (iJF (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 32) (iMark) (iConst shen.exclamation) (iGetF) (iApply) (iPrimCall 19)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 33) (iConst shen.make-key) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iMark) (iAccess 1) (iAccess 0) (iConst shen.find-past-inputs) (iGetF) (iApply) (iConst head) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iMark) (iAccess 0) (iConst snd) (iGetF) (iApply) (iConst shen.prbytes) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 1) (iReturn)) (iTailApply)) (iTailApply)) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst tuple?) (iGetF) (iApply) (iJF (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 35) (iJF (iConst ()) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 33) (iPrimCall 19) (iJF (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 32) (iMark) (iConst shen.percent) (iGetF) (iApply) (iPrimCall 19)) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iConst 0) (iMark) (iAccess 0) (iConst reverse) (iGetF) (iApply) (iFreeze (iGrab) (iConst true) (iReturn)) (iConst shen.print-past-inputs) (iGetF) (iApply) (iPop) (iConst abort) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst tuple?) (iGetF) (iApply) (iJF (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 35) (iJF (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 32) (iMark) (iConst shen.percent) (iGetF) (iApply) (iPrimCall 19)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iPrimCall 33) (iConst shen.make-key) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iConst 0) (iMark) (iAccess 1) (iConst reverse) (iGetF) (iApply) (iAccess 0) (iConst shen.print-past-inputs) (iGetF) (iApply) (iFreeze (iGrab) (iConst abort) (iGetF) (iTailApply)) (iTailApply)) (iTailApply)) (iJMP (iConst true) (iJF (iAccess 1) (iReturn)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn)))))))) (iConst shen.retrieve-from-history-if-needed) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 37) (iReturn)) (iConst shen.percent) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 33) (iReturn)) (iConst shen.exclamation) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iMark) (iAccess 0) (iFreeze (iGrab) (iMark) (iConst stoutput) (iGetF) (iApply) (iAccess 0) (iPrimCall 25) (iConst pr) (iGetF) (iTailApply)) (iConst for-each) (iGetF) (iApply) (iPop) (iConst 1) (iConst nl) (iGetF) (iTailApply)) (iConst shen.prbytes) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iConst shen.*history*) (iAccess 1) (iAccess 0) (iPrimCall 34) (iPrimCall 37) (iReturn)) (iConst shen.update_history) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst ()) (iMark) (iMark) (iConst stinput) (iGetF) (iApply) (iConst read-char-code) (iGetF) (iApply) (iConst shen.toplineread_loop) (iGetF) (iTailApply)) (iConst shen.toplineread) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iConst -1) (iAccess 1) (iPrimCall 19) (iJF (iConst ()) (iAccess 0) (iPrimCall 19)) (iJMP (iConst false)) (iJF (iConst 0) (iConst exit) (iGetF) (iTailApply)) (iJMP (iAccess 1) (iMark) (iConst shen.hat) (iGetF) (iApply) (iPrimCall 19) (iJF (iConst "line read aborted") (iPrimCall 18) (iReturn)) (iJMP (iMark) (iMark) (iConst shen.newline) (iGetF) (iApply) (iMark) (iConst shen.carriage-return) (iGetF) (iApply) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iAccess 1) (iConst element?) (iGetF) (iApply) (iJF (iMark) (iFreeze (iGrab) (iConst shen.nextline) (iReturn)) (iAccess 0) (iFreeze (iGrab) (iAccess 0) (iConst shen.<st_input>) (iGetF) (iTailApply)) (iConst compile) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 1) (iConst shen.record-it) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 1) (iConst shen.nextline) (iPrimCall 19) (iJF (iConst true)) (iJMP (iMark) (iAccess 1) (iConst empty?) (iGetF) (iApply)) (iJF (iMark) (iAccess 3) (iConst ()) (iPrimCall 34) (iAccess 2) (iConst append) (iGetF) (iApply) (iMark) (iMark) (iConst stinput) (iGetF) (iApply) (iConst read-char-code) (iGetF) (iApply) (iConst shen.toplineread_loop) (iGetF) (iTailApply)) (iJMP (iAccess 2) (iAccess 1) (iConst @p) (iGetF) (iTailApply))) (iTailApply)) (iTailApply)) (iJMP (iConst true) (iJF (iAccess 1) (iConst -1) (iPrimCall 19) (iJF (iAccess 0)) (iJMP (iMark) (iAccess 1) (iConst ()) (iPrimCall 34) (iAccess 0) (iConst append) (iGetF) (iApply)) (iMark) (iMark) (iConst stinput) (iGetF) (iApply) (iConst read-char-code) (iGetF) (iApply) (iConst shen.toplineread_loop) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn)))))) (iConst shen.toplineread_loop) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 94) (iReturn)) (iConst shen.hat) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 10) (iReturn)) (iConst shen.newline) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 13) (iReturn)) (iConst shen.carriage-return) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iConst +) (iAccess 0) (iPrimCall 19) (iJF (iConst shen.*tc*) (iConst true) (iPrimCall 37) (iReturn)) (iJMP (iConst -) (iAccess 0) (iPrimCall 19) (iJF (iConst shen.*tc*) (iConst false) (iPrimCall 37) (iReturn)) (iJMP (iConst true) (iJF (iConst "tc expects a + or -") (iPrimCall 18) (iReturn)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn))))) (iConst tc) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst shen.*tc*) (iPrimCall 36) (iJF (iMark) (iConst stoutput) (iGetF) (iApply) (iConst "

(") (iMark) (iConst shen.a) (iConst "+) ") (iMark) (iConst shen.*history*) (iPrimCall 36) (iConst length) (iGetF) (iApply) (iConst shen.app) (iGetF) (iApply) (iPrimCall 30) (iConst shen.prhush) (iGetF) (iTailApply)) (iJMP (iMark) (iConst stoutput) (iGetF) (iApply) (iConst "

(") (iMark) (iConst shen.a) (iConst "-) ") (iMark) (iConst shen.*history*) (iPrimCall 36) (iConst length) (iGetF) (iApply) (iConst shen.app) (iGetF) (iApply) (iPrimCall 30) (iConst shen.prhush) (iGetF) (iTailApply))) (iConst shen.prompt) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iConst shen.*tc*) (iPrimCall 36) (iAccess 0) (iConst shen.toplevel_evaluate) (iGetF) (iTailApply)) (iConst shen.toplevel) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 0) (iAccess 1) (iConst shen.find) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 0) (iConst empty?) (iGetF) (iApply) (iJF (iConst "input not found
") (iPrimCall 18) (iReturn)) (iJMP (iAccess 0) (iReturn))) (iTailApply)) (iConst shen.find-past-inputs) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iFreeze (iGrab) (iAccess 0) (iPrimCall 35) (iJF (iConst "parse error here: ") (iMark) (iConst shen.s) (iConst "
") (iAccess 0) (iConst shen.app) (iGetF) (iApply) (iPrimCall 30) (iPrimCall 18) (iReturn)) (iJMP (iConst "parse error
") (iPrimCall 18) (iReturn))) (iAccess 1) (iFreeze (iGrab) (iAccess 0) (iConst shen.<st_input>) (iGetF) (iTailApply)) (iConst compile) (iGetF) (iApply) (iPrimCall 32) (iFreeze (iGrab) (iAccess 0) (iPrimCall 45) (iJF (iGrab) (iAccess 0) (iMark) (iMark) (iAccess 2) (iConst reverse) (iGetF) (iApply) (iAccess 1) (iConst 1) (iPrimCall 23) (iConst nth) (iGetF) (iApply) (iPrimCall 19) (iReturn)) (iJMP (iGrab) (iMark) (iMark) (iAccess 0) (iConst snd) (iGetF) (iApply) (iConst shen.trim-gubbins) (iGetF) (iApply) (iAccess 3) (iConst shen.prefix?) (iGetF) (iTailApply))) (iTailApply)) (iConst shen.make-key) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iAccess 0) (iPrimCall 35) (iJF (iAccess 0) (iPrimCall 32) (iMark) (iConst shen.space) (iGetF) (iApply) (iPrimCall 19)) (iJMP (iConst false)) (iJF (iAccess 0) (iPrimCall 33) (iConst shen.trim-gubbins) (iGetF) (iTailApply)) (iJMP (iAccess 0) (iPrimCall 35) (iJF (iAccess 0) (iPrimCall 32) (iMark) (iConst shen.newline) (iGetF) (iApply) (iPrimCall 19)) (iJMP (iConst false)) (iJF (iAccess 0) (iPrimCall 33) (iConst shen.trim-gubbins) (iGetF) (iTailApply)) (iJMP (iAccess 0) (iPrimCall 35) (iJF (iAccess 0) (iPrimCall 32) (iMark) (iConst shen.carriage-return) (iGetF) (iApply) (iPrimCall 19)) (iJMP (iConst false)) (iJF (iAccess 0) (iPrimCall 33) (iConst shen.trim-gubbins) (iGetF) (iTailApply)) (iJMP (iAccess 0) (iPrimCall 35) (iJF (iAccess 0) (iPrimCall 32) (iMark) (iConst shen.tab) (iGetF) (iApply) (iPrimCall 19)) (iJMP (iConst false)) (iJF (iAccess 0) (iPrimCall 33) (iConst shen.trim-gubbins) (iGetF) (iTailApply)) (iJMP (iAccess 0) (iPrimCall 35) (iJF (iAccess 0) (iPrimCall 32) (iMark) (iConst shen.left-round) (iGetF) (iApply) (iPrimCall 19)) (iJMP (iConst false)) (iJF (iAccess 0) (iPrimCall 33) (iConst shen.trim-gubbins) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iAccess 0) (iReturn)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn)))))))) (iConst shen.trim-gubbins) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 32) (iReturn)) (iConst shen.space) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 9) (iReturn)) (iConst shen.tab) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 40) (iReturn)) (iConst shen.left-round) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iConst ()) (iAccess 0) (iPrimCall 19) (iJF (iConst ()) (iReturn)) (iJMP (iAccess 0) (iPrimCall 35) (iJF (iMark) (iAccess 0) (iPrimCall 32) (iAccess 1) (iApply)) (iJMP (iConst false)) (iJF (iAccess 0) (iPrimCall 32) (iMark) (iAccess 0) (iPrimCall 33) (iAccess 1) (iConst shen.find) (iGetF) (iApply) (iPrimCall 34) (iReturn)) (iJMP (iAccess 0) (iPrimCall 35) (iJF (iAccess 0) (iPrimCall 33) (iAccess 1) (iConst shen.find) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.find) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn)))))) (iConst shen.find) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iConst ()) (iAccess 1) (iPrimCall 19) (iJF (iConst true) (iReturn)) (iJMP (iAccess 1) (iPrimCall 35) (iJF (iAccess 0) (iPrimCall 35) (iJF (iAccess 0) (iPrimCall 32) (iAccess 1) (iPrimCall 32) (iPrimCall 19)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iAccess 0) (iPrimCall 33) (iAccess 1) (iPrimCall 33) (iConst shen.prefix?) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst false) (iReturn)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn))))) (iConst shen.prefix?) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iGrab) (iConst ()) (iAccess 1) (iPrimCall 19) (iJF (iConst _) (iReturn)) (iJMP (iAccess 1) (iPrimCall 35) (iJF (iMark) (iAccess 1) (iPrimCall 32) (iAccess 2) (iApply) (iPrimCall 38)) (iJMP (iConst false)) (iJF (iAccess 0) (iConst 1) (iPrimCall 23) (iAccess 1) (iPrimCall 33) (iAccess 2) (iConst shen.print-past-inputs) (iGetF) (iTailApply)) (iJMP (iAccess 1) (iPrimCall 35) (iJF (iMark) (iAccess 1) (iPrimCall 32) (iConst tuple?) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iMark) (iConst stoutput) (iGetF) (iApply) (iMark) (iConst shen.a) (iConst ". ") (iAccess 0) (iConst shen.app) (iGetF) (iApply) (iConst shen.prhush) (iGetF) (iApply) (iPop) (iMark) (iMark) (iAccess 1) (iPrimCall 32) (iConst snd) (iGetF) (iApply) (iConst shen.prbytes) (iGetF) (iApply) (iPop) (iAccess 0) (iConst 1) (iPrimCall 23) (iAccess 1) (iPrimCall 33) (iAccess 2) (iConst shen.print-past-inputs) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.print-past-inputs) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn)))))) (iConst shen.print-past-inputs) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iAccess 1) (iPrimCall 35) (iJF (iAccess 1) (iPrimCall 33) (iPrimCall 35) (iJF (iConst :) (iAccess 1) (iPrimCall 33) (iPrimCall 32) (iPrimCall 19) (iJF (iAccess 1) (iPrimCall 33) (iPrimCall 33) (iPrimCall 35) (iJF (iConst ()) (iAccess 1) (iPrimCall 33) (iPrimCall 33) (iPrimCall 33) (iPrimCall 19) (iJF (iConst true) (iAccess 0) (iPrimCall 19)) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iAccess 1) (iPrimCall 33) (iPrimCall 33) (iPrimCall 32) (iAccess 1) (iPrimCall 32) (iConst shen.typecheck-and-evaluate) (iGetF) (iTailApply)) (iJMP (iAccess 1) (iPrimCall 35) (iJF (iAccess 1) (iPrimCall 33) (iPrimCall 35)) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iAccess 1) (iPrimCall 32) (iConst ()) (iPrimCall 34) (iConst shen.toplevel_evaluate) (iGetF) (iApply) (iPop) (iMark) (iConst 1) (iConst nl) (iGetF) (iApply) (iPop) (iAccess 0) (iAccess 1) (iPrimCall 33) (iConst shen.toplevel_evaluate) (iGetF) (iTailApply)) (iJMP (iAccess 1) (iPrimCall 35) (iJF (iConst ()) (iAccess 1) (iPrimCall 33) (iPrimCall 19) (iJF (iConst true) (iAccess 0) (iPrimCall 19)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iConst A) (iConst gensym) (iGetF) (iApply) (iAccess 1) (iPrimCall 32) (iConst shen.typecheck-and-evaluate) (iGetF) (iTailApply)) (iJMP (iAccess 1) (iPrimCall 35) (iJF (iConst ()) (iAccess 1) (iPrimCall 33) (iPrimCall 19) (iJF (iConst false) (iAccess 0) (iPrimCall 19)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iAccess 1) (iPrimCall 32) (iConst shen.eval-without-macros) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 0) (iConst print) (iGetF) (iTailApply)) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.toplevel_evaluate) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn))))))) (iConst shen.toplevel_evaluate) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 0) (iAccess 1) (iConst shen.typecheck) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 0) (iConst false) (iPrimCall 19) (iJF (iConst "type error
") (iPrimCall 18) (iReturn)) (iJMP (iMark) (iAccess 2) (iConst shen.eval-without-macros) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 1) (iConst shen.pretty-type) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iConst stoutput) (iGetF) (iApply) (iMark) (iConst shen.s) (iConst " : ") (iMark) (iConst shen.r) (iConst "") (iAccess 0) (iConst shen.app) (iGetF) (iApply) (iPrimCall 30) (iAccess 1) (iConst shen.app) (iGetF) (iApply) (iConst shen.prhush) (iGetF) (iTailApply)) (iTailApply)) (iTailApply))) (iTailApply)) (iConst shen.typecheck-and-evaluate) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iAccess 0) (iMark) (iAccess 0) (iConst shen.extract-pvars) (iGetF) (iApply) (iConst shen.*alphabet*) (iPrimCall 36) (iConst shen.mult_subst) (iGetF) (iTailApply)) (iConst shen.pretty-type) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iMark) (iAccess 0) (iConst shen.pvar?) (iGetF) (iApply) (iJF (iAccess 0) (iConst ()) (iPrimCall 34) (iReturn)) (iJMP (iAccess 0) (iPrimCall 35) (iJF (iMark) (iAccess 0) (iPrimCall 33) (iConst shen.extract-pvars) (iGetF) (iApply) (iMark) (iAccess 0) (iPrimCall 32) (iConst shen.extract-pvars) (iGetF) (iApply) (iConst union) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst ()) (iReturn)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn))))) (iConst shen.extract-pvars) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iGrab) (iConst ()) (iAccess 2) (iPrimCall 19) (iJF (iAccess 0) (iReturn)) (iJMP (iConst ()) (iAccess 1) (iPrimCall 19) (iJF (iAccess 0) (iReturn)) (iJMP (iAccess 2) (iPrimCall 35) (iJF (iAccess 1) (iPrimCall 35)) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iAccess 1) (iPrimCall 32) (iAccess 2) (iPrimCall 32) (iConst subst) (iGetF) (iApply) (iAccess 1) (iPrimCall 33) (iAccess 2) (iPrimCall 33) (iConst shen.mult_subst) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.mult_subst) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn)))))) (iConst shen.mult_subst) (iDefun) (iReturn) (iHalt))



