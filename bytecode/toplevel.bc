((iFreeze (iMark) (iConst shen.credits) (iGetF) (iApply) (iPop) (iConst shen.loop) (iGetF) (iTailApply)) (iConst shen.shen) (iDefun) (iReturn) (iHalt))

((iConst true) (iConst shen.*continue-repl-loop*) (iConst set) (iGetF) (iTailApply) (iHalt))

((iFreeze (iGrab) (iConst false) (iConst shen.*continue-repl-loop*) (iConst set) (iGetF) (iTailApply)) (iConst exit) (iDefun) (iReturn) (iHalt))

((iFreeze (iMark) (iConst shen.initialise_environment) (iGetF) (iApply) (iPop) (iMark) (iConst shen.prompt) (iGetF) (iApply) (iPop) (iFreeze (iGrab) (iMark) (iConst stoutput) (iGetF) (iApply) (iMark) (iAccess 0) (iConst error-to-string) (iGetF) (iApply) (iConst pr) (iGetF) (iTailApply)) (iSetJmp (iMark) (iConst shen.read-evaluate-print) (iGetF) (iApply) (iClearJmp)) (iPop) (iMark) (iConst shen.*continue-repl-loop*) (iConst value) (iGetF) (iApply) (iJF (iConst shen.loop) (iGetF) (iTailApply)) (iJMP (iConst exit) (iReturn))) (iConst shen.loop) (iDefun) (iReturn) (iHalt))

((iFreeze (iMark) (iMark) (iConst stoutput) (iGetF) (iApply) (iConst "Cora, my own lisp!
") (iConst shen.prhush) (iGetF) (iApply) (iPop) (iMark) (iMark) (iConst stoutput) (iGetF) (iApply) (iConst "Inspired by the awesome Shen language.
") (iConst shen.prhush) (iGetF) (iApply) (iPop) (iMark) (iConst stoutput) (iGetF) (iApply) (iConst "Copyright (C) 2018 Arthur Mao <tiancaiamao@gmail.com>
") (iConst shen.prhush) (iGetF) (iTailApply)) (iConst shen.credits) (iDefun) (iReturn) (iHalt))

((iFreeze (iMark) (iMark) (iMark) (iMark) (iMark) (iMark) (iMark) (iMark) (iConst ()) (iConst 0) (iConst cons) (iGetF) (iApply) (iConst shen.*catch*) (iConst cons) (iGetF) (iApply) (iConst 0) (iConst cons) (iGetF) (iApply) (iConst shen.*process-counter*) (iConst cons) (iGetF) (iApply) (iConst 0) (iConst cons) (iGetF) (iApply) (iConst shen.*infs*) (iConst cons) (iGetF) (iApply) (iConst 0) (iConst cons) (iGetF) (iApply) (iConst shen.*call*) (iConst cons) (iGetF) (iApply) (iConst shen.multiple-set) (iGetF) (iTailApply)) (iConst shen.initialise_environment) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iMark) (iAccess 0) (iConst ()) (iConst =) (iGetF) (iApply) (iJF (iConst ()) (iReturn)) (iJMP (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iConst cons?) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iMark) (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iConst hd) (iGetF) (iApply) (iMark) (iAccess 0) (iConst hd) (iGetF) (iApply) (iConst set) (iGetF) (iApply) (iPop) (iMark) (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst shen.multiple-set) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.multiple-set) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iConst simple-error) (iGetF) (iTailApply))))) (iConst shen.multiple-set) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iConst symbol) (iAccess 0) (iConst declare) (iGetF) (iTailApply)) (iConst destroy) (iDefun) (iReturn) (iHalt))

((iConst ()) (iConst shen.*history*) (iConst set) (iGetF) (iTailApply) (iHalt))

((iFreeze (iMark) (iConst shen.toplineread) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iConst shen.*history*) (iConst value) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 0) (iAccess 1) (iConst shen.retrieve-from-history-if-needed) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 1) (iAccess 0) (iConst shen.update_history) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 1) (iConst fst) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 0) (iConst shen.toplevel) (iGetF) (iTailApply)) (iTailApply)) (iTailApply)) (iTailApply)) (iTailApply)) (iTailApply)) (iConst shen.read-evaluate-print) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 1) (iConst tuple?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iMark) (iConst ()) (iMark) (iConst shen.newline) (iGetF) (iApply) (iConst cons) (iGetF) (iApply) (iMark) (iConst shen.space) (iGetF) (iApply) (iConst cons) (iGetF) (iApply) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst hd) (iGetF) (iApply) (iConst element?) (iGetF) (iApply)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iAccess 0) (iMark) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iMark) (iAccess 1) (iConst fst) (iGetF) (iApply) (iConst @p) (iGetF) (iApply) (iConst shen.retrieve-from-history-if-needed) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst tuple?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst ()) (iConst =) (iGetF) (iApply) (iJF (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iConst shen.exclamation) (iGetF) (iApply) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst hd) (iGetF) (iApply) (iConst =) (iGetF) (iApply) (iJF (iMark) (iMark) (iConst shen.exclamation) (iGetF) (iApply) (iMark) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst hd) (iGetF) (iApply) (iConst =) (iGetF) (iApply)) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iMark) (iMark) (iAccess 0) (iConst hd) (iGetF) (iApply) (iConst snd) (iGetF) (iApply) (iConst shen.prbytes) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 1) (iConst hd) (iGetF) (iTailApply)) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst tuple?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iConst shen.exclamation) (iGetF) (iApply) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst hd) (iGetF) (iApply) (iConst =) (iGetF) (iApply)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst shen.make-key) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iMark) (iAccess 1) (iAccess 0) (iConst shen.find-past-inputs) (iGetF) (iApply) (iConst head) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iMark) (iAccess 0) (iConst snd) (iGetF) (iApply) (iConst shen.prbytes) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 1) (iReturn)) (iTailApply)) (iTailApply)) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst tuple?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst ()) (iConst =) (iGetF) (iApply) (iJF (iMark) (iMark) (iConst shen.percent) (iGetF) (iApply) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst hd) (iGetF) (iApply) (iConst =) (iGetF) (iApply)) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iConst 0) (iMark) (iAccess 0) (iConst reverse) (iGetF) (iApply) (iFreeze (iGrab) (iConst true) (iReturn)) (iConst shen.print-past-inputs) (iGetF) (iApply) (iPop) (iConst abort) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst tuple?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iConst shen.percent) (iGetF) (iApply) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst hd) (iGetF) (iApply) (iConst =) (iGetF) (iApply)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iMark) (iMark) (iAccess 1) (iConst snd) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst shen.make-key) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iConst 0) (iMark) (iAccess 1) (iConst reverse) (iGetF) (iApply) (iAccess 0) (iConst shen.print-past-inputs) (iGetF) (iApply) (iFreeze (iGrab) (iConst abort) (iGetF) (iTailApply)) (iTailApply)) (iTailApply)) (iJMP (iConst true) (iJF (iAccess 1) (iReturn)) (iJMP (iConst "no match cond") (iConst simple-error) (iGetF) (iTailApply)))))))) (iConst shen.retrieve-from-history-if-needed) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 37) (iReturn)) (iConst shen.percent) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 33) (iReturn)) (iConst shen.exclamation) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iMark) (iAccess 0) (iFreeze (iGrab) (iMark) (iConst stoutput) (iGetF) (iApply) (iMark) (iAccess 0) (iConst n->string) (iGetF) (iApply) (iConst pr) (iGetF) (iTailApply)) (iConst for-each) (iGetF) (iApply) (iPop) (iConst 1) (iConst nl) (iGetF) (iTailApply)) (iConst shen.prbytes) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 0) (iAccess 1) (iConst cons) (iGetF) (iApply) (iConst shen.*history*) (iConst set) (iGetF) (iTailApply)) (iConst shen.update_history) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst ()) (iMark) (iMark) (iConst stinput) (iGetF) (iApply) (iConst read-char-code) (iGetF) (iApply) (iConst shen.toplineread_loop) (iGetF) (iTailApply)) (iConst shen.toplineread) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 1) (iConst -1) (iConst =) (iGetF) (iApply) (iJF (iMark) (iAccess 0) (iConst ()) (iConst =) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iConst 0) (iConst exit) (iGetF) (iTailApply)) (iJMP (iMark) (iMark) (iConst shen.hat) (iGetF) (iApply) (iAccess 1) (iConst =) (iGetF) (iApply) (iJF (iConst "line read aborted") (iConst simple-error) (iGetF) (iTailApply)) (iJMP (iMark) (iMark) (iMark) (iConst ()) (iMark) (iConst shen.carriage-return) (iGetF) (iApply) (iConst cons) (iGetF) (iApply) (iMark) (iConst shen.newline) (iGetF) (iApply) (iConst cons) (iGetF) (iApply) (iAccess 1) (iConst element?) (iGetF) (iApply) (iJF (iMark) (iFreeze (iGrab) (iConst shen.nextline) (iReturn)) (iAccess 0) (iFreeze (iGrab) (iAccess 0) (iConst shen.<st_input>) (iGetF) (iTailApply)) (iConst compile) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 1) (iConst shen.record-it) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iConst shen.nextline) (iAccess 1) (iConst =) (iGetF) (iApply) (iJF (iConst true)) (iJMP (iMark) (iAccess 1) (iConst empty?) (iGetF) (iApply)) (iJF (iMark) (iMark) (iConst ()) (iAccess 3) (iConst cons) (iGetF) (iApply) (iAccess 2) (iConst append) (iGetF) (iApply) (iMark) (iMark) (iConst stinput) (iGetF) (iApply) (iConst read-char-code) (iGetF) (iApply) (iConst shen.toplineread_loop) (iGetF) (iTailApply)) (iJMP (iAccess 2) (iAccess 1) (iConst @p) (iGetF) (iTailApply))) (iTailApply)) (iTailApply)) (iJMP (iConst true) (iJF (iMark) (iConst -1) (iAccess 1) (iConst =) (iGetF) (iApply) (iJF (iAccess 0)) (iJMP (iMark) (iMark) (iConst ()) (iAccess 1) (iConst cons) (iGetF) (iApply) (iAccess 0) (iConst append) (iGetF) (iApply)) (iMark) (iMark) (iConst stinput) (iGetF) (iApply) (iConst read-char-code) (iGetF) (iApply) (iConst shen.toplineread_loop) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iConst simple-error) (iGetF) (iTailApply)))))) (iConst shen.toplineread_loop) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 94) (iReturn)) (iConst shen.hat) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 10) (iReturn)) (iConst shen.newline) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 13) (iReturn)) (iConst shen.carriage-return) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iMark) (iAccess 0) (iConst +) (iConst =) (iGetF) (iApply) (iJF (iConst true) (iConst shen.*tc*) (iConst set) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 0) (iConst -) (iConst =) (iGetF) (iApply) (iJF (iConst false) (iConst shen.*tc*) (iConst set) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst "tc expects a + or -") (iConst simple-error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iConst simple-error) (iGetF) (iTailApply))))) (iConst tc) (iDefun) (iReturn) (iHalt))

((iFreeze (iMark) (iConst shen.*tc*) (iConst value) (iGetF) (iApply) (iJF (iMark) (iConst stoutput) (iGetF) (iApply) (iMark) (iMark) (iConst shen.a) (iConst "+) ") (iMark) (iMark) (iConst shen.*history*) (iConst value) (iGetF) (iApply) (iConst length) (iGetF) (iApply) (iConst shen.app) (iGetF) (iApply) (iConst "

(") (iConst cn) (iGetF) (iApply) (iConst shen.prhush) (iGetF) (iTailApply)) (iJMP (iMark) (iConst stoutput) (iGetF) (iApply) (iMark) (iMark) (iConst shen.a) (iConst "-) ") (iMark) (iMark) (iConst shen.*history*) (iConst value) (iGetF) (iApply) (iConst length) (iGetF) (iApply) (iConst shen.app) (iGetF) (iApply) (iConst "

(") (iConst cn) (iGetF) (iApply) (iConst shen.prhush) (iGetF) (iTailApply))) (iConst shen.prompt) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iMark) (iConst shen.*tc*) (iConst value) (iGetF) (iApply) (iAccess 0) (iConst shen.toplevel_evaluate) (iGetF) (iTailApply)) (iConst shen.toplevel) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 0) (iAccess 1) (iConst shen.find) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 0) (iConst empty?) (iGetF) (iApply) (iJF (iConst "input not found
") (iConst simple-error) (iGetF) (iTailApply)) (iJMP (iAccess 0) (iReturn))) (iTailApply)) (iConst shen.find-past-inputs) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iMark) (iFreeze (iGrab) (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iConst shen.s) (iConst "
") (iAccess 0) (iConst shen.app) (iGetF) (iApply) (iConst "parse error here: ") (iConst cn) (iGetF) (iApply) (iConst simple-error) (iGetF) (iTailApply)) (iJMP (iConst "parse error
") (iConst simple-error) (iGetF) (iTailApply))) (iAccess 1) (iFreeze (iGrab) (iAccess 0) (iConst shen.<st_input>) (iGetF) (iTailApply)) (iConst compile) (iGetF) (iApply) (iConst hd) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 0) (iConst integer?) (iGetF) (iApply) (iJF (iGrab) (iMark) (iMark) (iAccess 2) (iConst reverse) (iGetF) (iApply) (iMark) (iConst 1) (iAccess 1) (iConst +) (iGetF) (iApply) (iConst nth) (iGetF) (iApply) (iAccess 0) (iConst =) (iGetF) (iTailApply)) (iJMP (iGrab) (iMark) (iMark) (iAccess 0) (iConst snd) (iGetF) (iApply) (iConst shen.trim-gubbins) (iGetF) (iApply) (iAccess 3) (iConst shen.prefix?) (iGetF) (iTailApply))) (iTailApply)) (iConst shen.make-key) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iConst shen.space) (iGetF) (iApply) (iMark) (iAccess 0) (iConst hd) (iGetF) (iApply) (iConst =) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iConst shen.trim-gubbins) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iConst shen.newline) (iGetF) (iApply) (iMark) (iAccess 0) (iConst hd) (iGetF) (iApply) (iConst =) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iConst shen.trim-gubbins) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iConst shen.carriage-return) (iGetF) (iApply) (iMark) (iAccess 0) (iConst hd) (iGetF) (iApply) (iConst =) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iConst shen.trim-gubbins) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iConst shen.tab) (iGetF) (iApply) (iMark) (iAccess 0) (iConst hd) (iGetF) (iApply) (iConst =) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iConst shen.trim-gubbins) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iConst shen.left-round) (iGetF) (iApply) (iMark) (iAccess 0) (iConst hd) (iGetF) (iApply) (iConst =) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iConst shen.trim-gubbins) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iAccess 0) (iReturn)) (iJMP (iConst "no match cond") (iConst simple-error) (iGetF) (iTailApply)))))))) (iConst shen.trim-gubbins) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 32) (iReturn)) (iConst shen.space) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 9) (iReturn)) (iConst shen.tab) (iDefun) (iReturn) (iHalt))

((iFreeze (iConst 40) (iReturn)) (iConst shen.left-round) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 0) (iConst ()) (iConst =) (iGetF) (iApply) (iJF (iConst ()) (iReturn)) (iJMP (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 0) (iConst hd) (iGetF) (iApply) (iAccess 1) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iAccess 1) (iConst shen.find) (iGetF) (iApply) (iMark) (iAccess 0) (iConst hd) (iGetF) (iApply) (iConst cons) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iAccess 1) (iConst shen.find) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.find) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iConst simple-error) (iGetF) (iTailApply)))))) (iConst shen.find) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 1) (iConst ()) (iConst =) (iGetF) (iApply) (iJF (iConst true) (iReturn)) (iJMP (iMark) (iAccess 1) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 1) (iConst hd) (iGetF) (iApply) (iMark) (iAccess 0) (iConst hd) (iGetF) (iApply) (iConst =) (iGetF) (iApply)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iConst shen.prefix?) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst false) (iReturn)) (iJMP (iConst "no match cond") (iConst simple-error) (iGetF) (iTailApply))))) (iConst shen.prefix?) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iGrab) (iMark) (iAccess 1) (iConst ()) (iConst =) (iGetF) (iApply) (iJF (iConst _) (iReturn)) (iJMP (iMark) (iAccess 1) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iMark) (iAccess 1) (iConst hd) (iGetF) (iApply) (iAccess 2) (iApply) (iConst not) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iConst 1) (iAccess 0) (iConst +) (iGetF) (iApply) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iAccess 2) (iConst shen.print-past-inputs) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 1) (iConst hd) (iGetF) (iApply) (iConst tuple?) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iMark) (iConst stoutput) (iGetF) (iApply) (iMark) (iConst shen.a) (iConst ". ") (iAccess 0) (iConst shen.app) (iGetF) (iApply) (iConst shen.prhush) (iGetF) (iApply) (iPop) (iMark) (iMark) (iMark) (iAccess 1) (iConst hd) (iGetF) (iApply) (iConst snd) (iGetF) (iApply) (iConst shen.prbytes) (iGetF) (iApply) (iPop) (iMark) (iConst 1) (iAccess 0) (iConst +) (iGetF) (iApply) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iAccess 2) (iConst shen.print-past-inputs) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.print-past-inputs) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iConst simple-error) (iGetF) (iTailApply)))))) (iConst shen.print-past-inputs) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 1) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iConst hd) (iGetF) (iApply) (iConst :) (iConst =) (iGetF) (iApply) (iJF (iMark) (iMark) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iMark) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst ()) (iConst =) (iGetF) (iApply) (iJF (iMark) (iAccess 0) (iConst true) (iConst =) (iGetF) (iApply)) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iMark) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iConst tl) (iGetF) (iApply) (iConst hd) (iGetF) (iApply) (iMark) (iAccess 1) (iConst hd) (iGetF) (iApply) (iConst shen.typecheck-and-evaluate) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iConst cons?) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iMark) (iConst ()) (iMark) (iAccess 1) (iConst hd) (iGetF) (iApply) (iConst cons) (iGetF) (iApply) (iConst shen.toplevel_evaluate) (iGetF) (iApply) (iPop) (iMark) (iConst 1) (iConst nl) (iGetF) (iApply) (iPop) (iAccess 0) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iConst shen.toplevel_evaluate) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iConst ()) (iConst =) (iGetF) (iApply) (iJF (iMark) (iAccess 0) (iConst true) (iConst =) (iGetF) (iApply)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iConst A) (iConst gensym) (iGetF) (iApply) (iMark) (iAccess 1) (iConst hd) (iGetF) (iApply) (iConst shen.typecheck-and-evaluate) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 1) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iConst ()) (iConst =) (iGetF) (iApply) (iJF (iMark) (iAccess 0) (iConst false) (iConst =) (iGetF) (iApply)) (iJMP (iConst false))) (iJMP (iConst false)) (iJF (iMark) (iMark) (iAccess 1) (iConst hd) (iGetF) (iApply) (iConst shen.eval-without-macros) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 0) (iConst print) (iGetF) (iTailApply)) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.toplevel_evaluate) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iConst simple-error) (iGetF) (iTailApply))))))) (iConst shen.toplevel_evaluate) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 0) (iAccess 1) (iConst shen.typecheck) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iConst false) (iAccess 0) (iConst =) (iGetF) (iApply) (iJF (iConst "type error
") (iConst simple-error) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 2) (iConst shen.eval-without-macros) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iAccess 1) (iConst shen.pretty-type) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iConst stoutput) (iGetF) (iApply) (iMark) (iConst shen.s) (iMark) (iMark) (iConst shen.r) (iConst "") (iAccess 0) (iConst shen.app) (iGetF) (iApply) (iConst " : ") (iConst cn) (iGetF) (iApply) (iAccess 1) (iConst shen.app) (iGetF) (iApply) (iConst shen.prhush) (iGetF) (iTailApply)) (iTailApply)) (iTailApply))) (iTailApply)) (iConst shen.typecheck-and-evaluate) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iAccess 0) (iMark) (iAccess 0) (iConst shen.extract-pvars) (iGetF) (iApply) (iMark) (iConst shen.*alphabet*) (iConst value) (iGetF) (iApply) (iConst shen.mult_subst) (iGetF) (iTailApply)) (iConst shen.pretty-type) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iMark) (iAccess 0) (iConst shen.pvar?) (iGetF) (iApply) (iJF (iConst ()) (iAccess 0) (iConst cons) (iGetF) (iTailApply)) (iJMP (iMark) (iAccess 0) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iMark) (iAccess 0) (iConst tl) (iGetF) (iApply) (iConst shen.extract-pvars) (iGetF) (iApply) (iMark) (iMark) (iAccess 0) (iConst hd) (iGetF) (iApply) (iConst shen.extract-pvars) (iGetF) (iApply) (iConst union) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst ()) (iReturn)) (iJMP (iConst "no match cond") (iConst simple-error) (iGetF) (iTailApply))))) (iConst shen.extract-pvars) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iGrab) (iMark) (iAccess 2) (iConst ()) (iConst =) (iGetF) (iApply) (iJF (iAccess 0) (iReturn)) (iJMP (iMark) (iAccess 1) (iConst ()) (iConst =) (iGetF) (iApply) (iJF (iAccess 0) (iReturn)) (iJMP (iMark) (iAccess 2) (iConst cons?) (iGetF) (iApply) (iJF (iMark) (iAccess 1) (iConst cons?) (iGetF) (iApply)) (iJMP (iConst false)) (iJF (iMark) (iAccess 0) (iMark) (iAccess 1) (iConst hd) (iGetF) (iApply) (iMark) (iAccess 2) (iConst hd) (iGetF) (iApply) (iConst subst) (iGetF) (iApply) (iMark) (iAccess 1) (iConst tl) (iGetF) (iApply) (iMark) (iAccess 2) (iConst tl) (iGetF) (iApply) (iConst shen.mult_subst) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.mult_subst) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iConst simple-error) (iGetF) (iTailApply)))))) (iConst shen.mult_subst) (iDefun) (iReturn) (iHalt))



