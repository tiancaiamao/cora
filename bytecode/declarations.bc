((iConst shen.*installing-kl*) (iConst false) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*history*) (iConst ()) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*tc*) (iConst false) (iPrimCall 37) (iReturn) (iHalt))

((iConst *property-vector*) (iMark) (iConst 20000) (iConst dict) (iGetF) (iApply) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*process-counter*) (iConst 0) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*varcounter*) (iMark) (iConst 1000) (iConst vector) (iGetF) (iApply) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*prologvectors*) (iMark) (iConst 1000) (iConst vector) (iGetF) (iApply) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*demodulation-function*) (iFreeze (iGrab) (iAccess 0) (iReturn)) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*macroreg*) (iConst shen.timer-macro) (iConst shen.cases-macro) (iConst shen.abs-macro) (iConst shen.put/get-macro) (iConst shen.compile-macro) (iConst shen.datatype-macro) (iConst shen.let-macro) (iConst shen.assoc-macro) (iConst shen.make-string-macro) (iConst shen.output-macro) (iConst shen.input-macro) (iConst shen.error-macro) (iConst shen.prolog-macro) (iConst shen.synonyms-macro) (iConst shen.nl-macro) (iConst shen.@s-macro) (iConst shen.defprolog-macro) (iConst shen.function-macro) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 37) (iReturn) (iHalt))

((iConst *macros*) (iFreeze (iGrab) (iAccess 0) (iConst shen.timer-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.cases-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.abs-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.put/get-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.compile-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.datatype-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.let-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.assoc-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.make-string-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.output-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.input-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.error-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.prolog-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.synonyms-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.nl-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.@s-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.defprolog-macro) (iGetF) (iTailApply)) (iFreeze (iGrab) (iAccess 0) (iConst shen.function-macro) (iGetF) (iTailApply)) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*gensym*) (iConst 0) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*tracking*) (iConst ()) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*alphabet*) (iConst A) (iConst B) (iConst C) (iConst D) (iConst E) (iConst F) (iConst G) (iConst H) (iConst I) (iConst J) (iConst K) (iConst L) (iConst M) (iConst N) (iConst O) (iConst P) (iConst Q) (iConst R) (iConst S) (iConst T) (iConst U) (iConst V) (iConst W) (iConst X) (iConst Y) (iConst Z) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*special*) (iConst @p) (iConst @s) (iConst @v) (iConst cons) (iConst lambda) (iConst let) (iConst where) (iConst set) (iConst open) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*extraspecial*) (iConst define) (iConst shen.process-datatype) (iConst input+) (iConst defcc) (iConst shen.read+) (iConst defmacro) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*spy*) (iConst false) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*datatypes*) (iConst ()) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*alldatatypes*) (iConst ()) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*shen-type-theory-enabled?*) (iConst true) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*synonyms*) (iConst ()) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*system*) (iConst ()) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*signedfuncs*) (iConst ()) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*maxcomplexity*) (iConst 128) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*occurs*) (iConst true) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*maxinferences*) (iConst 1000000) (iPrimCall 37) (iReturn) (iHalt))

((iConst *maximum-print-sequence-size*) (iConst 20) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*catch*) (iConst 0) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*call*) (iConst 0) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*infs*) (iConst 0) (iPrimCall 37) (iReturn) (iHalt))

((iConst *hush*) (iConst false) (iPrimCall 37) (iReturn) (iHalt))

((iConst shen.*optimise*) (iConst false) (iPrimCall 37) (iReturn) (iHalt))

((iConst *version*) (iConst "Shen 20.1") (iPrimCall 37) (iReturn) (iHalt))

((iMark) (iConst *home-directory*) (iConst bound?) (iGetF) (iApply) (iPrimCall 38) (iJF (iConst *home-directory*) (iConst "") (iPrimCall 37) (iReturn)) (iJMP (iConst shen.skip) (iReturn)) (iHalt))

((iMark) (iConst *sterror*) (iConst bound?) (iGetF) (iApply) (iPrimCall 38) (iJF (iConst *sterror*) (iConst *stoutput*) (iPrimCall 36) (iPrimCall 37) (iReturn)) (iJMP (iConst shen.skip) (iReturn)) (iHalt))

((iMark) (iConst *argv*) (iConst bound?) (iGetF) (iApply) (iPrimCall 38) (iJF (iConst *argv*) (iConst "shen") (iConst ()) (iPrimCall 34) (iPrimCall 37) (iReturn)) (iJMP (iConst shen.skip) (iReturn)) (iHalt))

((iFreeze (iGrab) (iConst ()) (iAccess 0) (iPrimCall 19) (iJF (iConst ()) (iReturn)) (iJMP (iAccess 0) (iPrimCall 35) (iJF (iAccess 0) (iPrimCall 33) (iPrimCall 35)) (iJMP (iConst false)) (iJF (iMark) (iConst *property-vector*) (iPrimCall 36) (iAccess 0) (iPrimCall 33) (iPrimCall 32) (iConst arity) (iAccess 0) (iPrimCall 32) (iConst put) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 1) (iPrimCall 33) (iPrimCall 33) (iConst shen.initialise_arity_table) (iGetF) (iTailApply)) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.initialise_arity_table) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn))))) (iConst shen.initialise_arity_table) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iConst *property-vector*) (iPrimCall 36) (iFreeze (iConst -1) (iReturn)) (iConst arity) (iAccess 0) (iConst get/or) (iGetF) (iTailApply)) (iConst arity) (iDefun) (iReturn) (iHalt))

((iConst abort) (iConst 0) (iConst absvector?) (iConst 1) (iConst absvector) (iConst 1) (iConst adjoin) (iConst 2) (iConst and) (iConst 2) (iConst append) (iConst 2) (iConst arity) (iConst 1) (iConst assoc) (iConst 2) (iConst boolean?) (iConst 1) (iConst bound?) (iConst 1) (iConst cd) (iConst 1) (iConst close) (iConst 1) (iConst compile) (iConst 3) (iConst concat) (iConst 2) (iConst cons) (iConst 2) (iConst cons?) (iConst 1) (iConst command-line) (iConst 0) (iConst cn) (iConst 2) (iConst declare) (iConst 2) (iConst destroy) (iConst 1) (iConst difference) (iConst 2) (iConst do) (iConst 2) (iConst element?) (iConst 2) (iConst empty?) (iConst 1) (iConst enable-type-theory) (iConst 1) (iConst error-to-string) (iConst 1) (iConst shen.interror) (iConst 2) (iConst eval) (iConst 1) (iConst eval-kl) (iConst 1) (iConst exit) (iConst 1) (iConst explode) (iConst 1) (iConst external) (iConst 1) (iConst fail-if) (iConst 2) (iConst fail) (iConst 0) (iConst fix) (iConst 2) (iConst fold-left) (iConst 3) (iConst fold-right) (iConst 3) (iConst filter) (iConst 2) (iConst for-each) (iConst 2) (iConst findall) (iConst 5) (iConst freeze) (iConst 1) (iConst fst) (iConst 1) (iConst gensym) (iConst 1) (iConst get) (iConst 3) (iConst get/or) (iConst 4) (iConst get-time) (iConst 1) (iConst address->) (iConst 3) (iConst <-address) (iConst 2) (iConst <-address/or) (iConst 3) (iConst <-vector) (iConst 2) (iConst <-vector/or) (iConst 3) (iConst >) (iConst 2) (iConst >=) (iConst 2) (iConst =) (iConst 2) (iConst hash) (iConst 2) (iConst hd) (iConst 1) (iConst hdv) (iConst 1) (iConst hdstr) (iConst 1) (iConst head) (iConst 1) (iConst if) (iConst 3) (iConst integer?) (iConst 1) (iConst intern) (iConst 1) (iConst identical) (iConst 4) (iConst inferences) (iConst 0) (iConst input) (iConst 1) (iConst input+) (iConst 2) (iConst implementation) (iConst 0) (iConst intersection) (iConst 2) (iConst internal) (iConst 1) (iConst it) (iConst 0) (iConst kill) (iConst 0) (iConst language) (iConst 0) (iConst length) (iConst 1) (iConst limit) (iConst 1) (iConst lineread) (iConst 1) (iConst load) (iConst 1) (iConst <) (iConst 2) (iConst <=) (iConst 2) (iConst vector) (iConst 1) (iConst macroexpand) (iConst 1) (iConst map) (iConst 2) (iConst mapcan) (iConst 2) (iConst maxinferences) (iConst 1) (iConst nl) (iConst 1) (iConst not) (iConst 1) (iConst nth) (iConst 2) (iConst n->string) (iConst 1) (iConst number?) (iConst 1) (iConst occurs-check) (iConst 1) (iConst occurrences) (iConst 2) (iConst occurs-check) (iConst 1) (iConst open) (iConst 2) (iConst optimise) (iConst 1) (iConst or) (iConst 2) (iConst os) (iConst 0) (iConst package) (iConst 3) (iConst package?) (iConst 1) (iConst port) (iConst 0) (iConst porters) (iConst 0) (iConst pos) (iConst 2) (iConst print) (iConst 1) (iConst profile) (iConst 1) (iConst profile-results) (iConst 1) (iConst pr) (iConst 2) (iConst ps) (iConst 1) (iConst preclude) (iConst 1) (iConst preclude-all-but) (iConst 1) (iConst protect) (iConst 1) (iConst address->) (iConst 3) (iConst put) (iConst 4) (iConst shen.reassemble) (iConst 2) (iConst read-file-as-string) (iConst 1) (iConst read-file) (iConst 1) (iConst read-file-as-charlist) (iConst 1) (iConst read-file-as-bytelist) (iConst 1) (iConst read) (iConst 1) (iConst read-byte) (iConst 1) (iConst read-from-string) (iConst 1) (iConst read-char-code) (iConst 1) (iConst receive) (iConst 1) (iConst release) (iConst 0) (iConst remove) (iConst 2) (iConst shen.require) (iConst 3) (iConst reverse) (iConst 1) (iConst set) (iConst 2) (iConst simple-error) (iConst 1) (iConst snd) (iConst 1) (iConst specialise) (iConst 1) (iConst spy) (iConst 1) (iConst step) (iConst 1) (iConst stinput) (iConst 0) (iConst stoutput) (iConst 0) (iConst sterror) (iConst 0) (iConst string->n) (iConst 1) (iConst string->symbol) (iConst 1) (iConst string?) (iConst 1) (iConst str) (iConst 1) (iConst subst) (iConst 3) (iConst sum) (iConst 1) (iConst symbol?) (iConst 1) (iConst systemf) (iConst 1) (iConst tail) (iConst 1) (iConst tl) (iConst 1) (iConst tc) (iConst 1) (iConst tc?) (iConst 0) (iConst thaw) (iConst 1) (iConst tlstr) (iConst 1) (iConst track) (iConst 1) (iConst trap-error) (iConst 2) (iConst tuple?) (iConst 1) (iConst type) (iConst 2) (iConst return) (iConst 3) (iConst undefmacro) (iConst 1) (iConst unput) (iConst 3) (iConst unprofile) (iConst 1) (iConst unify) (iConst 4) (iConst unify!) (iConst 4) (iConst union) (iConst 2) (iConst untrack) (iConst 1) (iConst unspecialise) (iConst 1) (iConst undefmacro) (iConst 1) (iConst vector) (iConst 1) (iConst vector?) (iConst 1) (iConst vector->) (iConst 3) (iConst value) (iConst 1) (iConst value/or) (iConst 2) (iConst variable?) (iConst 1) (iConst version) (iConst 0) (iConst write-byte) (iConst 2) (iConst write-to-file) (iConst 2) (iConst y-or-n?) (iConst 1) (iConst +) (iConst 2) (iConst *) (iConst 2) (iConst /) (iConst 2) (iConst -) (iConst 2) (iConst ==) (iConst 2) (iConst <e>) (iConst 1) (iConst <!>) (iConst 1) (iConst @p) (iConst 2) (iConst @v) (iConst 2) (iConst @s) (iConst 2) (iConst preclude) (iConst 1) (iConst include) (iConst 1) (iConst preclude-all-but) (iConst 1) (iConst include-all-but) (iConst 1) (iConst dict) (iConst 1) (iConst dict?) (iConst 1) (iConst dict-count) (iConst 1) (iConst dict->) (iConst 3) (iConst <-dict/or) (iConst 3) (iConst <-dict) (iConst 2) (iConst dict-rm) (iConst 2) (iConst dict-fold) (iConst 3) (iConst dict-keys) (iConst 1) (iConst dict-values) (iConst 1) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iConst shen.initialise_arity_table) (iGetF) (iTailApply) (iHalt))

((iFreeze (iGrab) (iConst "shen") (iPrimCall 31) (iFreeze (iGrab) (iMark) (iConst *property-vector*) (iPrimCall 36) (iConst shen.external-symbols) (iAccess 0) (iConst get) (iGetF) (iApply) (iFreeze (iGrab) (iMark) (iConst *property-vector*) (iPrimCall 36) (iMark) (iAccess 0) (iAccess 2) (iConst adjoin) (iGetF) (iApply) (iConst shen.external-symbols) (iAccess 1) (iConst put) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 3) (iReturn)) (iTailApply)) (iTailApply)) (iTailApply)) (iConst systemf) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iMark) (iAccess 0) (iAccess 1) (iConst element?) (iGetF) (iApply) (iJF (iAccess 0) (iReturn)) (iJMP (iAccess 1) (iAccess 0) (iPrimCall 34) (iReturn))) (iConst adjoin) (iDefun) (iReturn) (iHalt))

((iConst *property-vector*) (iPrimCall 36) (iConst !) (iConst }) (iConst {) (iConst -->) (iConst <--) (iConst &&) (iConst :) (iConst ;) (iConst :-) (iConst :=) (iConst _) (iConst *language*) (iConst *implementation*) (iConst *stinput*) (iConst *stoutput*) (iConst *sterror*) (iConst *home-directory*) (iConst *version*) (iConst *argv*) (iConst *maximum-print-sequence-size*) (iConst *macros*) (iConst *os*) (iConst *release*) (iConst *property-vector*) (iConst *port*) (iConst *porters*) (iConst *hush*) (iConst @v) (iConst @p) (iConst @s) (iConst <-) (iConst ->) (iConst <e>) (iConst <!>) (iConst ==) (iConst =) (iConst >=) (iConst >) (iConst /.) (iConst =!) (iConst $) (iConst -) (iConst /) (iConst *) (iConst +) (iConst <=) (iConst <) (iConst >>) (iMark) (iConst 0) (iConst vector) (iGetF) (iApply) (iConst y-or-n?) (iConst write-to-file) (iConst write-byte) (iConst where) (iConst when) (iConst warn) (iConst version) (iConst verified) (iConst variable?) (iConst value) (iConst value/or) (iConst vector->) (iConst <-vector) (iConst <-vector/or) (iConst vector) (iConst vector?) (iConst unspecialise) (iConst untrack) (iConst unit) (iConst shen.unix) (iConst union) (iConst unify) (iConst unify!) (iConst unput) (iConst unprofile) (iConst undefmacro) (iConst return) (iConst type) (iConst tuple?) (iConst true) (iConst trap-error) (iConst track) (iConst time) (iConst thaw) (iConst tc?) (iConst tc) (iConst tl) (iConst tlstr) (iConst tlv) (iConst tail) (iConst systemf) (iConst synonyms) (iConst symbol) (iConst symbol?) (iConst string->symbol) (iConst sum) (iConst subst) (iConst string?) (iConst string->n) (iConst stream) (iConst string) (iConst stinput) (iConst sterror) (iConst stoutput) (iConst step) (iConst spy) (iConst specialise) (iConst snd) (iConst simple-error) (iConst set) (iConst save) (iConst str) (iConst run) (iConst reverse) (iConst remove) (iConst release) (iConst read) (iConst receive) (iConst read-file) (iConst read-file-as-bytelist) (iConst read-file-as-string) (iConst read-byte) (iConst read-file-as-charlist) (iConst read-char-code) (iConst read-from-string) (iConst package?) (iConst put) (iConst preclude) (iConst preclude-all-but) (iConst ps) (iConst prolog?) (iConst protect) (iConst profile-results) (iConst profile) (iConst print) (iConst pr) (iConst pos) (iConst porters) (iConst port) (iConst package) (iConst output) (iConst out) (iConst os) (iConst or) (iConst optimise) (iConst open) (iConst occurrences) (iConst occurs-check) (iConst n->string) (iConst number?) (iConst number) (iConst null) (iConst nth) (iConst not) (iConst nl) (iConst mode) (iConst macroexpand) (iConst maxinferences) (iConst mapcan) (iConst map) (iConst make-string) (iConst load) (iConst loaded) (iConst list) (iConst lineread) (iConst limit) (iConst length) (iConst let) (iConst lazy) (iConst lambda) (iConst language) (iConst kill) (iConst is) (iConst intersection) (iConst inferences) (iConst intern) (iConst integer?) (iConst input) (iConst input+) (iConst include) (iConst include-all-but) (iConst it) (iConst in) (iConst internal) (iConst implementation) (iConst if) (iConst identical) (iConst head) (iConst hd) (iConst hdv) (iConst hdstr) (iConst hash) (iConst get) (iConst get/or) (iConst get-time) (iConst gensym) (iConst function) (iConst fst) (iConst freeze) (iConst fix) (iConst file) (iConst fail) (iConst fail-if) (iConst fwhen) (iConst findall) (iConst for-each) (iConst fold-right) (iConst fold-left) (iConst filter) (iConst false) (iConst enable-type-theory) (iConst explode) (iConst external) (iConst exception) (iConst eval-kl) (iConst eval) (iConst error-to-string) (iConst error) (iConst empty?) (iConst exit) (iConst element?) (iConst do) (iConst difference) (iConst destroy) (iConst defun) (iConst define) (iConst defmacro) (iConst defcc) (iConst defprolog) (iConst declare) (iConst datatype) (iConst cut) (iConst cn) (iConst cons?) (iConst cons) (iConst cond) (iConst concat) (iConst compile) (iConst cd) (iConst cases) (iConst call) (iConst close) (iConst bind) (iConst bound?) (iConst boolean?) (iConst boolean) (iConst bar!) (iConst assoc) (iConst arity) (iConst abort) (iConst append) (iConst and) (iConst adjoin) (iConst <-address) (iConst <-address/or) (iConst address->) (iConst absvector?) (iConst absvector) (iConst dict) (iConst dict?) (iConst dict-count) (iConst dict->) (iConst <-dict/or) (iConst <-dict) (iConst dict-rm) (iConst dict-fold) (iConst dict-keys) (iConst dict-values) (iConst command-line) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iConst shen.external-symbols) (iConst "shen") (iPrimCall 31) (iConst put) (iGetF) (iTailApply) (iHalt))

((iFreeze (iGrab) (iConst package) (iAccess 0) (iPrimCall 19) (iJF (iConst ()) (iReturn)) (iJMP (iConst receive) (iAccess 0) (iPrimCall 19) (iJF (iConst ()) (iReturn)) (iJMP (iConst true) (iJF (iMark) (iAccess 0) (iConst arity) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 0) (iConst -1) (iPrimCall 19) (iJF (iConst ()) (iReturn)) (iJMP (iAccess 0) (iConst 0) (iPrimCall 19) (iJF (iConst ()) (iReturn)) (iJMP (iAccess 1) (iMark) (iAccess 0) (iAccess 1) (iConst shen.lambda-form) (iGetF) (iApply) (iPrimCall 3) (iPrimCall 34) (iConst ()) (iPrimCall 34) (iReturn)))) (iTailApply)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn))))) (iConst shen.lambda-form-entry) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iConst 0) (iAccess 0) (iPrimCall 19) (iJF (iAccess 1) (iReturn)) (iJMP (iConst true) (iJF (iMark) (iConst V) (iConst gensym) (iGetF) (iApply) (iFreeze (iGrab) (iConst lambda) (iAccess 0) (iMark) (iAccess 1) (iConst 1) (iPrimCall 20) (iMark) (iAccess 0) (iAccess 2) (iConst shen.add-end) (iGetF) (iApply) (iConst shen.lambda-form) (iGetF) (iApply) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iReturn)) (iTailApply)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn)))) (iConst shen.lambda-form) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iGrab) (iAccess 1) (iPrimCall 35) (iJF (iAccess 0) (iConst ()) (iPrimCall 34) (iAccess 1) (iConst append) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iAccess 1) (iAccess 0) (iConst ()) (iPrimCall 34) (iPrimCall 34) (iReturn)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn)))) (iConst shen.add-end) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iAccess 0) (iPrimCall 35) (iJF (iConst *property-vector*) (iPrimCall 36) (iAccess 0) (iPrimCall 33) (iConst shen.lambda-form) (iAccess 0) (iPrimCall 32) (iConst put) (iGetF) (iTailApply)) (iJMP (iConst true) (iJF (iConst shen.set-lambda-form-entry) (iConst shen.f_error) (iGetF) (iTailApply)) (iJMP (iConst "no match cond") (iPrimCall 18) (iReturn)))) (iConst shen.set-lambda-form-entry) (iDefun) (iReturn) (iHalt))

((iConst shen.datatype-error) (iFreeze (iGrab) (iAccess 0) (iConst shen.datatype-error) (iGetF) (iTailApply)) (iPrimCall 34) (iConst shen.tuple) (iFreeze (iGrab) (iAccess 0) (iConst shen.tuple) (iGetF) (iTailApply)) (iPrimCall 34) (iConst shen.pvar) (iFreeze (iGrab) (iAccess 0) (iConst shen.pvar) (iGetF) (iTailApply)) (iPrimCall 34) (iConst shen.dictionary) (iFreeze (iGrab) (iAccess 0) (iConst shen.dictionary) (iGetF) (iTailApply)) (iPrimCall 34) (iMark) (iMark) (iConst "shen") (iPrimCall 31) (iConst external) (iGetF) (iApply) (iFreeze (iGrab) (iAccess 0) (iConst shen.lambda-form-entry) (iGetF) (iTailApply)) (iConst mapcan) (iGetF) (iApply) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iPrimCall 34) (iFreeze (iGrab) (iAccess 0) (iConst shen.set-lambda-form-entry) (iGetF) (iTailApply)) (iConst for-each) (iGetF) (iTailApply) (iHalt))

((iFreeze (iGrab) (iConst shen.*special*) (iAccess 0) (iConst shen.*special*) (iPrimCall 36) (iPrimCall 34) (iPrimCall 37) (iPop) (iAccess 0) (iReturn)) (iConst specialise) (iDefun) (iReturn) (iHalt))

((iFreeze (iGrab) (iConst shen.*special*) (iMark) (iConst shen.*special*) (iPrimCall 36) (iAccess 0) (iConst remove) (iGetF) (iApply) (iPrimCall 37) (iPop) (iAccess 0) (iReturn)) (iConst unspecialise) (iDefun) (iReturn) (iHalt))



