(package "cora/test/run-all-test"

  (import "cora/lib/sys")
  (import "cora/lib/toc")
  (import "cora/lib/os")
  (import "cora/lib/io")
  (import "cora/lib/string")

  (let output (popen ["ls" "test/t/*.cora"] 'r)
    data (read-all output)
    (begin
      (def *cases* (filter (lambda (s) (> ( string-length s) 0))
			    (string-split data "\n")))
      (pclose output)))

  (defun get-c-file (cora-file-path)
    (string-replace cora-file-path ".cora" ".c"))

  (defun get-exec-file (cora-file-path)
    (string-replace cora-file-path ".cora" ".bin"))

  (defun get-result-file (cora-file-path)
    (let tmp1 (string-replace cora-file-path "test/t/" "test/r/")
      (string-replace tmp1 ".cora" ".result")))

  (defun compile-cora (file-path)
    (let c-file-path (get-c-file file-path)
      outfile-path (get-exec-file file-path)
      (begin
	(cora/lib/toc#compile-to-c file-path c-file-path)
	(exec ["gcc" "-g" "-DForTest -Isrc src/runtime.c src/gc.c ./src/str.c ./src/types.c ./src/reader.c" "./src/trace.c" c-file-path
		  "-o" outfile-path "-ldl"]))))

  (defun run (file-path)
    (let exec-path (get-exec-file file-path)
      result-path (get-result-file file-path)
      (let from (popen [exec-path] 'r)
	to (open-output-file result-path)
	(begin
	  (copy from to)
	  (pclose from)
	  (close-output-file to)))))

  (for-each (lambda (c)
	      (begin
		(display "compile cora file -- ")
		(display c)
		(display "\n")
		(compile-cora c)))
	    *cases*)

  (display "BUILD FINISH\n")

  (for-each run *cases*)

  )
