(@import "cora/lib/sys")
(@import "cora/lib/toc/include" toc)
(@import "cora/lib/os" os)
(@import "cora/lib/io" io)
(@import "cora/lib/string" string)

(let output (os.popen ["ls" "test/t/*.cora"] 'r)
     data (io.read-all output)
     (begin
      (set '*cases* (filter (lambda (s) (> (string.length s) 0))
			    (string.split data "\n")))
      (os.pclose output)))

(defun get-c-file (cora-file-path)
  (string.replace cora-file-path ".cora" ".c"))

(defun get-exec-file (cora-file-path)
  (string.replace cora-file-path ".cora" ".bin"))

(defun get-result-file (cora-file-path)
  (let tmp1 (string.replace cora-file-path "test/t/" "test/r/")
       (string.replace tmp1 ".cora" ".result")))

(defun compile-cora (file-path)
  (let c-file-path (get-c-file file-path)
       outfile-path (get-exec-file file-path)
       (begin
	(toc.compile-to-c file-path c-file-path "")
	(os.exec ["gcc" "-DForTest -Isrc src/runtime.c ./src/str.c ./src/types.c ./src/reader.c" c-file-path
		 "-o" outfile-path "-ldl"]))))

(defun run (file-path)
  (let exec-path (get-exec-file file-path)
       result-path (get-result-file file-path)
       (let from (os.popen [exec-path] 'r)
	    to (io.open-output-file result-path)
	    (begin
	     (io.copy from to)
	     (os.pclose from)
	     (io.close-output-file to)))))

(for-each (lambda (c)
	    (begin
	     (io.display "compile cora file -- ")
	     (io.display c)
	     (io.display "\n")
	     (compile-cora c)))
	  *cases*)

(io.display "BUILD FINISH\n")

(for-each run *cases*)
