var kl = require('./kl'); let defun = kl.defun; let klTailApply = kl.klTailApply; let Symbol = kl.Symbol; let err = kl.err; let primitive = kl.primitive; let mustBoolean = kl.mustBoolean; let Trampoline = kl.Trampoline; let klFun = kl.klFun;
defun("shen.shen", function() { return (function(){klTailApply(primitive["shen.credits"]); return new Trampoline(primitive["shen.loop"]);})() ;}, 0);;

defun("exit", function(V1384) { return new Trampoline(primitive["set"], new Symbol("shen.*continue-repl-loop*"), false) ;}, 1);;

defun("shen.loop", function() { return (function(){klTailApply(primitive["shen.initialise_environment"]); return (function(){klTailApply(primitive["shen.prompt"]); return (function(){(function(){ try { return klTailApply(primitive["shen.read-evaluate-print"]);} catch (err) { return klTailApply(klFun(function(E) { return new Trampoline(primitive["pr"], klTailApply(primitive["error-to-string"], E), klTailApply(primitive["stoutput"]));}, 1), err);} })(); return (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*continue-repl-loop*"))) === true) ? (new Trampoline(primitive["shen.loop"])) : (new Symbol("exit"));})();})();})() ;}, 0);;

defun("shen.credits", function() { return (function(){klTailApply(primitive["shen.prhush"], "Cora, my own lisp!\n", klTailApply(primitive["stoutput"])); return (function(){klTailApply(primitive["shen.prhush"], "Inspired by the awesome Shen language.\n", klTailApply(primitive["stoutput"])); return new Trampoline(primitive["shen.prhush"], "Copyright (C) 2018 Arthur Mao <tiancaiamao@gmail.com>\n", klTailApply(primitive["stoutput"]));})();})() ;}, 0);;

defun("shen.initialise_environment", function() { return new Trampoline(primitive["shen.multiple-set"], klTailApply(primitive["cons"], new Symbol("shen.*call*"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("shen.*infs*"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("shen.*process-counter*"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("shen.*catch*"), klTailApply(primitive["cons"], 0, null))))))))) ;}, 0);;

defun("shen.multiple-set", function(V1386) { return (mustBoolean(klTailApply(primitive["="], null, V1386)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1386)) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1386))))) === true) ? ((function(){klTailApply(primitive["set"], klTailApply(primitive["hd"], V1386), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1386))); return new Trampoline(primitive["shen.multiple-set"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1386)));})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.multiple-set"))) : (err("no cond match")))) ;}, 1);;

defun("destroy", function(V1388) { return new Trampoline(primitive["declare"], V1388, new Symbol("symbol")) ;}, 1);;

defun("shen.read-evaluate-print", function() { return (function(){let Lineread = klTailApply(primitive["shen.toplineread"]); return (function(){let History = klTailApply(primitive["value"], new Symbol("shen.*history*")); return (function(){let NewLineread = klTailApply(primitive["shen.retrieve-from-history-if-needed"], Lineread, History); return (function(){let NewHistory = klTailApply(primitive["shen.update_history"], NewLineread, History); return (function(){let Parsed = klTailApply(primitive["fst"], NewLineread); return new Trampoline(primitive["shen.toplevel"], Parsed);})();})();})();})();})() ;}, 0);;

defun("shen.retrieve-from-history-if-needed", function(V1400, V1401) { return (mustBoolean((mustBoolean(klTailApply(primitive["tuple?"], V1400)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["snd"], V1400))) && mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], klTailApply(primitive["snd"], V1400)), klTailApply(primitive["cons"], klTailApply(primitive["shen.space"]), klTailApply(primitive["cons"], klTailApply(primitive["shen.newline"]), null)))))))) === true) ? (new Trampoline(primitive["shen.retrieve-from-history-if-needed"], klTailApply(primitive["@p"], klTailApply(primitive["fst"], V1400), klTailApply(primitive["tl"], klTailApply(primitive["snd"], V1400))), V1401)) : ((mustBoolean((mustBoolean(klTailApply(primitive["tuple?"], V1400)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["snd"], V1400))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["snd"], V1400)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["snd"], V1400))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1401)) && mustBoolean((mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["snd"], V1400)), klTailApply(primitive["shen.exclamation"]))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["snd"], V1400))), klTailApply(primitive["shen.exclamation"]))))))))))))))) === true) ? ((function(){let PastPrint = klTailApply(primitive["shen.prbytes"], klTailApply(primitive["snd"], klTailApply(primitive["hd"], V1401))); return new Trampoline(primitive["hd"], V1401);})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["tuple?"], V1400)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["snd"], V1400))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["snd"], V1400)), klTailApply(primitive["shen.exclamation"]))))))) === true) ? ((function(){let Key$qu = klTailApply(primitive["shen.make-key"], klTailApply(primitive["tl"], klTailApply(primitive["snd"], V1400)), V1401); return (function(){let Find = klTailApply(primitive["head"], klTailApply(primitive["shen.find-past-inputs"], Key$qu, V1401)); return (function(){let PastPrint = klTailApply(primitive["shen.prbytes"], klTailApply(primitive["snd"], Find)); return Find;})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["tuple?"], V1400)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["snd"], V1400))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["snd"], V1400)))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["snd"], V1400)), klTailApply(primitive["shen.percent"]))))))))) === true) ? ((function(){klTailApply(primitive["shen.print-past-inputs"], klFun(function(X) { return true;}, 1), klTailApply(primitive["reverse"], V1401), 0); return new Trampoline(primitive["abort"]);})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["tuple?"], V1400)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["snd"], V1400))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["snd"], V1400)), klTailApply(primitive["shen.percent"]))))))) === true) ? ((function(){let Key$qu = klTailApply(primitive["shen.make-key"], klTailApply(primitive["tl"], klTailApply(primitive["snd"], V1400)), V1401); return (function(){let Pastprint = klTailApply(primitive["shen.print-past-inputs"], Key$qu, klTailApply(primitive["reverse"], V1401), 0); return new Trampoline(primitive["abort"]);})();})()) : ((mustBoolean(true) === true) ? (V1400) : (err("no cond match"))))))) ;}, 2);;

defun("shen.percent", function() { return 37 ;}, 0);;

defun("shen.exclamation", function() { return 33 ;}, 0);;

defun("shen.prbytes", function(V1403) { return (function(){klTailApply(primitive["for-each"], klFun(function(Byte) { return new Trampoline(primitive["pr"], klTailApply(primitive["n->string"], Byte), klTailApply(primitive["stoutput"]));}, 1), V1403); return new Trampoline(primitive["nl"], 1);})() ;}, 1);;

defun("shen.update_history", function(V1406, V1407) { return new Trampoline(primitive["set"], new Symbol("shen.*history*"), klTailApply(primitive["cons"], V1406, V1407)) ;}, 2);;

defun("shen.toplineread", function() { return new Trampoline(primitive["shen.toplineread_loop"], klTailApply(primitive["read-char-code"], klTailApply(primitive["stinput"])), null) ;}, 0);;

defun("shen.toplineread_loop", function(V1411, V1412) { return (mustBoolean((mustBoolean(klTailApply(primitive["="], -1, V1411)) && mustBoolean(klTailApply(primitive["="], null, V1412)))) === true) ? (new Trampoline(primitive["exit"], 0)) : ((mustBoolean(klTailApply(primitive["="], V1411, klTailApply(primitive["shen.hat"]))) === true) ? (new Trampoline(primitive["simple-error"], "line read aborted")) : ((mustBoolean(klTailApply(primitive["element?"], V1411, klTailApply(primitive["cons"], klTailApply(primitive["shen.newline"]), klTailApply(primitive["cons"], klTailApply(primitive["shen.carriage-return"]), null)))) === true) ? ((function(){let Line = klTailApply(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), V1412, klFun(function(E) { return new Symbol("shen.nextline");}, 1)); return (function(){let It = klTailApply(primitive["shen.record-it"], V1412); return (mustBoolean((mustBoolean(klTailApply(primitive["="], Line, new Symbol("shen.nextline"))) || mustBoolean(klTailApply(primitive["empty?"], Line)))) === true) ? (new Trampoline(primitive["shen.toplineread_loop"], klTailApply(primitive["read-char-code"], klTailApply(primitive["stinput"])), klTailApply(primitive["append"], V1412, klTailApply(primitive["cons"], V1411, null)))) : (new Trampoline(primitive["@p"], Line, V1412));})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.toplineread_loop"], klTailApply(primitive["read-char-code"], klTailApply(primitive["stinput"])), (mustBoolean(klTailApply(primitive["="], V1411, -1)) === true) ? (V1412) : (klTailApply(primitive["append"], V1412, klTailApply(primitive["cons"], V1411, null))))) : (err("no cond match"))))) ;}, 2);;

defun("shen.hat", function() { return 94 ;}, 0);;

defun("shen.newline", function() { return 10 ;}, 0);;

defun("shen.carriage-return", function() { return 13 ;}, 0);;

defun("tc", function(V1418) { return (mustBoolean(klTailApply(primitive["="], new Symbol("+"), V1418)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*tc*"), true)) : ((mustBoolean(klTailApply(primitive["="], new Symbol("-"), V1418)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*tc*"), false)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "tc expects a + or -")) : (err("no cond match")))) ;}, 1);;

defun("shen.prompt", function() { return (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*tc*"))) === true) ? (new Trampoline(primitive["shen.prhush"], klTailApply(primitive["cn"], "\n\n(", klTailApply(primitive["shen.app"], klTailApply(primitive["length"], klTailApply(primitive["value"], new Symbol("shen.*history*"))), "+) ", new Symbol("shen.a"))), klTailApply(primitive["stoutput"]))) : (new Trampoline(primitive["shen.prhush"], klTailApply(primitive["cn"], "\n\n(", klTailApply(primitive["shen.app"], klTailApply(primitive["length"], klTailApply(primitive["value"], new Symbol("shen.*history*"))), "-) ", new Symbol("shen.a"))), klTailApply(primitive["stoutput"]))) ;}, 0);;

defun("shen.toplevel", function(V1420) { return new Trampoline(primitive["shen.toplevel_evaluate"], V1420, klTailApply(primitive["value"], new Symbol("shen.*tc*"))) ;}, 1);;

defun("shen.find-past-inputs", function(V1423, V1424) { return (function(){let F = klTailApply(primitive["shen.find"], V1423, V1424); return (mustBoolean(klTailApply(primitive["empty?"], F)) === true) ? (new Trampoline(primitive["simple-error"], "input not found\n")) : (F);})() ;}, 2);;

defun("shen.make-key", function(V1427, V1428) { return (function(){let Atom = klTailApply(primitive["hd"], klTailApply(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), V1427, klFun(function(E) { return (mustBoolean(klTailApply(primitive["cons?"], E)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "parse error here: ", klTailApply(primitive["shen.app"], E, "\n", new Symbol("shen.s"))))) : (new Trampoline(primitive["simple-error"], "parse error\n"));}, 1))); return (mustBoolean(klTailApply(primitive["integer?"], Atom)) === true) ? (klFun(function(X) { return new Trampoline(primitive["="], X, klTailApply(primitive["nth"], klTailApply(primitive["+"], Atom, 1), klTailApply(primitive["reverse"], V1428)));}, 1)) : (klFun(function(X) { return new Trampoline(primitive["shen.prefix?"], V1427, klTailApply(primitive["shen.trim-gubbins"], klTailApply(primitive["snd"], X)));}, 1));})() ;}, 2);;

defun("shen.trim-gubbins", function(V1430) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1430)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V1430), klTailApply(primitive["shen.space"]))))) === true) ? (new Trampoline(primitive["shen.trim-gubbins"], klTailApply(primitive["tl"], V1430))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1430)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V1430), klTailApply(primitive["shen.newline"]))))) === true) ? (new Trampoline(primitive["shen.trim-gubbins"], klTailApply(primitive["tl"], V1430))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1430)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V1430), klTailApply(primitive["shen.carriage-return"]))))) === true) ? (new Trampoline(primitive["shen.trim-gubbins"], klTailApply(primitive["tl"], V1430))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1430)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V1430), klTailApply(primitive["shen.tab"]))))) === true) ? (new Trampoline(primitive["shen.trim-gubbins"], klTailApply(primitive["tl"], V1430))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1430)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V1430), klTailApply(primitive["shen.left-round"]))))) === true) ? (new Trampoline(primitive["shen.trim-gubbins"], klTailApply(primitive["tl"], V1430))) : ((mustBoolean(true) === true) ? (V1430) : (err("no cond match"))))))) ;}, 1);;

defun("shen.space", function() { return 32 ;}, 0);;

defun("shen.tab", function() { return 9 ;}, 0);;

defun("shen.left-round", function() { return 40 ;}, 0);;

defun("shen.find", function(V1439, V1440) { return (mustBoolean(klTailApply(primitive["="], null, V1440)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1440)) && mustBoolean(klTailApply(V1439, klTailApply(primitive["hd"], V1440))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1440), klTailApply(primitive["shen.find"], V1439, klTailApply(primitive["tl"], V1440)))) : ((mustBoolean(klTailApply(primitive["cons?"], V1440)) === true) ? (new Trampoline(primitive["shen.find"], V1439, klTailApply(primitive["tl"], V1440))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.find"))) : (err("no cond match"))))) ;}, 2);;

defun("shen.prefix?", function(V1454, V1455) { return (mustBoolean(klTailApply(primitive["="], null, V1454)) === true) ? (true) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1454)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1455)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V1455), klTailApply(primitive["hd"], V1454))))))) === true) ? (new Trampoline(primitive["shen.prefix?"], klTailApply(primitive["tl"], V1454), klTailApply(primitive["tl"], V1455))) : ((mustBoolean(true) === true) ? (false) : (err("no cond match")))) ;}, 2);;

defun("shen.print-past-inputs", function(V1467, V1468, V1469) { return (mustBoolean(klTailApply(primitive["="], null, V1468)) === true) ? (new Symbol("_")) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1468)) && mustBoolean(klTailApply(primitive["not"], klTailApply(V1467, klTailApply(primitive["hd"], V1468)))))) === true) ? (new Trampoline(primitive["shen.print-past-inputs"], V1467, klTailApply(primitive["tl"], V1468), klTailApply(primitive["+"], V1469, 1))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1468)) && mustBoolean(klTailApply(primitive["tuple?"], klTailApply(primitive["hd"], V1468))))) === true) ? ((function(){klTailApply(primitive["shen.prhush"], klTailApply(primitive["shen.app"], V1469, ". ", new Symbol("shen.a")), klTailApply(primitive["stoutput"])); return (function(){klTailApply(primitive["shen.prbytes"], klTailApply(primitive["snd"], klTailApply(primitive["hd"], V1468))); return new Trampoline(primitive["shen.print-past-inputs"], V1467, klTailApply(primitive["tl"], V1468), klTailApply(primitive["+"], V1469, 1));})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.print-past-inputs"))) : (err("no cond match"))))) ;}, 3);;

defun("shen.toplevel_evaluate", function(V1472, V1473) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1472)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1472))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1472)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1472)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1472))))) && mustBoolean(klTailApply(primitive["="], true, V1473)))))))))))) === true) ? (new Trampoline(primitive["shen.typecheck-and-evaluate"], klTailApply(primitive["hd"], V1472), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1472))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1472)) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1472))))) === true) ? ((function(){klTailApply(primitive["shen.toplevel_evaluate"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1472), null), V1473); return (function(){klTailApply(primitive["nl"], 1); return new Trampoline(primitive["shen.toplevel_evaluate"], klTailApply(primitive["tl"], V1472), V1473);})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1472)) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1472))) && mustBoolean(klTailApply(primitive["="], true, V1473)))))) === true) ? (new Trampoline(primitive["shen.typecheck-and-evaluate"], klTailApply(primitive["hd"], V1472), klTailApply(primitive["gensym"], new Symbol("A")))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1472)) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1472))) && mustBoolean(klTailApply(primitive["="], false, V1473)))))) === true) ? ((function(){let Eval = klTailApply(primitive["shen.eval-without-macros"], klTailApply(primitive["hd"], V1472)); return new Trampoline(primitive["print"], Eval);})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.toplevel_evaluate"))) : (err("no cond match")))))) ;}, 2);;

defun("shen.typecheck-and-evaluate", function(V1476, V1477) { return (function(){let Typecheck = klTailApply(primitive["shen.typecheck"], V1476, V1477); return (mustBoolean(klTailApply(primitive["="], Typecheck, false)) === true) ? (new Trampoline(primitive["simple-error"], "type error\n")) : ((function(){let Eval = klTailApply(primitive["shen.eval-without-macros"], V1476); return (function(){let Type = klTailApply(primitive["shen.pretty-type"], Typecheck); return new Trampoline(primitive["shen.prhush"], klTailApply(primitive["shen.app"], Eval, klTailApply(primitive["cn"], " : ", klTailApply(primitive["shen.app"], Type, "", new Symbol("shen.r"))), new Symbol("shen.s")), klTailApply(primitive["stoutput"]));})();})());})() ;}, 2);;

defun("shen.pretty-type", function(V1479) { return new Trampoline(primitive["shen.mult_subst"], klTailApply(primitive["value"], new Symbol("shen.*alphabet*")), klTailApply(primitive["shen.extract-pvars"], V1479), V1479) ;}, 1);;

defun("shen.extract-pvars", function(V1485) { return (mustBoolean(klTailApply(primitive["shen.pvar?"], V1485)) === true) ? (new Trampoline(primitive["cons"], V1485, null)) : ((mustBoolean(klTailApply(primitive["cons?"], V1485)) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["shen.extract-pvars"], klTailApply(primitive["hd"], V1485)), klTailApply(primitive["shen.extract-pvars"], klTailApply(primitive["tl"], V1485)))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match")))) ;}, 1);;

defun("shen.mult_subst", function(V1493, V1494, V1495) { return (mustBoolean(klTailApply(primitive["="], null, V1493)) === true) ? (V1495) : ((mustBoolean(klTailApply(primitive["="], null, V1494)) === true) ? (V1495) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1493)) && mustBoolean(klTailApply(primitive["cons?"], V1494)))) === true) ? (new Trampoline(primitive["shen.mult_subst"], klTailApply(primitive["tl"], V1493), klTailApply(primitive["tl"], V1494), klTailApply(primitive["subst"], klTailApply(primitive["hd"], V1493), klTailApply(primitive["hd"], V1494), V1495))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.mult_subst"))) : (err("no cond match"))))) ;}, 3);;

defun("shen.shen->kl", function(V1498, V1499) { return new Trampoline(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<define>"], X);}, 1), klTailApply(primitive["cons"], V1498, V1499), klFun(function(X) { return new Trampoline(primitive["shen.shen-syntax-error"], V1498, X);}, 1)) ;}, 2);;

defun("shen.shen-syntax-error", function(V1506, V1507) { return (mustBoolean(klTailApply(primitive["cons?"], V1507)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "syntax error in ", klTailApply(primitive["shen.app"], V1506, klTailApply(primitive["cn"], " here:\n\n ", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.next-50"], 50, klTailApply(primitive["hd"], V1507)), "\n", new Symbol("shen.a"))), new Symbol("shen.a"))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "syntax error in ", klTailApply(primitive["shen.app"], V1506, "\n", new Symbol("shen.a"))))) : (err("no cond match"))) ;}, 2);;

defun("shen.<define>", function(V1509) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltname$gt = klTailApply(primitive["shen.<name>"], V1509); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltname$gt))) === true) ? ((function(){let Parse$unshen$do$ltsignature$gt = klTailApply(primitive["shen.<signature>"], Parse$unshen$do$ltname$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsignature$gt))) === true) ? ((function(){let Parse$unshen$do$ltrules$gt = klTailApply(primitive["shen.<rules>"], Parse$unshen$do$ltsignature$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrules$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltrules$gt), klTailApply(primitive["shen.compile_to_machine_code"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltname$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltrules$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$unshen$do$ltname$gt = klTailApply(primitive["shen.<name>"], V1509); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltname$gt))) === true) ? ((function(){let Parse$unshen$do$ltrules$gt = klTailApply(primitive["shen.<rules>"], Parse$unshen$do$ltname$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrules$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltrules$gt), klTailApply(primitive["shen.compile_to_machine_code"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltname$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltrules$gt)))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<name>", function(V1511) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1511))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1511)); return new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1511)), klTailApply(primitive["shen.hdtl"], V1511))), (mustBoolean((mustBoolean(klTailApply(primitive["symbol?"], Parse$unX)) && mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["shen.sysfunc?"], Parse$unX))))) === true) ? (Parse$unX) : (klTailApply(primitive["simple-error"], klTailApply(primitive["shen.app"], Parse$unX, " is not a legitimate function name.\n", new Symbol("shen.a")))));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.sysfunc?", function(V1513) { return new Trampoline(primitive["element?"], V1513, klTailApply(primitive["get"], klTailApply(primitive["intern"], "shen"), new Symbol("shen.external-symbols"), klTailApply(primitive["value"], new Symbol("*property-vector*")))) ;}, 1);;

defun("shen.<signature>", function(V1515) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1515))) && mustBoolean(klTailApply(primitive["="], new Symbol("{"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1515)))))) === true) ? ((function(){let Parse$unshen$do$ltsignature_help$gt = klTailApply(primitive["shen.<signature-help>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1515)), klTailApply(primitive["shen.hdtl"], V1515))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsignature_help$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltsignature_help$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("}"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltsignature_help$gt)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltsignature_help$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsignature_help$gt))), klTailApply(primitive["shen.demodulate"], klTailApply(primitive["shen.curry-type"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsignature_help$gt))))) : (new Trampoline(primitive["fail"]))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.curry-type", function(V1517) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1517)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1517))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("-->"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1517)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1517)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1517))))) && mustBoolean(klTailApply(primitive["="], new Symbol("-->"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1517)))))))))))))))) === true) ? (new Trampoline(primitive["shen.curry-type"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1517), klTailApply(primitive["cons"], new Symbol("-->"), klTailApply(primitive["cons"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1517)), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1517)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1517))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("*"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1517)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1517)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1517))))) && mustBoolean(klTailApply(primitive["="], new Symbol("*"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1517)))))))))))))))) === true) ? (new Trampoline(primitive["shen.curry-type"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1517), klTailApply(primitive["cons"], new Symbol("*"), klTailApply(primitive["cons"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1517)), null))))) : ((mustBoolean(klTailApply(primitive["cons?"], V1517)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.curry-type"], Z);}, 1), V1517)) : ((mustBoolean(true) === true) ? (V1517) : (err("no cond match"))))) ;}, 1);;

defun("shen.<signature-help>", function(V1519) { return (function(){let YaccParse = (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1519))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1519)); return (function(){let Parse$unshen$do$ltsignature_help$gt = klTailApply(primitive["shen.<signature-help>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1519)), klTailApply(primitive["shen.hdtl"], V1519))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsignature_help$gt))) === true) ? ((mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["element?"], Parse$unX, klTailApply(primitive["cons"], new Symbol("{"), klTailApply(primitive["cons"], new Symbol("}"), null))))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltsignature_help$gt), klTailApply(primitive["cons"], Parse$unX, klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsignature_help$gt)))) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})();})()) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$un$lte$gt = klTailApply(primitive["<e>"], V1519); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), null)) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<rules>", function(V1521) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltrule$gt = klTailApply(primitive["shen.<rule>"], V1521); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrule$gt))) === true) ? ((function(){let Parse$unshen$do$ltrules$gt = klTailApply(primitive["shen.<rules>"], Parse$unshen$do$ltrule$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrules$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltrules$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.linearise"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltrule$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltrules$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$unshen$do$ltrule$gt = klTailApply(primitive["shen.<rule>"], V1521); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrule$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltrule$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.linearise"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltrule$gt)), null))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<rule>", function(V1523) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltpatterns$gt = klTailApply(primitive["shen.<patterns>"], V1523); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpatterns$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("->"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)))))) === true) ? ((function(){let Parse$unshen$do$ltaction$gt = klTailApply(primitive["shen.<action>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltaction$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("where"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt)))))) === true) ? ((function(){let Parse$unshen$do$ltguard$gt = klTailApply(primitive["shen.<guard>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltguard$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltguard$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltguard$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt), null))), null)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltpatterns$gt = klTailApply(primitive["shen.<patterns>"], V1523); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpatterns$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("->"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)))))) === true) ? ((function(){let Parse$unshen$do$ltaction$gt = klTailApply(primitive["shen.<action>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltaction$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt), null)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltpatterns$gt = klTailApply(primitive["shen.<patterns>"], V1523); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpatterns$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("<-"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)))))) === true) ? ((function(){let Parse$unshen$do$ltaction$gt = klTailApply(primitive["shen.<action>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltaction$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("where"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt)))))) === true) ? ((function(){let Parse$unshen$do$ltguard$gt = klTailApply(primitive["shen.<guard>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltguard$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltguard$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltguard$gt), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.choicepoint!"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt), null)), null))), null)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$unshen$do$ltpatterns$gt = klTailApply(primitive["shen.<patterns>"], V1523); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpatterns$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("<-"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)))))) === true) ? ((function(){let Parse$unshen$do$ltaction$gt = klTailApply(primitive["shen.<action>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltaction$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.choicepoint!"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt), null)), null)))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})() ;}, 1);;

defun("shen.fail_if", function(V1526, V1527) { return (mustBoolean(klTailApply(V1526, V1527)) === true) ? (new Trampoline(primitive["fail"])) : (V1527) ;}, 2);;

defun("shen.succeeds?", function(V1533) { return (mustBoolean(klTailApply(primitive["="], V1533, klTailApply(primitive["fail"]))) === true) ? (false) : ((mustBoolean(true) === true) ? (true) : (err("no cond match"))) ;}, 1);;

defun("shen.<patterns>", function(V1535) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltpattern$gt = klTailApply(primitive["shen.<pattern>"], V1535); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern$gt))) === true) ? ((function(){let Parse$unshen$do$ltpatterns$gt = klTailApply(primitive["shen.<patterns>"], Parse$unshen$do$ltpattern$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpatterns$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$un$lte$gt = klTailApply(primitive["<e>"], V1535); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), null)) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<pattern>", function(V1542) { return (function(){let YaccParse = (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1542))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))))) && mustBoolean(klTailApply(primitive["="], new Symbol("@p"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))))))) === true) ? ((function(){let Parse$unshen$do$ltpattern1$gt = klTailApply(primitive["shen.<pattern1>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern1$gt))) === true) ? ((function(){let Parse$unshen$do$ltpattern2$gt = klTailApply(primitive["shen.<pattern2>"], Parse$unshen$do$ltpattern1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))), klTailApply(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern1$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern2$gt), null))))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1542))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))))) && mustBoolean(klTailApply(primitive["="], new Symbol("cons"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))))))) === true) ? ((function(){let Parse$unshen$do$ltpattern1$gt = klTailApply(primitive["shen.<pattern1>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern1$gt))) === true) ? ((function(){let Parse$unshen$do$ltpattern2$gt = klTailApply(primitive["shen.<pattern2>"], Parse$unshen$do$ltpattern1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))), klTailApply(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern1$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern2$gt), null))))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1542))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))))) && mustBoolean(klTailApply(primitive["="], new Symbol("@v"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))))))) === true) ? ((function(){let Parse$unshen$do$ltpattern1$gt = klTailApply(primitive["shen.<pattern1>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern1$gt))) === true) ? ((function(){let Parse$unshen$do$ltpattern2$gt = klTailApply(primitive["shen.<pattern2>"], Parse$unshen$do$ltpattern1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))), klTailApply(primitive["cons"], new Symbol("@v"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern1$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern2$gt), null))))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1542))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))))) && mustBoolean(klTailApply(primitive["="], new Symbol("@s"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))))))) === true) ? ((function(){let Parse$unshen$do$ltpattern1$gt = klTailApply(primitive["shen.<pattern1>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern1$gt))) === true) ? ((function(){let Parse$unshen$do$ltpattern2$gt = klTailApply(primitive["shen.<pattern2>"], Parse$unshen$do$ltpattern1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))), klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern1$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern2$gt), null))))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1542))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))))) && mustBoolean(klTailApply(primitive["="], new Symbol("vector"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))))))) && mustBoolean(klTailApply(primitive["="], 0, klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542))))))))))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1542)))), klTailApply(primitive["cons"], new Symbol("vector"), klTailApply(primitive["cons"], 0, null)))) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1542))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1542)); return (mustBoolean(klTailApply(primitive["cons?"], Parse$unX)) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1542)), klTailApply(primitive["shen.hdtl"], V1542))), klTailApply(primitive["shen.constructor-error"], Parse$unX))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$unshen$do$ltsimple$unpattern$gt = klTailApply(primitive["shen.<simple_pattern>"], V1542); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsimple$unpattern$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltsimple$unpattern$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsimple$unpattern$gt))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})() ;}, 1);;

defun("shen.constructor-error", function(V1544) { return new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], V1544, " is not a legitimate constructor\n", new Symbol("shen.a"))) ;}, 1);;

defun("shen.<simple_pattern>", function(V1546) { return (function(){let YaccParse = (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1546))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1546)); return (mustBoolean(klTailApply(primitive["="], Parse$unX, new Symbol("_"))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1546)), klTailApply(primitive["shen.hdtl"], V1546))), klTailApply(primitive["gensym"], new Symbol("Parse_Y")))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1546))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1546)); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["element?"], Parse$unX, klTailApply(primitive["cons"], new Symbol("->"), klTailApply(primitive["cons"], new Symbol("<-"), null))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1546)), klTailApply(primitive["shen.hdtl"], V1546))), Parse$unX)) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]))) : (YaccParse);})() ;}, 1);;

defun("shen.<pattern1>", function(V1548) { return (function(){let Parse$unshen$do$ltpattern$gt = klTailApply(primitive["shen.<pattern>"], V1548); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltpattern$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern$gt))) : (new Trampoline(primitive["fail"]));})() ;}, 1);;

defun("shen.<pattern2>", function(V1550) { return (function(){let Parse$unshen$do$ltpattern$gt = klTailApply(primitive["shen.<pattern>"], V1550); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltpattern$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern$gt))) : (new Trampoline(primitive["fail"]));})() ;}, 1);;

defun("shen.<action>", function(V1552) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1552))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1552)); return new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1552)), klTailApply(primitive["shen.hdtl"], V1552))), Parse$unX);})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<guard>", function(V1554) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1554))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1554)); return new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1554)), klTailApply(primitive["shen.hdtl"], V1554))), Parse$unX);})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.compile_to_machine_code", function(V1557, V1558) { return (function(){let Lambda$pl = klTailApply(primitive["shen.compile_to_lambda+"], V1557, V1558); return (function(){let KL = klTailApply(primitive["shen.compile_to_kl"], V1557, Lambda$pl); return (function(){let Record = klTailApply(primitive["shen.record-source"], V1557, KL); return KL;})();})();})() ;}, 2);;

defun("shen.record-source", function(V1563, V1564) { return (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*installing-kl*"))) === true) ? (new Symbol("shen.skip")) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["put"], V1563, new Symbol("shen.source"), V1564, klTailApply(primitive["value"], new Symbol("*property-vector*")))) : (err("no cond match"))) ;}, 2);;

defun("shen.compile_to_lambda+", function(V1567, V1568) { return (function(){let Arity = klTailApply(primitive["shen.aritycheck"], V1567, V1568); return (function(){let UpDateSymbolTable = klTailApply(primitive["shen.update-symbol-table"], V1567, Arity); return (function(){let Free = klTailApply(primitive["for-each"], klFun(function(Rule) { return new Trampoline(primitive["shen.free_variable_check"], V1567, Rule);}, 1), V1568); return (function(){let Variables = klTailApply(primitive["shen.parameters"], Arity); return (function(){let Strip = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.strip-protect"], X);}, 1), V1568); return (function(){let Abstractions = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.abstract_rule"], X);}, 1), Strip); return (function(){let Applications = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.application_build"], Variables, X);}, 1), Abstractions); return new Trampoline(primitive["cons"], Variables, klTailApply(primitive["cons"], Applications, null));})();})();})();})();})();})();})() ;}, 2);;

defun("shen.update-symbol-table", function(V1571, V1572) { return (mustBoolean(klTailApply(primitive["="], 0, V1572)) === true) ? (new Symbol("shen.skip")) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["put"], V1571, new Symbol("shen.lambda-form"), klTailApply(primitive["eval-kl"], klTailApply(primitive["shen.lambda-form"], V1571, V1572)), klTailApply(primitive["value"], new Symbol("*property-vector*")))) : (err("no cond match"))) ;}, 2);;

defun("shen.free_variable_check", function(V1575, V1576) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1576)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1576))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1576)))))))) === true) ? ((function(){let Bound = klTailApply(primitive["shen.extract_vars"], klTailApply(primitive["hd"], V1576)); return (function(){let Free = klTailApply(primitive["shen.extract_free_vars"], Bound, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1576))); return new Trampoline(primitive["shen.free_variable_warnings"], V1575, Free);})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.free_variable_check"))) : (err("no cond match"))) ;}, 2);;

defun("shen.extract_vars", function(V1578) { return (mustBoolean(klTailApply(primitive["variable?"], V1578)) === true) ? (new Trampoline(primitive["cons"], V1578, null)) : ((mustBoolean(klTailApply(primitive["cons?"], V1578)) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["shen.extract_vars"], klTailApply(primitive["hd"], V1578)), klTailApply(primitive["shen.extract_vars"], klTailApply(primitive["tl"], V1578)))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match")))) ;}, 1);;

defun("shen.extract_free_vars", function(V1590, V1591) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1591)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1591))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1591)))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V1591), new Symbol("protect"))))))))) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["variable?"], V1591)) && mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["element?"], V1591, V1590))))) === true) ? (new Trampoline(primitive["cons"], V1591, null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1591)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("lambda"), klTailApply(primitive["hd"], V1591))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1591))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1591)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1591))))))))))))) === true) ? (new Trampoline(primitive["shen.extract_free_vars"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1591)), V1590), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1591))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1591)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("let"), klTailApply(primitive["hd"], V1591))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1591))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1591)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1591))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1591)))))))))))))))) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["shen.extract_free_vars"], V1590, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1591)))), klTailApply(primitive["shen.extract_free_vars"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1591)), V1590), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1591))))))) : ((mustBoolean(klTailApply(primitive["cons?"], V1591)) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["shen.extract_free_vars"], V1590, klTailApply(primitive["hd"], V1591)), klTailApply(primitive["shen.extract_free_vars"], V1590, klTailApply(primitive["tl"], V1591)))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match"))))))) ;}, 2);;

defun("shen.free_variable_warnings", function(V1596, V1597) { return (mustBoolean(klTailApply(primitive["="], null, V1597)) === true) ? (new Symbol("_")) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "error: the following variables are free in ", klTailApply(primitive["shen.app"], V1596, klTailApply(primitive["cn"], ": ", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.list_variables"], V1597), "", new Symbol("shen.a"))), new Symbol("shen.a"))))) : (err("no cond match"))) ;}, 2);;

defun("shen.list_variables", function(V1599) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1599)) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1599))))) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["str"], klTailApply(primitive["hd"], V1599)), ".")) : ((mustBoolean(klTailApply(primitive["cons?"], V1599)) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["str"], klTailApply(primitive["hd"], V1599)), klTailApply(primitive["cn"], ", ", klTailApply(primitive["shen.list_variables"], klTailApply(primitive["tl"], V1599))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.list_variables"))) : (err("no cond match")))) ;}, 1);;

defun("shen.strip-protect", function(V1601) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1601)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1601))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1601)))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V1601), new Symbol("protect"))))))))) === true) ? (new Trampoline(primitive["shen.strip-protect"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1601)))) : ((mustBoolean(klTailApply(primitive["cons?"], V1601)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.strip-protect"], Z);}, 1), V1601)) : ((mustBoolean(true) === true) ? (V1601) : (err("no cond match")))) ;}, 1);;

defun("shen.linearise", function(V1603) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1603)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1603))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1603)))))))) === true) ? (new Trampoline(primitive["shen.linearise_help"], klTailApply(primitive["shen.flatten"], klTailApply(primitive["hd"], V1603)), klTailApply(primitive["hd"], V1603), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1603)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.linearise"))) : (err("no cond match"))) ;}, 1);;

defun("shen.flatten", function(V1605) { return (mustBoolean(klTailApply(primitive["="], null, V1605)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["cons?"], V1605)) === true) ? (new Trampoline(primitive["append"], klTailApply(primitive["shen.flatten"], klTailApply(primitive["hd"], V1605)), klTailApply(primitive["shen.flatten"], klTailApply(primitive["tl"], V1605)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], V1605, null)) : (err("no cond match")))) ;}, 1);;

defun("shen.linearise_help", function(V1609, V1610, V1611) { return (mustBoolean(klTailApply(primitive["="], null, V1609)) === true) ? (new Trampoline(primitive["cons"], V1610, klTailApply(primitive["cons"], V1611, null))) : ((mustBoolean(klTailApply(primitive["cons?"], V1609)) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["variable?"], klTailApply(primitive["hd"], V1609))) && mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V1609), klTailApply(primitive["tl"], V1609))))) === true) ? ((function(){let Var = klTailApply(primitive["gensym"], klTailApply(primitive["hd"], V1609)); return (function(){let NewAction = klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1609), klTailApply(primitive["cons"], Var, null))), klTailApply(primitive["cons"], V1611, null))); return (function(){let NewPatts = klTailApply(primitive["shen.linearise_X"], klTailApply(primitive["hd"], V1609), Var, V1610); return new Trampoline(primitive["shen.linearise_help"], klTailApply(primitive["tl"], V1609), NewPatts, NewAction);})();})();})()) : (new Trampoline(primitive["shen.linearise_help"], klTailApply(primitive["tl"], V1609), V1610, V1611))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.linearise_help"))) : (err("no cond match")))) ;}, 3);;

defun("shen.linearise_X", function(V1624, V1625, V1626) { return (mustBoolean(klTailApply(primitive["="], V1626, V1624)) === true) ? (V1625) : ((mustBoolean(klTailApply(primitive["cons?"], V1626)) === true) ? ((function(){let L = klTailApply(primitive["shen.linearise_X"], V1624, V1625, klTailApply(primitive["hd"], V1626)); return (mustBoolean(klTailApply(primitive["="], L, klTailApply(primitive["hd"], V1626))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1626), klTailApply(primitive["shen.linearise_X"], V1624, V1625, klTailApply(primitive["tl"], V1626)))) : (new Trampoline(primitive["cons"], L, klTailApply(primitive["tl"], V1626)));})()) : ((mustBoolean(true) === true) ? (V1626) : (err("no cond match")))) ;}, 3);;

defun("shen.aritycheck", function(V1629, V1630) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1630)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1630))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1630)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1630))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1630))))))))))) === true) ? ((function(){klTailApply(primitive["shen.aritycheck-action"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1630)))); return new Trampoline(primitive["shen.aritycheck-name"], V1629, klTailApply(primitive["arity"], V1629), klTailApply(primitive["length"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1630))));})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1630)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1630))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1630)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1630))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1630))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1630)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1630))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1630)))))))))))))))))))) === true) ? ((mustBoolean(klTailApply(primitive["="], klTailApply(primitive["length"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1630))), klTailApply(primitive["length"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1630)))))) === true) ? ((function(){klTailApply(primitive["shen.aritycheck-action"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1630)))); return new Trampoline(primitive["shen.aritycheck"], V1629, klTailApply(primitive["tl"], V1630));})()) : (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "arity error in ", klTailApply(primitive["shen.app"], V1629, "\n", new Symbol("shen.a")))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.aritycheck"))) : (err("no cond match")))) ;}, 2);;

defun("shen.aritycheck-name", function(V1643, V1644, V1645) { return (mustBoolean(klTailApply(primitive["="], -1, V1644)) === true) ? (V1645) : ((mustBoolean(klTailApply(primitive["="], V1645, V1644)) === true) ? (V1645) : ((mustBoolean(true) === true) ? ((function(){klTailApply(primitive["shen.prhush"], klTailApply(primitive["cn"], "\nwarning: changing the arity of ", klTailApply(primitive["shen.app"], V1643, " can cause errors.\n", new Symbol("shen.a"))), klTailApply(primitive["stoutput"])); return V1645;})()) : (err("no cond match")))) ;}, 3);;

defun("shen.aritycheck-action", function(V1651) { return (mustBoolean(klTailApply(primitive["cons?"], V1651)) === true) ? ((function(){klTailApply(primitive["shen.aah"], klTailApply(primitive["hd"], V1651), klTailApply(primitive["tl"], V1651)); return new Trampoline(primitive["for-each"], klFun(function(Y) { return new Trampoline(primitive["shen.aritycheck-action"], Y);}, 1), V1651);})()) : ((mustBoolean(true) === true) ? (new Symbol("shen.skip")) : (err("no cond match"))) ;}, 1);;

defun("shen.aah", function(V1654, V1655) { return (function(){let Arity = klTailApply(primitive["arity"], V1654); return (function(){let Len = klTailApply(primitive["length"], V1655); return (mustBoolean((mustBoolean(klTailApply(primitive[">"], Arity, -1)) && mustBoolean(klTailApply(primitive[">"], Len, Arity)))) === true) ? (new Trampoline(primitive["shen.prhush"], klTailApply(primitive["cn"], "warning: ", klTailApply(primitive["shen.app"], V1654, klTailApply(primitive["cn"], " might not like ", klTailApply(primitive["shen.app"], Len, klTailApply(primitive["cn"], " argument", klTailApply(primitive["shen.app"], (mustBoolean(klTailApply(primitive[">"], Len, 1)) === true) ? ("s") : (""), ".\n", new Symbol("shen.a"))), new Symbol("shen.a"))), new Symbol("shen.a"))), klTailApply(primitive["stoutput"]))) : (new Symbol("shen.skip"));})();})() ;}, 2);;

defun("shen.abstract_rule", function(V1657) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1657)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1657))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1657)))))))) === true) ? (new Trampoline(primitive["shen.abstraction_build"], klTailApply(primitive["hd"], V1657), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1657)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.abstract_rule"))) : (err("no cond match"))) ;}, 1);;

defun("shen.abstraction_build", function(V1660, V1661) { return (mustBoolean(klTailApply(primitive["="], null, V1660)) === true) ? (V1661) : ((mustBoolean(klTailApply(primitive["cons?"], V1660)) === true) ? (new Trampoline(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1660), klTailApply(primitive["cons"], klTailApply(primitive["shen.abstraction_build"], klTailApply(primitive["tl"], V1660), V1661), null)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.abstraction_build"))) : (err("no cond match")))) ;}, 2);;

defun("shen.parameters", function(V1663) { return (mustBoolean(klTailApply(primitive["="], 0, V1663)) === true) ? (null) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["gensym"], new Symbol("V")), klTailApply(primitive["shen.parameters"], klTailApply(primitive["-"], V1663, 1)))) : (err("no cond match"))) ;}, 1);;

defun("shen.application_build", function(V1666, V1667) { return (mustBoolean(klTailApply(primitive["="], null, V1666)) === true) ? (V1667) : ((mustBoolean(klTailApply(primitive["cons?"], V1666)) === true) ? (new Trampoline(primitive["shen.application_build"], klTailApply(primitive["tl"], V1666), klTailApply(primitive["cons"], V1667, klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1666), null)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.application_build"))) : (err("no cond match")))) ;}, 2);;

defun("shen.compile_to_kl", function(V1670, V1671) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1671)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1671))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1671)))))))) === true) ? ((function(){let Arity = klTailApply(primitive["shen.store-arity"], V1670, klTailApply(primitive["length"], klTailApply(primitive["hd"], V1671))); return (function(){let Reduce = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.reduce"], X);}, 1), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1671))); return (function(){let CondExpression = klTailApply(primitive["shen.cond-expression"], V1670, klTailApply(primitive["hd"], V1671), Reduce); return (function(){let TypeTable = (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*optimise*"))) === true) ? (klTailApply(primitive["shen.typextable"], klTailApply(primitive["shen.get-type"], V1670), klTailApply(primitive["hd"], V1671))) : (new Symbol("shen.skip")); return (function(){let TypedCondExpression = (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*optimise*"))) === true) ? (klTailApply(primitive["shen.assign-types"], klTailApply(primitive["hd"], V1671), TypeTable, CondExpression)) : (CondExpression); return new Trampoline(primitive["cons"], new Symbol("defun"), klTailApply(primitive["cons"], V1670, klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1671), klTailApply(primitive["cons"], TypedCondExpression, null))));})();})();})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.compile_to_kl"))) : (err("no cond match"))) ;}, 2);;

defun("shen.get-type", function(V1677) { return (mustBoolean(klTailApply(primitive["cons?"], V1677)) === true) ? (new Symbol("shen.skip")) : ((mustBoolean(true) === true) ? ((function(){let FType = klTailApply(primitive["assoc"], V1677, klTailApply(primitive["value"], new Symbol("shen.*signedfuncs*"))); return (mustBoolean(klTailApply(primitive["empty?"], FType)) === true) ? (new Symbol("shen.skip")) : (new Trampoline(primitive["tl"], FType));})()) : (err("no cond match"))) ;}, 1);;

defun("shen.typextable", function(V1688, V1689) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1688)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1688))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("-->"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1688)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1688)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1688))))) && mustBoolean(klTailApply(primitive["cons?"], V1689)))))))))))) === true) ? ((mustBoolean(klTailApply(primitive["variable?"], klTailApply(primitive["hd"], V1688))) === true) ? (new Trampoline(primitive["shen.typextable"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1688))), klTailApply(primitive["tl"], V1689))) : (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1689), klTailApply(primitive["hd"], V1688)), klTailApply(primitive["shen.typextable"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1688))), klTailApply(primitive["tl"], V1689))))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match"))) ;}, 2);;

defun("shen.assign-types", function(V1693, V1694, V1695) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1695)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("let"), klTailApply(primitive["hd"], V1695))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1695))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1695)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1695))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1695)))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1695)), klTailApply(primitive["cons"], klTailApply(primitive["shen.assign-types"], V1693, V1694, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1695)))), klTailApply(primitive["cons"], klTailApply(primitive["shen.assign-types"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1695)), V1693), V1694, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1695))))), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1695)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("lambda"), klTailApply(primitive["hd"], V1695))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1695))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1695)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1695))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1695)), klTailApply(primitive["cons"], klTailApply(primitive["shen.assign-types"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1695)), V1693), V1694, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1695)))), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1695)) && mustBoolean(klTailApply(primitive["="], new Symbol("cond"), klTailApply(primitive["hd"], V1695))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("cond"), klTailApply(primitive["map"], klFun(function(Y) { return new Trampoline(primitive["cons"], klTailApply(primitive["shen.assign-types"], V1693, V1694, klTailApply(primitive["hd"], Y)), klTailApply(primitive["cons"], klTailApply(primitive["shen.assign-types"], V1693, V1694, klTailApply(primitive["hd"], klTailApply(primitive["tl"], Y))), null));}, 1), klTailApply(primitive["tl"], V1695)))) : ((mustBoolean(klTailApply(primitive["cons?"], V1695)) === true) ? ((function(){let NewTable = klTailApply(primitive["shen.typextable"], klTailApply(primitive["shen.get-type"], klTailApply(primitive["hd"], V1695)), klTailApply(primitive["tl"], V1695)); return new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1695), klTailApply(primitive["map"], klFun(function(Y) { return new Trampoline(primitive["shen.assign-types"], V1693, klTailApply(primitive["append"], V1694, NewTable), Y);}, 1), klTailApply(primitive["tl"], V1695)));})()) : ((mustBoolean(true) === true) ? ((function(){let AtomType = klTailApply(primitive["assoc"], V1695, V1694); return (mustBoolean(klTailApply(primitive["cons?"], AtomType)) === true) ? (new Trampoline(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], V1695, klTailApply(primitive["cons"], klTailApply(primitive["tl"], AtomType), null)))) : ((mustBoolean(klTailApply(primitive["element?"], V1695, V1693)) === true) ? (V1695) : (new Trampoline(primitive["shen.atom-type"], V1695)));})()) : (err("no cond match")))))) ;}, 3);;

defun("shen.atom-type", function(V1697) { return (mustBoolean(klTailApply(primitive["string?"], V1697)) === true) ? (new Trampoline(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], V1697, klTailApply(primitive["cons"], new Symbol("string"), null)))) : ((mustBoolean(klTailApply(primitive["number?"], V1697)) === true) ? (new Trampoline(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], V1697, klTailApply(primitive["cons"], new Symbol("number"), null)))) : ((mustBoolean(klTailApply(primitive["boolean?"], V1697)) === true) ? (new Trampoline(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], V1697, klTailApply(primitive["cons"], new Symbol("boolean"), null)))) : ((mustBoolean(klTailApply(primitive["symbol?"], V1697)) === true) ? (new Trampoline(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], V1697, klTailApply(primitive["cons"], new Symbol("symbol"), null)))) : (V1697)))) ;}, 1);;

defun("shen.store-arity", function(V1702, V1703) { return (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*installing-kl*"))) === true) ? (new Symbol("shen.skip")) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["put"], V1702, new Symbol("arity"), V1703, klTailApply(primitive["value"], new Symbol("*property-vector*")))) : (err("no cond match"))) ;}, 2);;

defun("shen.reduce", function(V1705) { return (function(){klTailApply(primitive["set"], new Symbol("shen.*teststack*"), null); return (function(){let Result = klTailApply(primitive["shen.reduce_help"], V1705); return new Trampoline(primitive["cons"], klTailApply(primitive["cons"], new Symbol(":"), klTailApply(primitive["cons"], new Symbol("shen.tests"), klTailApply(primitive["reverse"], klTailApply(primitive["value"], new Symbol("shen.*teststack*"))))), klTailApply(primitive["cons"], Result, null));})();})() ;}, 1);;

defun("shen.reduce_help", function(V1707) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1707)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1707))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cons"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1707))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1707)))))))))))))))))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["tl"], V1707))); return (function(){let Abstraction = klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))), klTailApply(primitive["cons"], klTailApply(primitive["shen.ebr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1707)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))), null))), null))); return (function(){let Application = klTailApply(primitive["cons"], klTailApply(primitive["cons"], Abstraction, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["tl"], V1707)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["tl"], V1707)), null)); return new Trampoline(primitive["shen.reduce_help"], Application);})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1707)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1707))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("@p"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1707))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1707)))))))))))))))))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["cons"], new Symbol("tuple?"), klTailApply(primitive["tl"], V1707))); return (function(){let Abstraction = klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))), klTailApply(primitive["cons"], klTailApply(primitive["shen.ebr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1707)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))), null))), null))); return (function(){let Application = klTailApply(primitive["cons"], klTailApply(primitive["cons"], Abstraction, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fst"), klTailApply(primitive["tl"], V1707)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("snd"), klTailApply(primitive["tl"], V1707)), null)); return new Trampoline(primitive["shen.reduce_help"], Application);})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1707)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1707))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("@v"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1707))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1707)))))))))))))))))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["cons"], new Symbol("shen.+vector?"), klTailApply(primitive["tl"], V1707))); return (function(){let Abstraction = klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))), klTailApply(primitive["cons"], klTailApply(primitive["shen.ebr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1707)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))), null))), null))); return (function(){let Application = klTailApply(primitive["cons"], klTailApply(primitive["cons"], Abstraction, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hdv"), klTailApply(primitive["tl"], V1707)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tlv"), klTailApply(primitive["tl"], V1707)), null)); return new Trampoline(primitive["shen.reduce_help"], Application);})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1707)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1707))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("@s"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1707))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1707)))))))))))))))))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["cons"], new Symbol("shen.+string?"), klTailApply(primitive["tl"], V1707))); return (function(){let Abstraction = klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))), klTailApply(primitive["cons"], klTailApply(primitive["shen.ebr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1707)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))), null))), null))); return (function(){let Application = klTailApply(primitive["cons"], klTailApply(primitive["cons"], Abstraction, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("pos"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1707)), klTailApply(primitive["cons"], 0, null))), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tlstr"), klTailApply(primitive["tl"], V1707)), null)); return new Trampoline(primitive["shen.reduce_help"], Application);})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1707)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1707))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1707))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1707)))) && mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["variable?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))))))))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))), klTailApply(primitive["tl"], V1707)))); return new Trampoline(primitive["shen.reduce_help"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))));})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1707)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1707))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1707))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1707)))))))))))))))))) === true) ? (new Trampoline(primitive["shen.reduce_help"], klTailApply(primitive["shen.ebr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1707)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1707))))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1707)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("where"), klTailApply(primitive["hd"], V1707))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1707))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1707)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1707))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1707))); return new Trampoline(primitive["shen.reduce_help"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1707))));})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1707)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1707))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1707)))))))) === true) ? ((function(){let Z = klTailApply(primitive["shen.reduce_help"], klTailApply(primitive["hd"], V1707)); return (mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V1707), Z)) === true) ? (V1707) : (new Trampoline(primitive["shen.reduce_help"], klTailApply(primitive["cons"], Z, klTailApply(primitive["tl"], V1707))));})()) : ((mustBoolean(true) === true) ? (V1707) : (err("no cond match")))))))))) ;}, 1);;

defun("shen.+string?", function(V1709) { return (mustBoolean(klTailApply(primitive["="], "", V1709)) === true) ? (false) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["string?"], V1709)) : (err("no cond match"))) ;}, 1);;

defun("shen.+vector?", function(V1711) { return (mustBoolean(klTailApply(primitive["absvector?"], V1711)) && mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["<-address"], V1711, 0), 0))) ;}, 1);;

defun("shen.ebr", function(V1725, V1726, V1727) { return (mustBoolean(klTailApply(primitive["="], V1727, V1726)) === true) ? (V1725) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1727)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], V1727))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1727))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1727)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1727))))) && mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["occurrences"], V1726, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1727))), 0)))))))))))) === true) ? (V1727) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1727)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("lambda"), klTailApply(primitive["hd"], V1727))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1727))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1727)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1727))))) && mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["occurrences"], V1726, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1727))), 0)))))))))))) === true) ? (V1727) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1727)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("let"), klTailApply(primitive["hd"], V1727))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1727))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1727)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1727))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1727)))))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1727)), V1726)))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1727)), klTailApply(primitive["cons"], klTailApply(primitive["shen.ebr"], V1725, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1727)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1727)))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1727))))))) : ((mustBoolean(klTailApply(primitive["cons?"], V1727)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["shen.ebr"], V1725, V1726, klTailApply(primitive["hd"], V1727)), klTailApply(primitive["shen.ebr"], V1725, V1726, klTailApply(primitive["tl"], V1727)))) : ((mustBoolean(true) === true) ? (V1727) : (err("no cond match"))))))) ;}, 3);;

defun("shen.add_test", function(V1729) { return new Trampoline(primitive["set"], new Symbol("shen.*teststack*"), klTailApply(primitive["cons"], V1729, klTailApply(primitive["value"], new Symbol("shen.*teststack*")))) ;}, 1);;

defun("shen.cond-expression", function(V1733, V1734, V1735) { return (function(){let Err = klTailApply(primitive["shen.err-condition"], V1733); return (function(){let Cases = klTailApply(primitive["shen.case-form"], V1735, Err); return (function(){let EncodeChoices = klTailApply(primitive["shen.encode-choices"], Cases, V1733); return new Trampoline(primitive["shen.cond-form"], EncodeChoices);})();})();})() ;}, 3);;

defun("shen.cond-form", function(V1739) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1739)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1739))) && mustBoolean((mustBoolean(klTailApply(primitive["="], true, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1739)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1739)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1739))))))))))))) === true) ? (new Trampoline(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1739)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], new Symbol("cond"), V1739)) : (err("no cond match"))) ;}, 1);;

defun("shen.encode-choices", function(V1744, V1745) { return (mustBoolean(klTailApply(primitive["="], null, V1744)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1744)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1744))) && mustBoolean((mustBoolean(klTailApply(primitive["="], true, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1744)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.choicepoint!"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1744))))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], true, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))), klTailApply(primitive["cons"], (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*installing-kl*"))) === true) ? (klTailApply(primitive["cons"], new Symbol("shen.sys-error"), klTailApply(primitive["cons"], V1745, null))) : (klTailApply(primitive["cons"], new Symbol("shen.f_error"), klTailApply(primitive["cons"], V1745, null))), klTailApply(primitive["cons"], new Symbol("Result"), null)))), null)))), null)), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1744)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1744))) && mustBoolean((mustBoolean(klTailApply(primitive["="], true, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1744)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.choicepoint!"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], true, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))), klTailApply(primitive["cons"], klTailApply(primitive["shen.cond-form"], klTailApply(primitive["shen.encode-choices"], klTailApply(primitive["tl"], V1744), V1745)), klTailApply(primitive["cons"], new Symbol("Result"), null)))), null)))), null)), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1744)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1744))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.choicepoint!"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], true, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Freeze"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("freeze"), klTailApply(primitive["cons"], klTailApply(primitive["shen.cond-form"], klTailApply(primitive["shen.encode-choices"], klTailApply(primitive["tl"], V1744), V1745)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1744)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("thaw"), klTailApply(primitive["cons"], new Symbol("Freeze"), null)), klTailApply(primitive["cons"], new Symbol("Result"), null)))), null)))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("thaw"), klTailApply(primitive["cons"], new Symbol("Freeze"), null)), null)))), null)))), null)), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1744)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1744))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1744))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1744), klTailApply(primitive["shen.encode-choices"], klTailApply(primitive["tl"], V1744), V1745))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.encode-choices"))) : (err("no cond match"))))))) ;}, 2);;

defun("shen.case-form", function(V1752, V1753) { return (mustBoolean(klTailApply(primitive["="], null, V1752)) === true) ? (new Trampoline(primitive["cons"], V1753, null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1752)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1752))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.tests"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.choicepoint!"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752))))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752))))))))))))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], true, klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752))), klTailApply(primitive["shen.case-form"], klTailApply(primitive["tl"], V1752), V1753))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1752)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1752))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.tests"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752))))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], true, klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752))), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1752)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1752))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.tests"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], klTailApply(primitive["shen.embed-and"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1752))))), klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1752))), klTailApply(primitive["shen.case-form"], klTailApply(primitive["tl"], V1752), V1753))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.case-form"))) : (err("no cond match")))))) ;}, 2);;

defun("shen.embed-and", function(V1755) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1755)) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1755))))) === true) ? (new Trampoline(primitive["hd"], V1755)) : ((mustBoolean(klTailApply(primitive["cons?"], V1755)) === true) ? (new Trampoline(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1755), klTailApply(primitive["cons"], klTailApply(primitive["shen.embed-and"], klTailApply(primitive["tl"], V1755)), null)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.embed-and"))) : (err("no cond match")))) ;}, 1);;

defun("shen.err-condition", function(V1757) { return new Trampoline(primitive["cons"], true, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.f_error"), klTailApply(primitive["cons"], V1757, null)), null)) ;}, 1);;

defun("shen.sys-error", function(V1759) { return new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "system function ", klTailApply(primitive["shen.app"], V1759, ": unexpected argument\n", new Symbol("shen.a")))) ;}, 1);;

defun("thaw", function(V1761) { return new Trampoline(V1761) ;}, 1);;

defun("eval", function(V1763) { return (function(){let Macroexpand = klTailApply(primitive["shen.walk"], klFun(function(Y) { return new Trampoline(primitive["macroexpand"], Y);}, 1), V1763); return (mustBoolean(klTailApply(primitive["shen.packaged?"], Macroexpand)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.eval-without-macros"], Z);}, 1), klTailApply(primitive["shen.package-contents"], Macroexpand))) : (new Trampoline(primitive["shen.eval-without-macros"], Macroexpand));})() ;}, 1);;

defun("shen.eval-without-macros", function(V1765) { return new Trampoline(primitive["eval-kl"], klTailApply(primitive["shen.elim-def"], klTailApply(primitive["shen.proc-input+"], V1765))) ;}, 1);;

defun("shen.proc-input+", function(V1767) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1767)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("input+"), klTailApply(primitive["hd"], V1767))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1767))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1767)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1767))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("input+"), klTailApply(primitive["cons"], klTailApply(primitive["shen.rcons_form"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1767))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1767))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1767)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.read+"), klTailApply(primitive["hd"], V1767))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1767))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1767)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1767))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.read+"), klTailApply(primitive["cons"], klTailApply(primitive["shen.rcons_form"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1767))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1767))))) : ((mustBoolean(klTailApply(primitive["cons?"], V1767)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.proc-input+"], Z);}, 1), V1767)) : ((mustBoolean(true) === true) ? (V1767) : (err("no cond match"))))) ;}, 1);;

defun("shen.elim-def", function(V1769) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1769)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("define"), klTailApply(primitive["hd"], V1769))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1769))))))) === true) ? (new Trampoline(primitive["shen.shen->kl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1769)), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1769)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1769)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defmacro"), klTailApply(primitive["hd"], V1769))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1769))))))) === true) ? ((function(){let Default = klTailApply(primitive["cons"], new Symbol("X"), klTailApply(primitive["cons"], new Symbol("->"), klTailApply(primitive["cons"], new Symbol("X"), null))); return (function(){let Def = klTailApply(primitive["shen.elim-def"], klTailApply(primitive["cons"], new Symbol("define"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1769)), klTailApply(primitive["append"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1769)), Default)))); return (function(){let MacroAdd = klTailApply(primitive["shen.add-macro"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1769))); return Def;})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1769)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defcc"), klTailApply(primitive["hd"], V1769))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1769))))))) === true) ? (new Trampoline(primitive["shen.elim-def"], klTailApply(primitive["shen.yacc"], V1769))) : ((mustBoolean(klTailApply(primitive["cons?"], V1769)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.elim-def"], Z);}, 1), V1769)) : ((mustBoolean(true) === true) ? (V1769) : (err("no cond match")))))) ;}, 1);;

defun("shen.add-macro", function(V1771) { return (function(){let MacroReg = klTailApply(primitive["value"], new Symbol("shen.*macroreg*")); return (function(){let NewMacroReg = klTailApply(primitive["set"], new Symbol("shen.*macroreg*"), klTailApply(primitive["adjoin"], V1771, klTailApply(primitive["value"], new Symbol("shen.*macroreg*")))); return (mustBoolean(klTailApply(primitive["="], MacroReg, NewMacroReg)) === true) ? (new Symbol("shen.skip")) : (new Trampoline(primitive["set"], new Symbol("*macros*"), klTailApply(primitive["cons"], klTailApply(primitive["function"], V1771), klTailApply(primitive["value"], new Symbol("*macros*")))));})();})() ;}, 1);;

defun("shen.packaged?", function(V1779) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1779)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("package"), klTailApply(primitive["hd"], V1779))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1779))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1779)))))))))) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match"))) ;}, 1);;

defun("external", function(V1781) { return new Trampoline(primitive["get/or"], V1781, new Symbol("shen.external-symbols"), klFun(function() { return new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "package ", klTailApply(primitive["shen.app"], V1781, " has not been used.\n", new Symbol("shen.a"))))}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);;

defun("internal", function(V1783) { return new Trampoline(primitive["get/or"], V1783, new Symbol("shen.internal-symbols"), klFun(function() { return new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "package ", klTailApply(primitive["shen.app"], V1783, " has not been used.\n", new Symbol("shen.a"))))}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);;

defun("shen.package-contents", function(V1787) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1787)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("package"), klTailApply(primitive["hd"], V1787))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1787))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("null"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1787)))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1787)))))))))))) === true) ? (new Trampoline(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1787)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1787)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("package"), klTailApply(primitive["hd"], V1787))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1787))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1787)))))))))) === true) ? (new Trampoline(primitive["shen.packageh"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1787)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1787))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1787))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.package-contents"))) : (err("no cond match")))) ;}, 1);;

defun("shen.walk", function(V1790, V1791) { return (mustBoolean(klTailApply(primitive["cons?"], V1791)) === true) ? (new Trampoline(V1790, klTailApply(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.walk"], V1790, Z);}, 1), V1791))) : ((mustBoolean(true) === true) ? (new Trampoline(V1790, V1791)) : (err("no cond match"))) ;}, 2);;

defun("compile", function(V1795, V1796, V1797) { return (function(){let O = klTailApply(V1795, klTailApply(primitive["cons"], V1796, klTailApply(primitive["cons"], null, null))); return (mustBoolean((mustBoolean(klTailApply(primitive["="], klTailApply(primitive["fail"]), O)) || mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["empty?"], klTailApply(primitive["hd"], O)))))) === true) ? (new Trampoline(V1797, O)) : (new Trampoline(primitive["shen.hdtl"], O));})() ;}, 3);;

defun("fail-if", function(V1800, V1801) { return (mustBoolean(klTailApply(V1800, V1801)) === true) ? (new Trampoline(primitive["fail"])) : (V1801) ;}, 2);;

defun("@s", function(V1804, V1805) { return new Trampoline(primitive["cn"], V1804, V1805) ;}, 2);;

defun("tc?", function() { return new Trampoline(primitive["value"], new Symbol("shen.*tc*")) ;}, 0);;

defun("ps", function(V1807) { return new Trampoline(primitive["get/or"], V1807, new Symbol("shen.source"), klFun(function() { return new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], V1807, " not found.\n", new Symbol("shen.a")))}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);;

defun("stinput", function() { return new Trampoline(primitive["value"], new Symbol("*stinput*")) ;}, 0);;

defun("<-address/or", function(V1811, V1812, V1813) { return (function(){ try { return klTailApply(primitive["<-address"], V1811, V1812);} catch (err) { return klTailApply(klFun(function(E) { return new Trampoline(primitive["thaw"], V1813);}, 1), err);} })() ;}, 3);;

defun("value/or", function(V1816, V1817) { return (function(){ try { return klTailApply(primitive["value"], V1816);} catch (err) { return klTailApply(klFun(function(E) { return new Trampoline(primitive["thaw"], V1817);}, 1), err);} })() ;}, 2);;

defun("vector", function(V1819) { return (function(){let Vector = klTailApply(primitive["absvector"], klTailApply(primitive["+"], V1819, 1)); return (function(){let ZeroStamp = klTailApply(primitive["address->"], Vector, 0, V1819); return (function(){let Standard = (mustBoolean(klTailApply(primitive["="], V1819, 0)) === true) ? (ZeroStamp) : (klTailApply(primitive["shen.fillvector"], ZeroStamp, 1, V1819, klTailApply(primitive["fail"]))); return Standard;})();})();})() ;}, 1);;

defun("shen.fillvector", function(V1825, V1826, V1827, V1828) { return (mustBoolean(klTailApply(primitive["="], V1827, V1826)) === true) ? (new Trampoline(primitive["address->"], V1825, V1827, V1828)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.fillvector"], klTailApply(primitive["address->"], V1825, V1826, V1828), klTailApply(primitive["+"], 1, V1826), V1827, V1828)) : (err("no cond match"))) ;}, 4);;

defun("vector?", function(V1830) { return (mustBoolean(klTailApply(primitive["absvector?"], V1830)) && mustBoolean((function(){let X = klTailApply(primitive["<-address/or"], V1830, 0, klFun(function() { return -1}, 0)); return (mustBoolean(klTailApply(primitive["number?"], X)) && mustBoolean(klTailApply(primitive[">="], X, 0)));})())) ;}, 1);;

defun("vector->", function(V1834, V1835, V1836) { return (mustBoolean(klTailApply(primitive["="], V1835, 0)) === true) ? (new Trampoline(primitive["simple-error"], "cannot access 0th element of a vector\n")) : (new Trampoline(primitive["address->"], V1834, V1835, V1836)) ;}, 3);;

defun("<-vector", function(V1839, V1840) { return (mustBoolean(klTailApply(primitive["="], V1840, 0)) === true) ? (new Trampoline(primitive["simple-error"], "cannot access 0th element of a vector\n")) : ((function(){let VectorElement = klTailApply(primitive["<-address"], V1839, V1840); return (mustBoolean(klTailApply(primitive["="], VectorElement, klTailApply(primitive["fail"]))) === true) ? (new Trampoline(primitive["simple-error"], "vector element not found\n")) : (VectorElement);})()) ;}, 2);;

defun("<-vector/or", function(V1844, V1845, V1846) { return (mustBoolean(klTailApply(primitive["="], V1845, 0)) === true) ? (new Trampoline(primitive["simple-error"], "cannot access 0th element of a vector\n")) : ((function(){let VectorElement = klTailApply(primitive["<-address/or"], V1844, V1845, V1846); return (mustBoolean(klTailApply(primitive["="], VectorElement, klTailApply(primitive["fail"]))) === true) ? (new Trampoline(primitive["thaw"], V1846)) : (VectorElement);})()) ;}, 3);;

defun("shen.posint?", function(V1848) { return (mustBoolean(klTailApply(primitive["integer?"], V1848)) && mustBoolean(klTailApply(primitive[">="], V1848, 0))) ;}, 1);;

defun("limit", function(V1850) { return new Trampoline(primitive["<-address"], V1850, 0) ;}, 1);;

defun("shen.analyse-symbol?", function(V1852) { return (mustBoolean(klTailApply(primitive["="], "", V1852)) === true) ? (false) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V1852)) === true) ? ((mustBoolean(klTailApply(primitive["shen.alpha?"], klTailApply(primitive["pos"], V1852, 0))) && mustBoolean(klTailApply(primitive["shen.alphanums?"], klTailApply(primitive["tlstr"], V1852))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.analyse-symbol?"))) : (err("no cond match")))) ;}, 1);;

defun("shen.alpha?", function(V1854) { return new Trampoline(primitive["element?"], V1854, klTailApply(primitive["cons"], "A", klTailApply(primitive["cons"], "B", klTailApply(primitive["cons"], "C", klTailApply(primitive["cons"], "D", klTailApply(primitive["cons"], "E", klTailApply(primitive["cons"], "F", klTailApply(primitive["cons"], "G", klTailApply(primitive["cons"], "H", klTailApply(primitive["cons"], "I", klTailApply(primitive["cons"], "J", klTailApply(primitive["cons"], "K", klTailApply(primitive["cons"], "L", klTailApply(primitive["cons"], "M", klTailApply(primitive["cons"], "N", klTailApply(primitive["cons"], "O", klTailApply(primitive["cons"], "P", klTailApply(primitive["cons"], "Q", klTailApply(primitive["cons"], "R", klTailApply(primitive["cons"], "S", klTailApply(primitive["cons"], "T", klTailApply(primitive["cons"], "U", klTailApply(primitive["cons"], "V", klTailApply(primitive["cons"], "W", klTailApply(primitive["cons"], "X", klTailApply(primitive["cons"], "Y", klTailApply(primitive["cons"], "Z", klTailApply(primitive["cons"], "a", klTailApply(primitive["cons"], "b", klTailApply(primitive["cons"], "c", klTailApply(primitive["cons"], "d", klTailApply(primitive["cons"], "e", klTailApply(primitive["cons"], "f", klTailApply(primitive["cons"], "g", klTailApply(primitive["cons"], "h", klTailApply(primitive["cons"], "i", klTailApply(primitive["cons"], "j", klTailApply(primitive["cons"], "k", klTailApply(primitive["cons"], "l", klTailApply(primitive["cons"], "m", klTailApply(primitive["cons"], "n", klTailApply(primitive["cons"], "o", klTailApply(primitive["cons"], "p", klTailApply(primitive["cons"], "q", klTailApply(primitive["cons"], "r", klTailApply(primitive["cons"], "s", klTailApply(primitive["cons"], "t", klTailApply(primitive["cons"], "u", klTailApply(primitive["cons"], "v", klTailApply(primitive["cons"], "w", klTailApply(primitive["cons"], "x", klTailApply(primitive["cons"], "y", klTailApply(primitive["cons"], "z", klTailApply(primitive["cons"], "=", klTailApply(primitive["cons"], "*", klTailApply(primitive["cons"], "/", klTailApply(primitive["cons"], "+", klTailApply(primitive["cons"], "-", klTailApply(primitive["cons"], "_", klTailApply(primitive["cons"], "?", klTailApply(primitive["cons"], "$", klTailApply(primitive["cons"], "!", klTailApply(primitive["cons"], "@", klTailApply(primitive["cons"], "~", klTailApply(primitive["cons"], ">", klTailApply(primitive["cons"], "<", klTailApply(primitive["cons"], "&", klTailApply(primitive["cons"], "%", klTailApply(primitive["cons"], "{", klTailApply(primitive["cons"], "}", klTailApply(primitive["cons"], ":", klTailApply(primitive["cons"], ";", klTailApply(primitive["cons"], "`", klTailApply(primitive["cons"], "#", klTailApply(primitive["cons"], "\'", klTailApply(primitive["cons"], ".", null)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;}, 1);;

defun("shen.alphanums?", function(V1856) { return (mustBoolean(klTailApply(primitive["="], "", V1856)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V1856)) === true) ? ((mustBoolean(klTailApply(primitive["shen.alphanum?"], klTailApply(primitive["pos"], V1856, 0))) && mustBoolean(klTailApply(primitive["shen.alphanums?"], klTailApply(primitive["tlstr"], V1856))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.alphanums?"))) : (err("no cond match")))) ;}, 1);;

defun("shen.alphanum?", function(V1858) { return (mustBoolean(klTailApply(primitive["shen.alpha?"], V1858)) || mustBoolean(klTailApply(primitive["shen.digit?"], V1858))) ;}, 1);;

defun("shen.digit?", function(V1860) { return new Trampoline(primitive["element?"], V1860, klTailApply(primitive["cons"], "1", klTailApply(primitive["cons"], "2", klTailApply(primitive["cons"], "3", klTailApply(primitive["cons"], "4", klTailApply(primitive["cons"], "5", klTailApply(primitive["cons"], "6", klTailApply(primitive["cons"], "7", klTailApply(primitive["cons"], "8", klTailApply(primitive["cons"], "9", klTailApply(primitive["cons"], "0", null))))))))))) ;}, 1);;

defun("variable?", function(V1862) { return (mustBoolean((mustBoolean(klTailApply(primitive["boolean?"], V1862)) || mustBoolean((mustBoolean(klTailApply(primitive["number?"], V1862)) || mustBoolean(klTailApply(primitive["string?"], V1862)))))) === true) ? (false) : ((mustBoolean(true) === true) ? ((function(){ try { return (function(){let String = klTailApply(primitive["str"], V1862); return klTailApply(primitive["shen.analyse-variable?"], String);})();} catch (err) { return klTailApply(klFun(function(E) { return false;}, 1), err);} })()) : (err("no cond match"))) ;}, 1);;

defun("shen.analyse-variable?", function(V1864) { return (mustBoolean(klTailApply(primitive["shen.+string?"], V1864)) === true) ? ((mustBoolean(klTailApply(primitive["shen.uppercase?"], klTailApply(primitive["pos"], V1864, 0))) && mustBoolean(klTailApply(primitive["shen.alphanums?"], klTailApply(primitive["tlstr"], V1864))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.analyse-variable?"))) : (err("no cond match"))) ;}, 1);;

defun("shen.uppercase?", function(V1866) { return new Trampoline(primitive["element?"], V1866, klTailApply(primitive["cons"], "A", klTailApply(primitive["cons"], "B", klTailApply(primitive["cons"], "C", klTailApply(primitive["cons"], "D", klTailApply(primitive["cons"], "E", klTailApply(primitive["cons"], "F", klTailApply(primitive["cons"], "G", klTailApply(primitive["cons"], "H", klTailApply(primitive["cons"], "I", klTailApply(primitive["cons"], "J", klTailApply(primitive["cons"], "K", klTailApply(primitive["cons"], "L", klTailApply(primitive["cons"], "M", klTailApply(primitive["cons"], "N", klTailApply(primitive["cons"], "O", klTailApply(primitive["cons"], "P", klTailApply(primitive["cons"], "Q", klTailApply(primitive["cons"], "R", klTailApply(primitive["cons"], "S", klTailApply(primitive["cons"], "T", klTailApply(primitive["cons"], "U", klTailApply(primitive["cons"], "V", klTailApply(primitive["cons"], "W", klTailApply(primitive["cons"], "X", klTailApply(primitive["cons"], "Y", klTailApply(primitive["cons"], "Z", null))))))))))))))))))))))))))) ;}, 1);;

defun("gensym", function(V1868) { return new Trampoline(primitive["concat"], V1868, klTailApply(primitive["set"], new Symbol("shen.*gensym*"), klTailApply(primitive["+"], 1, klTailApply(primitive["value"], new Symbol("shen.*gensym*"))))) ;}, 1);;

defun("concat", function(V1871, V1872) { return new Trampoline(primitive["intern"], klTailApply(primitive["cn"], klTailApply(primitive["str"], V1871), klTailApply(primitive["str"], V1872))) ;}, 2);;

defun("@p", function(V1875, V1876) { return (function(){let Vector = klTailApply(primitive["absvector"], 3); return (function(){let Tag = klTailApply(primitive["address->"], Vector, 0, new Symbol("shen.tuple")); return (function(){let Fst = klTailApply(primitive["address->"], Vector, 1, V1875); return (function(){let Snd = klTailApply(primitive["address->"], Vector, 2, V1876); return Vector;})();})();})();})() ;}, 2);;

defun("fst", function(V1878) { return new Trampoline(primitive["<-address"], V1878, 1) ;}, 1);;

defun("snd", function(V1880) { return new Trampoline(primitive["<-address"], V1880, 2) ;}, 1);;

defun("tuple?", function(V1882) { return (mustBoolean(klTailApply(primitive["absvector?"], V1882)) && mustBoolean(klTailApply(primitive["="], new Symbol("shen.tuple"), klTailApply(primitive["<-address/or"], V1882, 0, klFun(function() { return new Symbol("shen.not-tuple")}, 0))))) ;}, 1);;

defun("append", function(V1885, V1886) { return (mustBoolean(klTailApply(primitive["="], null, V1885)) === true) ? (V1886) : ((mustBoolean(klTailApply(primitive["cons?"], V1885)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1885), klTailApply(primitive["append"], klTailApply(primitive["tl"], V1885), V1886))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("append"))) : (err("no cond match")))) ;}, 2);;

defun("@v", function(V1889, V1890) { return (function(){let Limit = klTailApply(primitive["limit"], V1890); return (function(){let NewVector = klTailApply(primitive["vector"], klTailApply(primitive["+"], Limit, 1)); return (function(){let X$plNewVector = klTailApply(primitive["vector->"], NewVector, 1, V1889); return (mustBoolean(klTailApply(primitive["="], Limit, 0)) === true) ? (X$plNewVector) : (new Trampoline(primitive["shen.@v-help"], V1890, 1, Limit, X$plNewVector));})();})();})() ;}, 2);;

defun("shen.@v-help", function(V1896, V1897, V1898, V1899) { return (mustBoolean(klTailApply(primitive["="], V1898, V1897)) === true) ? (new Trampoline(primitive["shen.copyfromvector"], V1896, V1899, V1898, klTailApply(primitive["+"], V1898, 1))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.@v-help"], V1896, klTailApply(primitive["+"], V1897, 1), V1898, klTailApply(primitive["shen.copyfromvector"], V1896, V1899, V1897, klTailApply(primitive["+"], V1897, 1)))) : (err("no cond match"))) ;}, 4);;

defun("shen.copyfromvector", function(V1904, V1905, V1906, V1907) { return (function(){ try { return klTailApply(primitive["vector->"], V1905, V1907, klTailApply(primitive["<-vector"], V1904, V1906));} catch (err) { return klTailApply(klFun(function(E) { return V1905;}, 1), err);} })() ;}, 4);;

defun("hdv", function(V1909) { return new Trampoline(primitive["<-vector/or"], V1909, 1, klFun(function() { return new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "hdv needs a non-empty vector as an argument; not ", klTailApply(primitive["shen.app"], V1909, "\n", new Symbol("shen.s"))))}, 0)) ;}, 1);;

defun("tlv", function(V1911) { return (function(){let Limit = klTailApply(primitive["limit"], V1911); return (mustBoolean(klTailApply(primitive["="], Limit, 0)) === true) ? (new Trampoline(primitive["simple-error"], "cannot take the tail of the empty vector\n")) : ((mustBoolean(klTailApply(primitive["="], Limit, 1)) === true) ? (new Trampoline(primitive["vector"], 0)) : ((function(){let NewVector = klTailApply(primitive["vector"], klTailApply(primitive["-"], Limit, 1)); return new Trampoline(primitive["shen.tlv-help"], V1911, 2, Limit, klTailApply(primitive["vector"], klTailApply(primitive["-"], Limit, 1)));})()));})() ;}, 1);;

defun("shen.tlv-help", function(V1917, V1918, V1919, V1920) { return (mustBoolean(klTailApply(primitive["="], V1919, V1918)) === true) ? (new Trampoline(primitive["shen.copyfromvector"], V1917, V1920, V1919, klTailApply(primitive["-"], V1919, 1))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.tlv-help"], V1917, klTailApply(primitive["+"], V1918, 1), V1919, klTailApply(primitive["shen.copyfromvector"], V1917, V1920, V1918, klTailApply(primitive["-"], V1918, 1)))) : (err("no cond match"))) ;}, 4);;

defun("assoc", function(V1932, V1933) { return (mustBoolean(klTailApply(primitive["="], null, V1933)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1933)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1933))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1933)), V1932)))))) === true) ? (new Trampoline(primitive["hd"], V1933)) : ((mustBoolean(klTailApply(primitive["cons?"], V1933)) === true) ? (new Trampoline(primitive["assoc"], V1932, klTailApply(primitive["tl"], V1933))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("assoc"))) : (err("no cond match"))))) ;}, 2);;

defun("boolean?", function(V1939) { return (mustBoolean(klTailApply(primitive["="], true, V1939)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], false, V1939)) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match")))) ;}, 1);;

defun("nl", function(V1941) { return (mustBoolean(klTailApply(primitive["="], 0, V1941)) === true) ? (0) : ((mustBoolean(true) === true) ? ((function(){klTailApply(primitive["shen.prhush"], "\n", klTailApply(primitive["stoutput"])); return new Trampoline(primitive["nl"], klTailApply(primitive["-"], V1941, 1));})()) : (err("no cond match"))) ;}, 1);;

defun("difference", function(V1946, V1947) { return (mustBoolean(klTailApply(primitive["="], null, V1946)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["cons?"], V1946)) === true) ? ((mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V1946), V1947)) === true) ? (new Trampoline(primitive["difference"], klTailApply(primitive["tl"], V1946), V1947)) : (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1946), klTailApply(primitive["difference"], klTailApply(primitive["tl"], V1946), V1947)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("difference"))) : (err("no cond match")))) ;}, 2);;

defun("do", function(V1950, V1951) { return V1951 ;}, 2);;

defun("element?", function(V1963, V1964) { return (mustBoolean(klTailApply(primitive["="], null, V1964)) === true) ? (false) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1964)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V1964), V1963)))) === true) ? (true) : ((mustBoolean(klTailApply(primitive["cons?"], V1964)) === true) ? (new Trampoline(primitive["element?"], V1963, klTailApply(primitive["tl"], V1964))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("element?"))) : (err("no cond match"))))) ;}, 2);;

defun("empty?", function(V1970) { return (mustBoolean(klTailApply(primitive["="], null, V1970)) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match"))) ;}, 1);;

defun("fix", function(V1973, V1974) { return new Trampoline(primitive["shen.fix-help"], V1973, V1974, klTailApply(V1973, V1974)) ;}, 2);;

defun("shen.fix-help", function(V1985, V1986, V1987) { return (mustBoolean(klTailApply(primitive["="], V1987, V1986)) === true) ? (V1987) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.fix-help"], V1985, V1987, klTailApply(V1985, V1987))) : (err("no cond match"))) ;}, 3);;

defun("dict", function(V1989) { return (function(){let D = klTailApply(primitive["absvector"], klTailApply(primitive["+"], 3, V1989)); return (function(){let Tag = klTailApply(primitive["address->"], D, 0, new Symbol("shen.dictionary")); return (function(){let Capacity = klTailApply(primitive["address->"], D, 1, V1989); return (function(){let Count = klTailApply(primitive["address->"], D, 2, 0); return (function(){let Fill = klTailApply(primitive["shen.fillvector"], D, 3, klTailApply(primitive["+"], 2, V1989), null); return D;})();})();})();})();})() ;}, 1);;

defun("dict?", function(V1991) { return (mustBoolean(klTailApply(primitive["absvector?"], V1991)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["<-address/or"], V1991, 0, klFun(function() { return new Symbol("shen.not-dictionary")}, 0)), new Symbol("shen.dictionary")))) ;}, 1);;

defun("shen.dict-capacity", function(V1993) { return new Trampoline(primitive["<-address"], V1993, 1) ;}, 1);;

defun("dict-count", function(V1995) { return new Trampoline(primitive["<-address"], V1995, 2) ;}, 1);;

defun("shen.dict-count->", function(V1998, V1999) { return new Trampoline(primitive["address->"], V1998, 2, V1999) ;}, 2);;

defun("shen.<-dict-bucket", function(V2002, V2003) { return new Trampoline(primitive["<-address"], V2002, klTailApply(primitive["+"], 3, V2003)) ;}, 2);;

defun("shen.dict-bucket->", function(V2007, V2008, V2009) { return new Trampoline(primitive["address->"], V2007, klTailApply(primitive["+"], 3, V2008), V2009) ;}, 3);;

defun("shen.set-key-entry-value", function(V2016, V2017, V2018) { return (mustBoolean(klTailApply(primitive["="], null, V2018)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], V2016, V2017), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2018)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2018))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2018)), V2016)))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2018)), V2017), klTailApply(primitive["tl"], V2018))) : ((mustBoolean(klTailApply(primitive["cons?"], V2018)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V2018), klTailApply(primitive["shen.set-key-entry-value"], V2016, V2017, klTailApply(primitive["tl"], V2018)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.set-key-entry-value"))) : (err("no cond match"))))) ;}, 3);;

defun("shen.remove-key-entry-value", function(V2024, V2025) { return (mustBoolean(klTailApply(primitive["="], null, V2025)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2025)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2025))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2025)), V2024)))))) === true) ? (new Trampoline(primitive["tl"], V2025)) : ((mustBoolean(klTailApply(primitive["cons?"], V2025)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V2025), klTailApply(primitive["shen.remove-key-entry-value"], V2024, klTailApply(primitive["tl"], V2025)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.remove-key-entry-value"))) : (err("no cond match"))))) ;}, 2);;

defun("shen.dict-update-count", function(V2029, V2030, V2031) { return (function(){let Diff = klTailApply(primitive["-"], klTailApply(primitive["length"], V2031), klTailApply(primitive["length"], V2030)); return new Trampoline(primitive["shen.dict-count->"], V2029, klTailApply(primitive["+"], Diff, klTailApply(primitive["dict-count"], V2029)));})() ;}, 3);;

defun("dict->", function(V2035, V2036, V2037) { return (function(){let N = klTailApply(primitive["hash"], V2036, klTailApply(primitive["shen.dict-capacity"], V2035)); return (function(){let Bucket = klTailApply(primitive["shen.<-dict-bucket"], V2035, N); return (function(){let NewBucket = klTailApply(primitive["shen.set-key-entry-value"], V2036, V2037, Bucket); return (function(){let Change = klTailApply(primitive["shen.dict-bucket->"], V2035, N, NewBucket); return (function(){let Count = klTailApply(primitive["shen.dict-update-count"], V2035, Bucket, NewBucket); return V2037;})();})();})();})();})() ;}, 3);;

defun("<-dict/or", function(V2041, V2042, V2043) { return (function(){let N = klTailApply(primitive["hash"], V2042, klTailApply(primitive["shen.dict-capacity"], V2041)); return (function(){let Bucket = klTailApply(primitive["shen.<-dict-bucket"], V2041, N); return (function(){let Result = klTailApply(primitive["assoc"], V2042, Bucket); return (mustBoolean(klTailApply(primitive["empty?"], Result)) === true) ? (new Trampoline(primitive["thaw"], V2043)) : (new Trampoline(primitive["tl"], Result));})();})();})() ;}, 3);;

defun("<-dict", function(V2046, V2047) { return new Trampoline(primitive["<-dict/or"], V2046, V2047, klFun(function() { return new Trampoline(primitive["simple-error"], "value not found\n")}, 0)) ;}, 2);;

defun("dict-rm", function(V2050, V2051) { return (function(){let N = klTailApply(primitive["hash"], V2051, klTailApply(primitive["shen.dict-capacity"], V2050)); return (function(){let Bucket = klTailApply(primitive["shen.<-dict-bucket"], V2050, N); return (function(){let NewBucket = klTailApply(primitive["shen.remove-key-entry-value"], V2051, Bucket); return (function(){let Change = klTailApply(primitive["shen.dict-bucket->"], V2050, N, NewBucket); return (function(){let Count = klTailApply(primitive["shen.dict-update-count"], V2050, Bucket, NewBucket); return V2051;})();})();})();})();})() ;}, 2);;

defun("dict-fold", function(V2055, V2056, V2057) { return (function(){let Limit = klTailApply(primitive["shen.dict-capacity"], V2056); return new Trampoline(primitive["shen.dict-fold-h"], V2055, V2056, V2057, 0, Limit);})() ;}, 3);;

defun("shen.dict-fold-h", function(V2064, V2065, V2066, V2067, V2068) { return (mustBoolean(klTailApply(primitive["="], V2068, V2067)) === true) ? (V2066) : ((mustBoolean(true) === true) ? ((function(){let B = klTailApply(primitive["shen.<-dict-bucket"], V2065, V2067); return (function(){let Acc = klTailApply(primitive["shen.bucket-fold"], V2064, B, V2066); return new Trampoline(primitive["shen.dict-fold-h"], V2064, V2065, Acc, klTailApply(primitive["+"], 1, V2067), V2068);})();})()) : (err("no cond match"))) ;}, 5);;

defun("shen.bucket-fold", function(V2072, V2073, V2074) { return (mustBoolean(klTailApply(primitive["="], null, V2073)) === true) ? (V2074) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2073)) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2073))))) === true) ? (new Trampoline(V2072, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2073)), klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2073)), klTailApply(primitive["shen.bucket-fold"], V2072, klTailApply(primitive["tl"], V2073), V2074))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.bucket-fold"))) : (err("no cond match")))) ;}, 3);;

defun("dict-keys", function(V2076) { return new Trampoline(primitive["dict-fold"], klFun(function(K) { return klFun(function($un) { return klFun(function(Acc) { return new Trampoline(primitive["cons"], K, Acc);}, 1);}, 1);}, 1), V2076, null) ;}, 1);;

defun("dict-values", function(V2078) { return new Trampoline(primitive["dict-fold"], klFun(function($un) { return klFun(function(V) { return klFun(function(Acc) { return new Trampoline(primitive["cons"], V, Acc);}, 1);}, 1);}, 1), V2078, null) ;}, 1);;

defun("put", function(V2083, V2084, V2085, V2086) { return (function(){let Curr = klTailApply(primitive["<-dict/or"], V2086, V2083, klFun(function() { return null}, 0)); return (function(){let Added = klTailApply(primitive["shen.set-key-entry-value"], V2084, V2085, Curr); return (function(){let Update = klTailApply(primitive["dict->"], V2086, V2083, Added); return V2085;})();})();})() ;}, 4);;

defun("unput", function(V2090, V2091, V2092) { return (function(){let Curr = klTailApply(primitive["<-dict/or"], V2092, V2090, klFun(function() { return null}, 0)); return (function(){let Removed = klTailApply(primitive["shen.remove-key-entry-value"], V2091, Curr); return (function(){let Update = klTailApply(primitive["dict->"], V2092, V2090, Removed); return V2090;})();})();})() ;}, 3);;

defun("get/or", function(V2097, V2098, V2099, V2100) { return (function(){let Entry = klTailApply(primitive["<-dict/or"], V2100, V2097, klFun(function() { return null}, 0)); return (function(){let Result = klTailApply(primitive["assoc"], V2098, Entry); return (mustBoolean(klTailApply(primitive["empty?"], Result)) === true) ? (new Trampoline(primitive["thaw"], V2099)) : (new Trampoline(primitive["tl"], Result));})();})() ;}, 4);;

defun("get", function(V2104, V2105, V2106) { return new Trampoline(primitive["get/or"], V2104, V2105, klFun(function() { return new Trampoline(primitive["simple-error"], "value not found\n")}, 0), V2106) ;}, 3);;

defun("hash", function(V2109, V2110) { return new Trampoline(primitive["shen.mod"], klTailApply(primitive["sum"], klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["string->n"], X);}, 1), klTailApply(primitive["explode"], V2109))), V2110) ;}, 2);;

defun("shen.mod", function(V2113, V2114) { return new Trampoline(primitive["shen.modh"], V2113, klTailApply(primitive["shen.multiples"], V2113, klTailApply(primitive["cons"], V2114, null))) ;}, 2);;

defun("shen.multiples", function(V2117, V2118) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2118)) && mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["hd"], V2118), V2117)))) === true) ? (new Trampoline(primitive["tl"], V2118)) : ((mustBoolean(klTailApply(primitive["cons?"], V2118)) === true) ? (new Trampoline(primitive["shen.multiples"], V2117, klTailApply(primitive["cons"], klTailApply(primitive["*"], 2, klTailApply(primitive["hd"], V2118)), V2118))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.multiples"))) : (err("no cond match")))) ;}, 2);;

defun("shen.modh", function(V2123, V2124) { return (mustBoolean(klTailApply(primitive["="], 0, V2123)) === true) ? (0) : ((mustBoolean(klTailApply(primitive["="], null, V2124)) === true) ? (V2123) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2124)) && mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["hd"], V2124), V2123)))) === true) ? ((mustBoolean(klTailApply(primitive["empty?"], klTailApply(primitive["tl"], V2124))) === true) ? (V2123) : (new Trampoline(primitive["shen.modh"], V2123, klTailApply(primitive["tl"], V2124)))) : ((mustBoolean(klTailApply(primitive["cons?"], V2124)) === true) ? (new Trampoline(primitive["shen.modh"], klTailApply(primitive["-"], V2123, klTailApply(primitive["hd"], V2124)), V2124)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.modh"))) : (err("no cond match")))))) ;}, 2);;

defun("sum", function(V2126) { return (mustBoolean(klTailApply(primitive["="], null, V2126)) === true) ? (0) : ((mustBoolean(klTailApply(primitive["cons?"], V2126)) === true) ? (new Trampoline(primitive["+"], klTailApply(primitive["hd"], V2126), klTailApply(primitive["sum"], klTailApply(primitive["tl"], V2126)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("sum"))) : (err("no cond match")))) ;}, 1);;

defun("head", function(V2134) { return (mustBoolean(klTailApply(primitive["cons?"], V2134)) === true) ? (new Trampoline(primitive["hd"], V2134)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "head expects a non-empty list")) : (err("no cond match"))) ;}, 1);;

defun("tail", function(V2142) { return (mustBoolean(klTailApply(primitive["cons?"], V2142)) === true) ? (new Trampoline(primitive["tl"], V2142)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "tail expects a non-empty list")) : (err("no cond match"))) ;}, 1);;

defun("hdstr", function(V2144) { return new Trampoline(primitive["pos"], V2144, 0) ;}, 1);;

defun("intersection", function(V2149, V2150) { return (mustBoolean(klTailApply(primitive["="], null, V2149)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["cons?"], V2149)) === true) ? ((mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V2149), V2150)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V2149), klTailApply(primitive["intersection"], klTailApply(primitive["tl"], V2149), V2150))) : (new Trampoline(primitive["intersection"], klTailApply(primitive["tl"], V2149), V2150))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("intersection"))) : (err("no cond match")))) ;}, 2);;

defun("reverse", function(V2152) { return new Trampoline(primitive["shen.reverse_help"], V2152, null) ;}, 1);;

defun("shen.reverse_help", function(V2155, V2156) { return (mustBoolean(klTailApply(primitive["="], null, V2155)) === true) ? (V2156) : ((mustBoolean(klTailApply(primitive["cons?"], V2155)) === true) ? (new Trampoline(primitive["shen.reverse_help"], klTailApply(primitive["tl"], V2155), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2155), V2156))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.reverse_help"))) : (err("no cond match")))) ;}, 2);;

defun("union", function(V2159, V2160) { return (mustBoolean(klTailApply(primitive["="], null, V2159)) === true) ? (V2160) : ((mustBoolean(klTailApply(primitive["cons?"], V2159)) === true) ? ((mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V2159), V2160)) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["tl"], V2159), V2160)) : (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V2159), klTailApply(primitive["union"], klTailApply(primitive["tl"], V2159), V2160)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("union"))) : (err("no cond match")))) ;}, 2);;

defun("y-or-n?", function(V2162) { return (function(){let Message = klTailApply(primitive["shen.prhush"], klTailApply(primitive["shen.proc-nl"], V2162), klTailApply(primitive["stoutput"])); return (function(){let Y_or_N = klTailApply(primitive["shen.prhush"], " (y/n) ", klTailApply(primitive["stoutput"])); return (function(){let Input = klTailApply(primitive["shen.app"], klTailApply(primitive["read"], klTailApply(primitive["stinput"])), "", new Symbol("shen.s")); return (mustBoolean(klTailApply(primitive["="], "y", Input)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], "n", Input)) === true) ? (false) : ((function(){klTailApply(primitive["shen.prhush"], "please answer y or n\n", klTailApply(primitive["stoutput"])); return new Trampoline(primitive["y-or-n?"], V2162);})()));})();})();})() ;}, 1);;

defun("not", function(V2164) { return (mustBoolean(V2164) === true) ? (false) : (true) ;}, 1);;

defun("subst", function(V2177, V2178, V2179) { return (mustBoolean(klTailApply(primitive["="], V2179, V2178)) === true) ? (V2177) : ((mustBoolean(klTailApply(primitive["cons?"], V2179)) === true) ? (new Trampoline(primitive["map"], klFun(function(W) { return new Trampoline(primitive["subst"], V2177, V2178, W);}, 1), V2179)) : ((mustBoolean(true) === true) ? (V2179) : (err("no cond match")))) ;}, 3);;

defun("explode", function(V2181) { return new Trampoline(primitive["shen.explode-h"], klTailApply(primitive["shen.app"], V2181, "", new Symbol("shen.a"))) ;}, 1);;

defun("shen.explode-h", function(V2183) { return (mustBoolean(klTailApply(primitive["="], "", V2183)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V2183)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["pos"], V2183, 0), klTailApply(primitive["shen.explode-h"], klTailApply(primitive["tlstr"], V2183)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.explode-h"))) : (err("no cond match")))) ;}, 1);;

defun("cd", function(V2185) { return new Trampoline(primitive["set"], new Symbol("*home-directory*"), (mustBoolean(klTailApply(primitive["="], V2185, "")) === true) ? ("") : (klTailApply(primitive["shen.app"], V2185, "/", new Symbol("shen.a")))) ;}, 1);;

defun("for-each", function(V2188, V2189) { return (mustBoolean(klTailApply(primitive["="], null, V2189)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["cons?"], V2189)) === true) ? ((function(){let $un = klTailApply(V2188, klTailApply(primitive["hd"], V2189)); return new Trampoline(primitive["for-each"], V2188, klTailApply(primitive["tl"], V2189));})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("for-each"))) : (err("no cond match")))) ;}, 2);;

defun("fold-right", function(V2193, V2194, V2195) { return (mustBoolean(klTailApply(primitive["="], null, V2194)) === true) ? (V2195) : ((mustBoolean(klTailApply(primitive["cons?"], V2194)) === true) ? (new Trampoline(V2193, klTailApply(primitive["hd"], V2194), klTailApply(primitive["fold-right"], V2193, klTailApply(primitive["tl"], V2194), V2195))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("fold-right"))) : (err("no cond match")))) ;}, 3);;

defun("fold-left", function(V2199, V2200, V2201) { return (mustBoolean(klTailApply(primitive["="], null, V2201)) === true) ? (V2200) : ((mustBoolean(klTailApply(primitive["cons?"], V2201)) === true) ? (new Trampoline(primitive["fold-left"], V2199, klTailApply(V2199, V2200, klTailApply(primitive["hd"], V2201)), klTailApply(primitive["tl"], V2201))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("fold-left"))) : (err("no cond match")))) ;}, 3);;

defun("filter", function(V2204, V2205) { return new Trampoline(primitive["shen.filter-h"], V2204, null, V2205) ;}, 2);;

defun("shen.filter-h", function(V2215, V2216, V2217) { return (mustBoolean(klTailApply(primitive["="], null, V2217)) === true) ? (new Trampoline(primitive["reverse"], V2216)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2217)) && mustBoolean(klTailApply(V2215, klTailApply(primitive["hd"], V2217))))) === true) ? (new Trampoline(primitive["shen.filter-h"], V2215, klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2217), V2216), klTailApply(primitive["tl"], V2217))) : ((mustBoolean(klTailApply(primitive["cons?"], V2217)) === true) ? (new Trampoline(primitive["shen.filter-h"], V2215, V2216, klTailApply(primitive["tl"], V2217))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.filter-h"))) : (err("no cond match"))))) ;}, 3);;

defun("map", function(V2220, V2221) { return new Trampoline(primitive["shen.map-h"], V2220, V2221, null) ;}, 2);;

defun("shen.map-h", function(V2227, V2228, V2229) { return (mustBoolean(klTailApply(primitive["="], null, V2228)) === true) ? (new Trampoline(primitive["reverse"], V2229)) : ((mustBoolean(klTailApply(primitive["cons?"], V2228)) === true) ? (new Trampoline(primitive["shen.map-h"], V2227, klTailApply(primitive["tl"], V2228), klTailApply(primitive["cons"], klTailApply(V2227, klTailApply(primitive["hd"], V2228)), V2229))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.map-h"))) : (err("no cond match")))) ;}, 3);;

defun("length", function(V2231) { return new Trampoline(primitive["shen.length-h"], V2231, 0) ;}, 1);;

defun("shen.length-h", function(V2234, V2235) { return (mustBoolean(klTailApply(primitive["="], null, V2234)) === true) ? (V2235) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.length-h"], klTailApply(primitive["tl"], V2234), klTailApply(primitive["+"], V2235, 1))) : (err("no cond match"))) ;}, 2);;

defun("occurrences", function(V2247, V2248) { return (mustBoolean(klTailApply(primitive["="], V2248, V2247)) === true) ? (1) : ((mustBoolean(klTailApply(primitive["cons?"], V2248)) === true) ? (new Trampoline(primitive["+"], klTailApply(primitive["occurrences"], V2247, klTailApply(primitive["hd"], V2248)), klTailApply(primitive["occurrences"], V2247, klTailApply(primitive["tl"], V2248)))) : ((mustBoolean(true) === true) ? (0) : (err("no cond match")))) ;}, 2);;

defun("nth", function(V2257, V2258) { return (mustBoolean((mustBoolean(klTailApply(primitive["="], 1, V2257)) && mustBoolean(klTailApply(primitive["cons?"], V2258)))) === true) ? (new Trampoline(primitive["hd"], V2258)) : ((mustBoolean(klTailApply(primitive["cons?"], V2258)) === true) ? (new Trampoline(primitive["nth"], klTailApply(primitive["-"], V2257, 1), klTailApply(primitive["tl"], V2258))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("nth"))) : (err("no cond match")))) ;}, 2);;

defun("shen.abs", function(V2260) { return (mustBoolean(klTailApply(primitive[">"], V2260, 0)) === true) ? (V2260) : (new Trampoline(primitive["-"], 0, V2260)) ;}, 1);;

defun("shen.magless", function(V2263, V2264) { return (function(){let Nx2 = klTailApply(primitive["*"], V2264, 2); return (mustBoolean(klTailApply(primitive[">"], Nx2, V2263)) === true) ? (V2264) : (new Trampoline(primitive["shen.magless"], V2263, Nx2));})() ;}, 2);;

defun("shen.integer-test?", function(V2270, V2271) { return (mustBoolean(klTailApply(primitive["="], 0, V2270)) === true) ? (true) : ((mustBoolean(klTailApply(primitive[">"], 1, V2270)) === true) ? (false) : ((mustBoolean(true) === true) ? ((function(){let Abs_N = klTailApply(primitive["-"], V2270, V2271); return (mustBoolean(klTailApply(primitive[">"], 0, Abs_N)) === true) ? (new Trampoline(primitive["integer?"], V2270)) : (new Trampoline(primitive["shen.integer-test?"], Abs_N, V2271));})()) : (err("no cond match")))) ;}, 2);;

defun("mapcan", function(V2276, V2277) { return (mustBoolean(klTailApply(primitive["="], null, V2277)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["cons?"], V2277)) === true) ? (new Trampoline(primitive["append"], klTailApply(V2276, klTailApply(primitive["hd"], V2277)), klTailApply(primitive["mapcan"], V2276, klTailApply(primitive["tl"], V2277)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("mapcan"))) : (err("no cond match")))) ;}, 2);;

defun("==", function(V2289, V2290) { return (mustBoolean(klTailApply(primitive["="], V2290, V2289)) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match"))) ;}, 2);;

defun("abort", function() { return new Trampoline(primitive["simple-error"], "") ;}, 0);;

defun("bound?", function(V2292) { return (mustBoolean(klTailApply(primitive["symbol?"], V2292)) && mustBoolean((function(){let Val = klTailApply(primitive["value/or"], V2292, klFun(function() { return new Symbol("shen.this-symbol-is-unbound")}, 0)); return (mustBoolean(klTailApply(primitive["="], Val, new Symbol("shen.this-symbol-is-unbound"))) === true) ? (false) : (true);})())) ;}, 1);;

defun("shen.string->bytes", function(V2294) { return (mustBoolean(klTailApply(primitive["="], "", V2294)) === true) ? (null) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["string->n"], klTailApply(primitive["pos"], V2294, 0)), klTailApply(primitive["shen.string->bytes"], klTailApply(primitive["tlstr"], V2294)))) : (err("no cond match"))) ;}, 1);;

defun("maxinferences", function(V2296) { return new Trampoline(primitive["set"], new Symbol("shen.*maxinferences*"), V2296) ;}, 1);;

defun("inferences", function() { return new Trampoline(primitive["value"], new Symbol("shen.*infs*")) ;}, 0);;

defun("protect", function(V2298) { return V2298 ;}, 1);;

defun("stoutput", function() { return new Trampoline(primitive["value"], new Symbol("*stoutput*")) ;}, 0);;

defun("sterror", function() { return new Trampoline(primitive["value"], new Symbol("*sterror*")) ;}, 0);;

defun("string->symbol", function(V2300) { return (function(){let Symbol = klTailApply(primitive["intern"], V2300); return (mustBoolean(klTailApply(primitive["symbol?"], Symbol)) === true) ? (Symbol) : (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "cannot intern ", klTailApply(primitive["shen.app"], V2300, " to a symbol", new Symbol("shen.s")))));})() ;}, 1);;

defun("optimise", function(V2306) { return (mustBoolean(klTailApply(primitive["="], new Symbol("+"), V2306)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*optimise*"), true)) : ((mustBoolean(klTailApply(primitive["="], new Symbol("-"), V2306)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*optimise*"), false)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "optimise expects a + or a -.\n")) : (err("no cond match")))) ;}, 1);;

defun("os", function() { return new Trampoline(primitive["value"], new Symbol("*os*")) ;}, 0);;

defun("language", function() { return new Trampoline(primitive["value"], new Symbol("*language*")) ;}, 0);;

defun("version", function() { return new Trampoline(primitive["value"], new Symbol("*version*")) ;}, 0);;

defun("port", function() { return new Trampoline(primitive["value"], new Symbol("*port*")) ;}, 0);;

defun("porters", function() { return new Trampoline(primitive["value"], new Symbol("*porters*")) ;}, 0);;

defun("implementation", function() { return new Trampoline(primitive["value"], new Symbol("*implementation*")) ;}, 0);;

defun("release", function() { return new Trampoline(primitive["value"], new Symbol("*release*")) ;}, 0);;

defun("package?", function(V2308) { return (function(){ try { return (function(){klTailApply(primitive["external"], V2308); return true;})();} catch (err) { return klTailApply(klFun(function(E) { return false;}, 1), err);} })() ;}, 1);;

defun("function", function(V2310) { return new Trampoline(primitive["shen.lookup-func"], V2310) ;}, 1);;

defun("shen.lookup-func", function(V2312) { return new Trampoline(primitive["get/or"], V2312, new Symbol("shen.lambda-form"), klFun(function() { return new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], V2312, " has no lambda expansion\n", new Symbol("shen.a")))}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);;

defun("shen.yacc", function(V2314) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2314)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defcc"), klTailApply(primitive["hd"], V2314))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2314))))))) === true) ? (new Trampoline(primitive["shen.yacc->shen"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2314)), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2314)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.yacc"))) : (err("no cond match"))) ;}, 1);;

defun("shen.yacc->shen", function(V2317, V2318) { return (function(){let CCRules = klTailApply(primitive["shen.split_cc_rules"], true, V2318, null); return (function(){let CCBody = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.cc_body"], X);}, 1), CCRules); return (function(){let YaccCases = klTailApply(primitive["shen.yacc_cases"], CCBody); return new Trampoline(primitive["cons"], new Symbol("define"), klTailApply(primitive["cons"], V2317, klTailApply(primitive["cons"], new Symbol("Stream"), klTailApply(primitive["cons"], new Symbol("->"), klTailApply(primitive["cons"], klTailApply(primitive["shen.kill-code"], YaccCases), null)))));})();})();})() ;}, 2);;

defun("shen.kill-code", function(V2320) { return (mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["occurrences"], new Symbol("kill"), V2320), 0)) === true) ? (new Trampoline(primitive["cons"], new Symbol("trap-error"), klTailApply(primitive["cons"], V2320, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], new Symbol("E"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.analyse-kill"), klTailApply(primitive["cons"], new Symbol("E"), null)), null))), null)))) : ((mustBoolean(true) === true) ? (V2320) : (err("no cond match"))) ;}, 1);;

defun("kill", function() { return new Trampoline(primitive["simple-error"], "yacc kill") ;}, 0);;

defun("shen.analyse-kill", function(V2322) { return (function(){let String = klTailApply(primitive["error-to-string"], V2322); return (mustBoolean(klTailApply(primitive["="], String, "yacc kill")) === true) ? (new Trampoline(primitive["fail"])) : (V2322);})() ;}, 1);;

defun("shen.split_cc_rules", function(V2328, V2329, V2330) { return (mustBoolean((mustBoolean(klTailApply(primitive["="], null, V2329)) && mustBoolean(klTailApply(primitive["="], null, V2330)))) === true) ? (null) : ((mustBoolean(klTailApply(primitive["="], null, V2329)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["shen.split_cc_rule"], V2328, klTailApply(primitive["reverse"], V2330), null), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2329)) && mustBoolean(klTailApply(primitive["="], new Symbol(";"), klTailApply(primitive["hd"], V2329))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["shen.split_cc_rule"], V2328, klTailApply(primitive["reverse"], V2330), null), klTailApply(primitive["shen.split_cc_rules"], V2328, klTailApply(primitive["tl"], V2329), null))) : ((mustBoolean(klTailApply(primitive["cons?"], V2329)) === true) ? (new Trampoline(primitive["shen.split_cc_rules"], V2328, klTailApply(primitive["tl"], V2329), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2329), V2330))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.split_cc_rules"))) : (err("no cond match")))))) ;}, 3);;

defun("shen.split_cc_rule", function(V2338, V2339, V2340) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2339)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":="), klTailApply(primitive["hd"], V2339))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2339))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2339)))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["reverse"], V2340), klTailApply(primitive["tl"], V2339))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2339)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":="), klTailApply(primitive["hd"], V2339))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2339))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2339)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("where"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2339))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2339))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2339)))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["reverse"], V2340), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2339)))), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2339)), null))), null))) : ((mustBoolean(klTailApply(primitive["="], null, V2339)) === true) ? ((function(){klTailApply(primitive["shen.semantic-completion-warning"], V2338, V2340); return new Trampoline(primitive["shen.split_cc_rule"], V2338, klTailApply(primitive["cons"], new Symbol(":="), klTailApply(primitive["cons"], klTailApply(primitive["shen.default_semantics"], klTailApply(primitive["reverse"], V2340)), null)), V2340);})()) : ((mustBoolean(klTailApply(primitive["cons?"], V2339)) === true) ? (new Trampoline(primitive["shen.split_cc_rule"], V2338, klTailApply(primitive["tl"], V2339), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2339), V2340))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.split_cc_rule"))) : (err("no cond match")))))) ;}, 3);;

defun("shen.semantic-completion-warning", function(V2351, V2352) { return (mustBoolean(klTailApply(primitive["="], true, V2351)) === true) ? ((function(){klTailApply(primitive["shen.prhush"], "warning: ", klTailApply(primitive["stoutput"])); return (function(){klTailApply(primitive["for-each"], klFun(function(X) { return new Trampoline(primitive["shen.prhush"], klTailApply(primitive["shen.app"], X, " ", new Symbol("shen.a")), klTailApply(primitive["stoutput"]));}, 1), klTailApply(primitive["reverse"], V2352)); return new Trampoline(primitive["shen.prhush"], "has no semantics.\n", klTailApply(primitive["stoutput"]));})();})()) : ((mustBoolean(true) === true) ? (new Symbol("shen.skip")) : (err("no cond match"))) ;}, 2);;

defun("shen.default_semantics", function(V2354) { return (mustBoolean(klTailApply(primitive["="], null, V2354)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2354)) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V2354))) && mustBoolean(klTailApply(primitive["shen.grammar_symbol?"], klTailApply(primitive["hd"], V2354))))))) === true) ? (new Trampoline(primitive["hd"], V2354)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2354)) && mustBoolean(klTailApply(primitive["shen.grammar_symbol?"], klTailApply(primitive["hd"], V2354))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("append"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2354), klTailApply(primitive["cons"], klTailApply(primitive["shen.default_semantics"], klTailApply(primitive["tl"], V2354)), null)))) : ((mustBoolean(klTailApply(primitive["cons?"], V2354)) === true) ? (new Trampoline(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2354), klTailApply(primitive["cons"], klTailApply(primitive["shen.default_semantics"], klTailApply(primitive["tl"], V2354)), null)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.default_semantics"))) : (err("no cond match")))))) ;}, 1);;

defun("shen.grammar_symbol?", function(V2356) { return (mustBoolean(klTailApply(primitive["symbol?"], V2356)) && mustBoolean((function(){let Cs = klTailApply(primitive["shen.strip-pathname"], klTailApply(primitive["explode"], V2356)); return (mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], Cs), "<")) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["reverse"], Cs)), ">")));})())) ;}, 1);;

defun("shen.yacc_cases", function(V2358) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2358)) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V2358))))) === true) ? (new Trampoline(primitive["hd"], V2358)) : ((mustBoolean(klTailApply(primitive["cons?"], V2358)) === true) ? ((function(){let P = new Symbol("YaccParse"); return new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], P, klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2358), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], P, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))), klTailApply(primitive["cons"], klTailApply(primitive["shen.yacc_cases"], klTailApply(primitive["tl"], V2358)), klTailApply(primitive["cons"], P, null)))), null))));})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.yacc_cases"))) : (err("no cond match")))) ;}, 1);;

defun("shen.cc_body", function(V2360) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2360)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2360))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2360)))))))) === true) ? (new Trampoline(primitive["shen.syntax"], klTailApply(primitive["hd"], V2360), new Symbol("Stream"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2360)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.cc_body"))) : (err("no cond match"))) ;}, 1);;

defun("shen.syntax", function(V2364, V2365, V2366) { return (mustBoolean((mustBoolean(klTailApply(primitive["="], null, V2364)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2366)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("where"), klTailApply(primitive["hd"], V2366))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2366))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2366)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2366))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["shen.semantics"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2366))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2365, null)), klTailApply(primitive["cons"], klTailApply(primitive["shen.semantics"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2366)))), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))))) : ((mustBoolean(klTailApply(primitive["="], null, V2364)) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2365, null)), klTailApply(primitive["cons"], klTailApply(primitive["shen.semantics"], V2366), null)))) : ((mustBoolean(klTailApply(primitive["cons?"], V2364)) === true) ? ((mustBoolean(klTailApply(primitive["shen.grammar_symbol?"], klTailApply(primitive["hd"], V2364))) === true) ? (new Trampoline(primitive["shen.recursive_descent"], V2364, V2365, V2366)) : ((mustBoolean(klTailApply(primitive["variable?"], klTailApply(primitive["hd"], V2364))) === true) ? (new Trampoline(primitive["shen.variable-match"], V2364, V2365, V2366)) : ((mustBoolean(klTailApply(primitive["shen.jump_stream?"], klTailApply(primitive["hd"], V2364))) === true) ? (new Trampoline(primitive["shen.jump_stream"], V2364, V2365, V2366)) : ((mustBoolean(klTailApply(primitive["shen.terminal?"], klTailApply(primitive["hd"], V2364))) === true) ? (new Trampoline(primitive["shen.check_stream"], V2364, V2365, V2366)) : ((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2364))) === true) ? (new Trampoline(primitive["shen.list-stream"], klTailApply(primitive["shen.decons"], klTailApply(primitive["hd"], V2364)), klTailApply(primitive["tl"], V2364), V2365, V2366)) : (new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], klTailApply(primitive["hd"], V2364), " is not legal syntax\n", new Symbol("shen.a"))))))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.syntax"))) : (err("no cond match"))))) ;}, 3);;

defun("shen.list-stream", function(V2371, V2372, V2373, V2374) { return (function(){let Test = klTailApply(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2373, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2373, null)), null)), null)), null))); return (function(){let Placeholder = klTailApply(primitive["gensym"], new Symbol("shen.place")); return (function(){let RunOn = klTailApply(primitive["shen.syntax"], V2372, klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2373, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], V2373, null)), null)), null))), V2374); return (function(){let Action = klTailApply(primitive["shen.insert-runon"], RunOn, Placeholder, klTailApply(primitive["shen.syntax"], V2371, klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2373, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], V2373, null)), null)), null))), Placeholder)); return new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], Test, klTailApply(primitive["cons"], Action, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))));})();})();})();})() ;}, 4);;

defun("shen.decons", function(V2376) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2376)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cons"), klTailApply(primitive["hd"], V2376))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2376))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2376)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2376))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2376))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2376)), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2376)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cons"), klTailApply(primitive["hd"], V2376))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2376))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2376)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2376))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2376)), klTailApply(primitive["shen.decons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2376)))))) : ((mustBoolean(true) === true) ? (V2376) : (err("no cond match")))) ;}, 1);;

defun("shen.insert-runon", function(V2391, V2392, V2393) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2393)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.pair"), klTailApply(primitive["hd"], V2393))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2393))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2393)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2393))))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2393))), V2392)))))))))))) === true) ? (V2391) : ((mustBoolean(klTailApply(primitive["cons?"], V2393)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.insert-runon"], V2391, V2392, Z);}, 1), V2393)) : ((mustBoolean(true) === true) ? (V2393) : (err("no cond match")))) ;}, 3);;

defun("shen.strip-pathname", function(V2399) { return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["element?"], ".", V2399))) === true) ? (V2399) : ((mustBoolean(klTailApply(primitive["cons?"], V2399)) === true) ? (new Trampoline(primitive["shen.strip-pathname"], klTailApply(primitive["tl"], V2399))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.strip-pathname"))) : (err("no cond match")))) ;}, 1);;

defun("shen.recursive_descent", function(V2403, V2404, V2405) { return (mustBoolean(klTailApply(primitive["cons?"], V2403)) === true) ? ((function(){let Test = klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2403), klTailApply(primitive["cons"], V2404, null)); return (function(){let Action = klTailApply(primitive["shen.syntax"], klTailApply(primitive["tl"], V2403), klTailApply(primitive["concat"], new Symbol("Parse_"), klTailApply(primitive["hd"], V2403)), V2405); return (function(){let Else = klTailApply(primitive["cons"], new Symbol("fail"), null); return new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], klTailApply(primitive["concat"], new Symbol("Parse_"), klTailApply(primitive["hd"], V2403)), klTailApply(primitive["cons"], Test, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("not"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), klTailApply(primitive["cons"], klTailApply(primitive["concat"], new Symbol("Parse_"), klTailApply(primitive["hd"], V2403)), null))), null)), klTailApply(primitive["cons"], Action, klTailApply(primitive["cons"], Else, null)))), null))));})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.recursive_descent"))) : (err("no cond match"))) ;}, 3);;

defun("shen.variable-match", function(V2409, V2410, V2411) { return (mustBoolean(klTailApply(primitive["cons?"], V2409)) === true) ? ((function(){let Test = klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2410, null)), null)); return (function(){let Action = klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], klTailApply(primitive["concat"], new Symbol("Parse_"), klTailApply(primitive["hd"], V2409)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2410, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["shen.syntax"], klTailApply(primitive["tl"], V2409), klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2410, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.hdtl"), klTailApply(primitive["cons"], V2410, null)), null))), V2411), null)))); return (function(){let Else = klTailApply(primitive["cons"], new Symbol("fail"), null); return new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], Test, klTailApply(primitive["cons"], Action, klTailApply(primitive["cons"], Else, null))));})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.variable-match"))) : (err("no cond match"))) ;}, 3);;

defun("shen.terminal?", function(V2421) { return (mustBoolean(klTailApply(primitive["cons?"], V2421)) === true) ? (false) : ((mustBoolean(klTailApply(primitive["variable?"], V2421)) === true) ? (false) : ((mustBoolean(true) === true) ? (true) : (err("no cond match")))) ;}, 1);;

defun("shen.jump_stream?", function(V2427) { return (mustBoolean(klTailApply(primitive["="], V2427, new Symbol("_"))) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match"))) ;}, 1);;

defun("shen.check_stream", function(V2431, V2432, V2433) { return (mustBoolean(klTailApply(primitive["cons?"], V2431)) === true) ? ((function(){let Test = klTailApply(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2432, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2431), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2432, null)), null)), null))), null))); return (function(){let Action = klTailApply(primitive["shen.syntax"], klTailApply(primitive["tl"], V2431), klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2432, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.hdtl"), klTailApply(primitive["cons"], V2432, null)), null))), V2433); return (function(){let Else = klTailApply(primitive["cons"], new Symbol("fail"), null); return new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], Test, klTailApply(primitive["cons"], Action, klTailApply(primitive["cons"], Else, null))));})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.check_stream"))) : (err("no cond match"))) ;}, 3);;

defun("shen.jump_stream", function(V2437, V2438, V2439) { return (mustBoolean(klTailApply(primitive["cons?"], V2437)) === true) ? ((function(){let Test = klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2438, null)), null)); return (function(){let Action = klTailApply(primitive["shen.syntax"], klTailApply(primitive["tl"], V2437), klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V2438, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.hdtl"), klTailApply(primitive["cons"], V2438, null)), null))), V2439); return (function(){let Else = klTailApply(primitive["cons"], new Symbol("fail"), null); return new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], Test, klTailApply(primitive["cons"], Action, klTailApply(primitive["cons"], Else, null))));})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.jump_stream"))) : (err("no cond match"))) ;}, 3);;

defun("shen.semantics", function(V2441) { return (mustBoolean(klTailApply(primitive["="], null, V2441)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["shen.grammar_symbol?"], V2441)) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.hdtl"), klTailApply(primitive["cons"], klTailApply(primitive["concat"], new Symbol("Parse_"), V2441), null))) : ((mustBoolean(klTailApply(primitive["variable?"], V2441)) === true) ? (new Trampoline(primitive["concat"], new Symbol("Parse_"), V2441)) : ((mustBoolean(klTailApply(primitive["cons?"], V2441)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.semantics"], Z);}, 1), V2441)) : ((mustBoolean(true) === true) ? (V2441) : (err("no cond match")))))) ;}, 1);;

defun("shen.snd-or-fail", function(V2449) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2449)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2449))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2449)))))))) === true) ? (new Trampoline(primitive["hd"], klTailApply(primitive["tl"], V2449))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["fail"])) : (err("no cond match"))) ;}, 1);;

defun("fail", function() { return new Symbol("shen.fail!") ;}, 0);;

defun("shen.pair", function(V2452, V2453) { return new Trampoline(primitive["cons"], V2452, klTailApply(primitive["cons"], V2453, null)) ;}, 2);;

defun("shen.hdtl", function(V2455) { return new Trampoline(primitive["hd"], klTailApply(primitive["tl"], V2455)) ;}, 1);;

defun("<!>", function(V2463) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2463)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2463))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2463)))))))) === true) ? (new Trampoline(primitive["cons"], null, klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2463), null))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["fail"])) : (err("no cond match"))) ;}, 1);;

defun("<e>", function(V2469) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2469)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2469))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2469)))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V2469), klTailApply(primitive["cons"], null, null))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("<e>"))) : (err("no cond match"))) ;}, 1);;

defun("read-char-code", function(V2471) { return new Trampoline(primitive["read-byte"], V2471) ;}, 1);;

defun("read-file-as-bytelist", function(V2473) { return new Trampoline(primitive["shen.read-file-as-Xlist"], V2473, klFun(function(S) { return new Trampoline(primitive["read-byte"], S);}, 1)) ;}, 1);;

defun("shen.read-file-as-Xlist", function(V2478, V2479) { return (function(){let Stream = klTailApply(primitive["open"], V2478, new Symbol("in")); return (function(){let X = klTailApply(V2479, Stream); return (function(){let Xs = klTailApply(primitive["shen.read-file-as-Xlist-help"], Stream, V2479, X, null); return (function(){let Close = klTailApply(primitive["close"], Stream); return new Trampoline(primitive["reverse"], Xs);})();})();})();})() ;}, 2);;

defun("shen.read-file-as-Xlist-help", function(V2484, V2485, V2486, V2487) { return (mustBoolean(klTailApply(primitive["="], -1, V2486)) === true) ? (V2487) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.read-file-as-Xlist-help"], V2484, V2485, klTailApply(V2485, V2484), klTailApply(primitive["cons"], V2486, V2487))) : (err("no cond match"))) ;}, 4);;

defun("read-file-as-string", function(V2489) { return (function(){let Stream = klTailApply(primitive["open"], V2489, new Symbol("in")); return new Trampoline(primitive["shen.rfas-h"], Stream, klTailApply(primitive["read-char-code"], Stream), "");})() ;}, 1);;

defun("shen.rfas-h", function(V2493, V2494, V2495) { return (mustBoolean(klTailApply(primitive["="], -1, V2494)) === true) ? ((function(){klTailApply(primitive["close"], V2493); return V2495;})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.rfas-h"], V2493, klTailApply(primitive["read-char-code"], V2493), klTailApply(primitive["cn"], V2495, klTailApply(primitive["n->string"], V2494)))) : (err("no cond match"))) ;}, 3);;

defun("input", function(V2497) { return new Trampoline(primitive["eval-kl"], klTailApply(primitive["read"], V2497)) ;}, 1);;

defun("input+", function(V2500, V2501) { return (function(){let Mono$qu = klTailApply(primitive["shen.monotype"], V2500); return (function(){let Input = klTailApply(primitive["read"], V2501); return (mustBoolean(klTailApply(primitive["="], false, klTailApply(primitive["shen.typecheck"], Input, klTailApply(primitive["shen.demodulate"], V2500)))) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "type error: ", klTailApply(primitive["shen.app"], Input, klTailApply(primitive["cn"], " is not of type ", klTailApply(primitive["shen.app"], V2500, "\n", new Symbol("shen.r"))), new Symbol("shen.r"))))) : (new Trampoline(primitive["eval-kl"], Input));})();})() ;}, 2);;

defun("shen.monotype", function(V2503) { return (mustBoolean(klTailApply(primitive["cons?"], V2503)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.monotype"], Z);}, 1), V2503)) : ((mustBoolean(true) === true) ? ((mustBoolean(klTailApply(primitive["variable?"], V2503)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "input+ expects a monotype: not ", klTailApply(primitive["shen.app"], V2503, "\n", new Symbol("shen.a"))))) : (V2503)) : (err("no cond match"))) ;}, 1);;

defun("read", function(V2505) { return new Trampoline(primitive["hd"], klTailApply(primitive["shen.read-loop"], V2505, klTailApply(primitive["read-char-code"], V2505), null)) ;}, 1);;

defun("it", function() { return new Trampoline(primitive["value"], new Symbol("shen.*it*")) ;}, 0);;

defun("shen.read-loop", function(V2513, V2514, V2515) { return (mustBoolean(klTailApply(primitive["="], 94, V2514)) === true) ? (new Trampoline(primitive["simple-error"], "read aborted")) : ((mustBoolean(klTailApply(primitive["="], -1, V2514)) === true) ? ((mustBoolean(klTailApply(primitive["empty?"], V2515)) === true) ? (new Trampoline(primitive["simple-error"], "error: empty stream")) : (new Trampoline(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), V2515, klFun(function(E) { return E;}, 1)))) : ((mustBoolean(klTailApply(primitive["shen.terminator?"], V2514)) === true) ? ((function(){let AllChars = klTailApply(primitive["append"], V2515, klTailApply(primitive["cons"], V2514, null)); return (function(){let It = klTailApply(primitive["shen.record-it"], AllChars); return (function(){let Read = klTailApply(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), AllChars, klFun(function(E) { return new Symbol("shen.nextbyte");}, 1)); return (mustBoolean((mustBoolean(klTailApply(primitive["="], Read, new Symbol("shen.nextbyte"))) || mustBoolean(klTailApply(primitive["empty?"], Read)))) === true) ? (new Trampoline(primitive["shen.read-loop"], V2513, klTailApply(primitive["read-char-code"], V2513), AllChars)) : (Read);})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.read-loop"], V2513, klTailApply(primitive["read-char-code"], V2513), klTailApply(primitive["append"], V2515, klTailApply(primitive["cons"], V2514, null)))) : (err("no cond match"))))) ;}, 3);;

defun("shen.terminator?", function(V2517) { return new Trampoline(primitive["element?"], V2517, klTailApply(primitive["cons"], 9, klTailApply(primitive["cons"], 10, klTailApply(primitive["cons"], 13, klTailApply(primitive["cons"], 32, klTailApply(primitive["cons"], 34, klTailApply(primitive["cons"], 41, klTailApply(primitive["cons"], 93, null)))))))) ;}, 1);;

defun("lineread", function(V2519) { return new Trampoline(primitive["shen.lineread-loop"], klTailApply(primitive["read-char-code"], V2519), null, V2519) ;}, 1);;

defun("shen.lineread-loop", function(V2524, V2525, V2526) { return (mustBoolean(klTailApply(primitive["="], -1, V2524)) === true) ? ((mustBoolean(klTailApply(primitive["empty?"], V2525)) === true) ? (new Trampoline(primitive["simple-error"], "empty stream")) : (new Trampoline(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), V2525, klFun(function(E) { return E;}, 1)))) : ((mustBoolean(klTailApply(primitive["="], V2524, klTailApply(primitive["shen.hat"]))) === true) ? (new Trampoline(primitive["simple-error"], "line read aborted")) : ((mustBoolean(klTailApply(primitive["element?"], V2524, klTailApply(primitive["cons"], klTailApply(primitive["shen.newline"]), klTailApply(primitive["cons"], klTailApply(primitive["shen.carriage-return"]), null)))) === true) ? ((function(){let Line = klTailApply(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), V2525, klFun(function(E) { return new Symbol("shen.nextline");}, 1)); return (function(){let It = klTailApply(primitive["shen.record-it"], V2525); return (mustBoolean((mustBoolean(klTailApply(primitive["="], Line, new Symbol("shen.nextline"))) || mustBoolean(klTailApply(primitive["empty?"], Line)))) === true) ? (new Trampoline(primitive["shen.lineread-loop"], klTailApply(primitive["read-char-code"], V2526), klTailApply(primitive["append"], V2525, klTailApply(primitive["cons"], V2524, null)), V2526)) : (Line);})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.lineread-loop"], klTailApply(primitive["read-char-code"], V2526), klTailApply(primitive["append"], V2525, klTailApply(primitive["cons"], V2524, null)), V2526)) : (err("no cond match"))))) ;}, 3);;

defun("shen.record-it", function(V2528) { return (function(){let TrimLeft = klTailApply(primitive["shen.trim-whitespace"], V2528); return (function(){let TrimRight = klTailApply(primitive["shen.trim-whitespace"], klTailApply(primitive["reverse"], TrimLeft)); return (function(){let Trimmed = klTailApply(primitive["reverse"], TrimRight); return new Trampoline(primitive["shen.record-it-h"], Trimmed);})();})();})() ;}, 1);;

defun("shen.trim-whitespace", function(V2530) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2530)) && mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V2530), klTailApply(primitive["cons"], 9, klTailApply(primitive["cons"], 10, klTailApply(primitive["cons"], 13, klTailApply(primitive["cons"], 32, null)))))))) === true) ? (new Trampoline(primitive["shen.trim-whitespace"], klTailApply(primitive["tl"], V2530))) : ((mustBoolean(true) === true) ? (V2530) : (err("no cond match"))) ;}, 1);;

defun("shen.record-it-h", function(V2532) { return (function(){klTailApply(primitive["set"], new Symbol("shen.*it*"), klTailApply(primitive["shen.cn-all"], klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["n->string"], X);}, 1), V2532))); return V2532;})() ;}, 1);;

defun("shen.cn-all", function(V2534) { return (mustBoolean(klTailApply(primitive["="], null, V2534)) === true) ? ("") : ((mustBoolean(klTailApply(primitive["cons?"], V2534)) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["hd"], V2534), klTailApply(primitive["shen.cn-all"], klTailApply(primitive["tl"], V2534)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.cn-all"))) : (err("no cond match")))) ;}, 1);;

defun("read-file", function(V2536) { return (function(){let Charlist = klTailApply(primitive["read-file-as-charlist"], V2536); return new Trampoline(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), Charlist, klFun(function(X) { return new Trampoline(primitive["shen.read-error"], X);}, 1));})() ;}, 1);;

defun("read-from-string", function(V2538) { return (function(){let Ns = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["string->n"], X);}, 1), klTailApply(primitive["explode"], V2538)); return new Trampoline(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), Ns, klFun(function(X) { return new Trampoline(primitive["shen.read-error"], X);}, 1));})() ;}, 1);;

defun("shen.read-error", function(V2546) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2546)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2546))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2546))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2546)))))))))) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "read error here:\n\n ", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.compress-50"], 50, klTailApply(primitive["hd"], V2546)), "\n", new Symbol("shen.a"))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "read error\n")) : (err("no cond match"))) ;}, 1);;

defun("shen.compress-50", function(V2553, V2554) { return (mustBoolean(klTailApply(primitive["="], null, V2554)) === true) ? ("") : ((mustBoolean(klTailApply(primitive["="], 0, V2553)) === true) ? ("") : ((mustBoolean(klTailApply(primitive["cons?"], V2554)) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["n->string"], klTailApply(primitive["hd"], V2554)), klTailApply(primitive["shen.compress-50"], klTailApply(primitive["-"], V2553, 1), klTailApply(primitive["tl"], V2554)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.compress-50"))) : (err("no cond match"))))) ;}, 2);;

defun("shen.<st_input>", function(V2556) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltlsb$gt = klTailApply(primitive["shen.<lsb>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltlsb$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput1$gt = klTailApply(primitive["shen.<st_input1>"], Parse$unshen$do$ltlsb$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput1$gt))) === true) ? ((function(){let Parse$unshen$do$ltrsb$gt = klTailApply(primitive["shen.<rsb>"], Parse$unshen$do$ltst$uninput1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrsb$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput2$gt = klTailApply(primitive["shen.<st_input2>"], Parse$unshen$do$ltrsb$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput2$gt), klTailApply(primitive["cons"], klTailApply(primitive["macroexpand"], klTailApply(primitive["shen.cons_form"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput1$gt))), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput2$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltlrb$gt = klTailApply(primitive["shen.<lrb>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltlrb$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput1$gt = klTailApply(primitive["shen.<st_input1>"], Parse$unshen$do$ltlrb$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput1$gt))) === true) ? ((function(){let Parse$unshen$do$ltrrb$gt = klTailApply(primitive["shen.<rrb>"], Parse$unshen$do$ltst$uninput1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrrb$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput2$gt = klTailApply(primitive["shen.<st_input2>"], Parse$unshen$do$ltrrb$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput2$gt), klTailApply(primitive["shen.package-macro"], klTailApply(primitive["macroexpand"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput1$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput2$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltlcurly$gt = klTailApply(primitive["shen.<lcurly>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltlcurly$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltlcurly$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol("{"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltrcurly$gt = klTailApply(primitive["shen.<rcurly>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrcurly$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltrcurly$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol("}"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltbar$gt = klTailApply(primitive["shen.<bar>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltbar$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltbar$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol("bar!"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltsemicolon$gt = klTailApply(primitive["shen.<semicolon>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsemicolon$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltsemicolon$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol(";"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltcolon$gt = klTailApply(primitive["shen.<colon>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcolon$gt))) === true) ? ((function(){let Parse$unshen$do$ltequal$gt = klTailApply(primitive["shen.<equal>"], Parse$unshen$do$ltcolon$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltequal$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltequal$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol(":="), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltcolon$gt = klTailApply(primitive["shen.<colon>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcolon$gt))) === true) ? ((function(){let Parse$unshen$do$ltminus$gt = klTailApply(primitive["shen.<minus>"], Parse$unshen$do$ltcolon$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltminus$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltminus$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol(":-"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltcolon$gt = klTailApply(primitive["shen.<colon>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcolon$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltcolon$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol(":"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltcomma$gt = klTailApply(primitive["shen.<comma>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcomma$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltcomma$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], klTailApply(primitive["intern"], ","), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltcomment$gt = klTailApply(primitive["shen.<comment>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcomment$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltcomment$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltatom$gt = klTailApply(primitive["shen.<atom>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltatom$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltatom$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], klTailApply(primitive["macroexpand"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltatom$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltwhitespaces$gt = klTailApply(primitive["shen.<whitespaces>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltwhitespaces$gt))) === true) ? ((function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltwhitespaces$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$un$lte$gt = klTailApply(primitive["<e>"], V2556); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), null)) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})() ;}, 1);;

defun("shen.<lsb>", function(V2558) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2558))) && mustBoolean(klTailApply(primitive["="], 91, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2558)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2558)), klTailApply(primitive["shen.hdtl"], V2558))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<rsb>", function(V2560) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2560))) && mustBoolean(klTailApply(primitive["="], 93, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2560)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2560)), klTailApply(primitive["shen.hdtl"], V2560))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<lcurly>", function(V2562) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2562))) && mustBoolean(klTailApply(primitive["="], 123, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2562)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2562)), klTailApply(primitive["shen.hdtl"], V2562))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<rcurly>", function(V2564) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2564))) && mustBoolean(klTailApply(primitive["="], 125, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2564)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2564)), klTailApply(primitive["shen.hdtl"], V2564))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<bar>", function(V2566) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2566))) && mustBoolean(klTailApply(primitive["="], 124, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2566)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2566)), klTailApply(primitive["shen.hdtl"], V2566))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<semicolon>", function(V2568) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2568))) && mustBoolean(klTailApply(primitive["="], 59, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2568)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2568)), klTailApply(primitive["shen.hdtl"], V2568))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<colon>", function(V2570) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2570))) && mustBoolean(klTailApply(primitive["="], 58, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2570)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2570)), klTailApply(primitive["shen.hdtl"], V2570))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<comma>", function(V2572) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2572))) && mustBoolean(klTailApply(primitive["="], 44, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2572)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2572)), klTailApply(primitive["shen.hdtl"], V2572))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<equal>", function(V2574) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2574))) && mustBoolean(klTailApply(primitive["="], 61, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2574)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2574)), klTailApply(primitive["shen.hdtl"], V2574))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<minus>", function(V2576) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2576))) && mustBoolean(klTailApply(primitive["="], 45, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2576)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2576)), klTailApply(primitive["shen.hdtl"], V2576))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<lrb>", function(V2578) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2578))) && mustBoolean(klTailApply(primitive["="], 40, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2578)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2578)), klTailApply(primitive["shen.hdtl"], V2578))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<rrb>", function(V2580) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2580))) && mustBoolean(klTailApply(primitive["="], 41, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2580)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2580)), klTailApply(primitive["shen.hdtl"], V2580))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<atom>", function(V2582) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltstr$gt = klTailApply(primitive["shen.<str>"], V2582); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstr$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltstr$gt), klTailApply(primitive["shen.control-chars"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltstr$gt)))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltnumber$gt = klTailApply(primitive["shen.<number>"], V2582); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltnumber$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltnumber$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltnumber$gt))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$unshen$do$ltsym$gt = klTailApply(primitive["shen.<sym>"], V2582); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsym$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltsym$gt), (mustBoolean(klTailApply(primitive["="], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsym$gt), "<>")) === true) ? (klTailApply(primitive["cons"], new Symbol("vector"), klTailApply(primitive["cons"], 0, null))) : (klTailApply(primitive["intern"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsym$gt))))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})()) : (YaccParse);})() ;}, 1);;

defun("shen.control-chars", function(V2584) { return (mustBoolean(klTailApply(primitive["="], null, V2584)) === true) ? ("") : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2584)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "c", klTailApply(primitive["hd"], V2584))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2584))) && mustBoolean(klTailApply(primitive["="], "#", klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2584)))))))))) === true) ? ((function(){let CodePoint = klTailApply(primitive["shen.code-point"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2584))); return (function(){let AfterCodePoint = klTailApply(primitive["shen.after-codepoint"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2584))); return new Trampoline(primitive["@s"], klTailApply(primitive["n->string"], klTailApply(primitive["shen.decimalise"], CodePoint)), klTailApply(primitive["shen.control-chars"], AfterCodePoint));})();})()) : ((mustBoolean(klTailApply(primitive["cons?"], V2584)) === true) ? (new Trampoline(primitive["@s"], klTailApply(primitive["hd"], V2584), klTailApply(primitive["shen.control-chars"], klTailApply(primitive["tl"], V2584)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.control-chars"))) : (err("no cond match"))))) ;}, 1);;

defun("shen.code-point", function(V2588) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2588)) && mustBoolean(klTailApply(primitive["="], ";", klTailApply(primitive["hd"], V2588))))) === true) ? ("") : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2588)) && mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V2588), klTailApply(primitive["cons"], "0", klTailApply(primitive["cons"], "1", klTailApply(primitive["cons"], "2", klTailApply(primitive["cons"], "3", klTailApply(primitive["cons"], "4", klTailApply(primitive["cons"], "5", klTailApply(primitive["cons"], "6", klTailApply(primitive["cons"], "7", klTailApply(primitive["cons"], "8", klTailApply(primitive["cons"], "9", klTailApply(primitive["cons"], "0", null))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V2588), klTailApply(primitive["shen.code-point"], klTailApply(primitive["tl"], V2588)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "code point parse error ", klTailApply(primitive["shen.app"], V2588, "\n", new Symbol("shen.a"))))) : (err("no cond match")))) ;}, 1);;

defun("shen.after-codepoint", function(V2594) { return (mustBoolean(klTailApply(primitive["="], null, V2594)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2594)) && mustBoolean(klTailApply(primitive["="], ";", klTailApply(primitive["hd"], V2594))))) === true) ? (new Trampoline(primitive["tl"], V2594)) : ((mustBoolean(klTailApply(primitive["cons?"], V2594)) === true) ? (new Trampoline(primitive["shen.after-codepoint"], klTailApply(primitive["tl"], V2594))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.after-codepoint"))) : (err("no cond match"))))) ;}, 1);;

defun("shen.decimalise", function(V2596) { return new Trampoline(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.digits->integers"], V2596)), 0) ;}, 1);;

defun("shen.digits->integers", function(V2602) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2602)) && mustBoolean(klTailApply(primitive["="], "0", klTailApply(primitive["hd"], V2602))))) === true) ? (new Trampoline(primitive["cons"], 0, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V2602)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2602)) && mustBoolean(klTailApply(primitive["="], "1", klTailApply(primitive["hd"], V2602))))) === true) ? (new Trampoline(primitive["cons"], 1, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V2602)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2602)) && mustBoolean(klTailApply(primitive["="], "2", klTailApply(primitive["hd"], V2602))))) === true) ? (new Trampoline(primitive["cons"], 2, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V2602)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2602)) && mustBoolean(klTailApply(primitive["="], "3", klTailApply(primitive["hd"], V2602))))) === true) ? (new Trampoline(primitive["cons"], 3, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V2602)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2602)) && mustBoolean(klTailApply(primitive["="], "4", klTailApply(primitive["hd"], V2602))))) === true) ? (new Trampoline(primitive["cons"], 4, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V2602)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2602)) && mustBoolean(klTailApply(primitive["="], "5", klTailApply(primitive["hd"], V2602))))) === true) ? (new Trampoline(primitive["cons"], 5, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V2602)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2602)) && mustBoolean(klTailApply(primitive["="], "6", klTailApply(primitive["hd"], V2602))))) === true) ? (new Trampoline(primitive["cons"], 6, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V2602)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2602)) && mustBoolean(klTailApply(primitive["="], "7", klTailApply(primitive["hd"], V2602))))) === true) ? (new Trampoline(primitive["cons"], 7, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V2602)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2602)) && mustBoolean(klTailApply(primitive["="], "8", klTailApply(primitive["hd"], V2602))))) === true) ? (new Trampoline(primitive["cons"], 8, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V2602)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2602)) && mustBoolean(klTailApply(primitive["="], "9", klTailApply(primitive["hd"], V2602))))) === true) ? (new Trampoline(primitive["cons"], 9, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V2602)))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match")))))))))))) ;}, 1);;

defun("shen.<sym>", function(V2604) { return (function(){let Parse$unshen$do$ltalpha$gt = klTailApply(primitive["shen.<alpha>"], V2604); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltalpha$gt))) === true) ? ((function(){let Parse$unshen$do$ltalphanums$gt = klTailApply(primitive["shen.<alphanums>"], Parse$unshen$do$ltalpha$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltalphanums$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltalphanums$gt), klTailApply(primitive["@s"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltalpha$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltalphanums$gt)))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})() ;}, 1);;

defun("shen.<alphanums>", function(V2606) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltalphanum$gt = klTailApply(primitive["shen.<alphanum>"], V2606); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltalphanum$gt))) === true) ? ((function(){let Parse$unshen$do$ltalphanums$gt = klTailApply(primitive["shen.<alphanums>"], Parse$unshen$do$ltalphanum$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltalphanums$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltalphanums$gt), klTailApply(primitive["@s"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltalphanum$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltalphanums$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$un$lte$gt = klTailApply(primitive["<e>"], V2606); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), "")) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<alphanum>", function(V2608) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltalpha$gt = klTailApply(primitive["shen.<alpha>"], V2608); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltalpha$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltalpha$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltalpha$gt))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$unshen$do$ltnum$gt = klTailApply(primitive["shen.<num>"], V2608); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltnum$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltnum$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltnum$gt))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<num>", function(V2610) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2610))) === true) ? ((function(){let Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2610)); return (mustBoolean(klTailApply(primitive["shen.numbyte?"], Parse$unChar)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2610)), klTailApply(primitive["shen.hdtl"], V2610))), klTailApply(primitive["n->string"], Parse$unChar))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.numbyte?", function(V2616) { return (mustBoolean(klTailApply(primitive["="], 48, V2616)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 49, V2616)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 50, V2616)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 51, V2616)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 52, V2616)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 53, V2616)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 54, V2616)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 55, V2616)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 56, V2616)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 57, V2616)) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match")))))))))))) ;}, 1);;

defun("shen.<alpha>", function(V2618) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2618))) === true) ? ((function(){let Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2618)); return (mustBoolean(klTailApply(primitive["shen.symbol-code?"], Parse$unChar)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2618)), klTailApply(primitive["shen.hdtl"], V2618))), klTailApply(primitive["n->string"], Parse$unChar))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.symbol-code?", function(V2620) { return (mustBoolean(klTailApply(primitive["="], V2620, 126)) || mustBoolean((mustBoolean((mustBoolean(klTailApply(primitive[">"], V2620, 94)) && mustBoolean(klTailApply(primitive["<"], V2620, 123)))) || mustBoolean((mustBoolean((mustBoolean(klTailApply(primitive[">"], V2620, 59)) && mustBoolean(klTailApply(primitive["<"], V2620, 91)))) || mustBoolean((mustBoolean((mustBoolean(klTailApply(primitive[">"], V2620, 41)) && mustBoolean((mustBoolean(klTailApply(primitive["<"], V2620, 58)) && mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], V2620, 44))))))) || mustBoolean((mustBoolean((mustBoolean(klTailApply(primitive[">"], V2620, 34)) && mustBoolean(klTailApply(primitive["<"], V2620, 40)))) || mustBoolean(klTailApply(primitive["="], V2620, 33))))))))))) ;}, 1);;

defun("shen.<str>", function(V2622) { return (function(){let Parse$unshen$do$ltdbq$gt = klTailApply(primitive["shen.<dbq>"], V2622); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdbq$gt))) === true) ? ((function(){let Parse$unshen$do$ltstrcontents$gt = klTailApply(primitive["shen.<strcontents>"], Parse$unshen$do$ltdbq$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstrcontents$gt))) === true) ? ((function(){let Parse$unshen$do$ltdbq$gt = klTailApply(primitive["shen.<dbq>"], Parse$unshen$do$ltstrcontents$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdbq$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdbq$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltstrcontents$gt))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})() ;}, 1);;

defun("shen.<dbq>", function(V2624) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2624))) === true) ? ((function(){let Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2624)); return (mustBoolean(klTailApply(primitive["="], Parse$unChar, 34)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2624)), klTailApply(primitive["shen.hdtl"], V2624))), Parse$unChar)) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<strcontents>", function(V2626) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltstrc$gt = klTailApply(primitive["shen.<strc>"], V2626); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstrc$gt))) === true) ? ((function(){let Parse$unshen$do$ltstrcontents$gt = klTailApply(primitive["shen.<strcontents>"], Parse$unshen$do$ltstrc$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstrcontents$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltstrcontents$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltstrc$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltstrcontents$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$un$lte$gt = klTailApply(primitive["<e>"], V2626); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), null)) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<byte>", function(V2628) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2628))) === true) ? ((function(){let Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2628)); return new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2628)), klTailApply(primitive["shen.hdtl"], V2628))), klTailApply(primitive["n->string"], Parse$unChar));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<strc>", function(V2630) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2630))) === true) ? ((function(){let Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2630)); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], Parse$unChar, 34))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2630)), klTailApply(primitive["shen.hdtl"], V2630))), klTailApply(primitive["n->string"], Parse$unChar))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<number>", function(V2632) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltminus$gt = klTailApply(primitive["shen.<minus>"], V2632); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltminus$gt))) === true) ? ((function(){let Parse$unshen$do$ltnumber$gt = klTailApply(primitive["shen.<number>"], Parse$unshen$do$ltminus$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltnumber$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltnumber$gt), klTailApply(primitive["-"], 0, klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltnumber$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltplus$gt = klTailApply(primitive["shen.<plus>"], V2632); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltplus$gt))) === true) ? ((function(){let Parse$unshen$do$ltnumber$gt = klTailApply(primitive["shen.<number>"], Parse$unshen$do$ltplus$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltnumber$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltnumber$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltnumber$gt))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltpredigits$gt = klTailApply(primitive["shen.<predigits>"], V2632); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpredigits$gt))) === true) ? ((function(){let Parse$unshen$do$ltstop$gt = klTailApply(primitive["shen.<stop>"], Parse$unshen$do$ltpredigits$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstop$gt))) === true) ? ((function(){let Parse$unshen$do$ltpostdigits$gt = klTailApply(primitive["shen.<postdigits>"], Parse$unshen$do$ltstop$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpostdigits$gt))) === true) ? ((function(){let Parse$unshen$do$ltE$gt = klTailApply(primitive["shen.<E>"], Parse$unshen$do$ltpostdigits$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltE$gt))) === true) ? ((function(){let Parse$unshen$do$ltlog10$gt = klTailApply(primitive["shen.<log10>"], Parse$unshen$do$ltE$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltlog10$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltlog10$gt), klTailApply(primitive["*"], klTailApply(primitive["shen.expt"], 10, klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltlog10$gt)), klTailApply(primitive["+"], klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpredigits$gt)), 0), klTailApply(primitive["shen.post"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpostdigits$gt), 1))))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], V2632); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? ((function(){let Parse$unshen$do$ltE$gt = klTailApply(primitive["shen.<E>"], Parse$unshen$do$ltdigits$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltE$gt))) === true) ? ((function(){let Parse$unshen$do$ltlog10$gt = klTailApply(primitive["shen.<log10>"], Parse$unshen$do$ltE$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltlog10$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltlog10$gt), klTailApply(primitive["*"], klTailApply(primitive["shen.expt"], 10, klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltlog10$gt)), klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt)), 0)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$ltpredigits$gt = klTailApply(primitive["shen.<predigits>"], V2632); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpredigits$gt))) === true) ? ((function(){let Parse$unshen$do$ltstop$gt = klTailApply(primitive["shen.<stop>"], Parse$unshen$do$ltpredigits$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstop$gt))) === true) ? ((function(){let Parse$unshen$do$ltpostdigits$gt = klTailApply(primitive["shen.<postdigits>"], Parse$unshen$do$ltstop$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpostdigits$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltpostdigits$gt), klTailApply(primitive["+"], klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpredigits$gt)), 0), klTailApply(primitive["shen.post"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpostdigits$gt), 1)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], V2632); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt)), 0))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})()) : (YaccParse);})() ;}, 1);;

defun("shen.<E>", function(V2634) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2634))) && mustBoolean(klTailApply(primitive["="], 101, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2634)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2634)), klTailApply(primitive["shen.hdtl"], V2634))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<log10>", function(V2636) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltminus$gt = klTailApply(primitive["shen.<minus>"], V2636); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltminus$gt))) === true) ? ((function(){let Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], Parse$unshen$do$ltminus$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["-"], 0, klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt)), 0)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], V2636); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt)), 0))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<plus>", function(V2638) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2638))) === true) ? ((function(){let Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2638)); return (mustBoolean(klTailApply(primitive["="], Parse$unChar, 43)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2638)), klTailApply(primitive["shen.hdtl"], V2638))), Parse$unChar)) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<stop>", function(V2640) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2640))) === true) ? ((function(){let Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2640)); return (mustBoolean(klTailApply(primitive["="], Parse$unChar, 46)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2640)), klTailApply(primitive["shen.hdtl"], V2640))), Parse$unChar)) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<predigits>", function(V2642) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], V2642); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$un$lte$gt = klTailApply(primitive["<e>"], V2642); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), null)) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<postdigits>", function(V2644) { return (function(){let Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], V2644); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt))) : (new Trampoline(primitive["fail"]));})() ;}, 1);;

defun("shen.<digits>", function(V2646) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltdigit$gt = klTailApply(primitive["shen.<digit>"], V2646); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigit$gt))) === true) ? ((function(){let Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], Parse$unshen$do$ltdigit$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigit$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$unshen$do$ltdigit$gt = klTailApply(primitive["shen.<digit>"], V2646); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigit$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigit$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigit$gt), null))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<digit>", function(V2648) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2648))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2648)); return (mustBoolean(klTailApply(primitive["shen.numbyte?"], Parse$unX)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2648)), klTailApply(primitive["shen.hdtl"], V2648))), klTailApply(primitive["shen.byte->digit"], Parse$unX))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.byte->digit", function(V2650) { return (mustBoolean(klTailApply(primitive["="], 48, V2650)) === true) ? (0) : ((mustBoolean(klTailApply(primitive["="], 49, V2650)) === true) ? (1) : ((mustBoolean(klTailApply(primitive["="], 50, V2650)) === true) ? (2) : ((mustBoolean(klTailApply(primitive["="], 51, V2650)) === true) ? (3) : ((mustBoolean(klTailApply(primitive["="], 52, V2650)) === true) ? (4) : ((mustBoolean(klTailApply(primitive["="], 53, V2650)) === true) ? (5) : ((mustBoolean(klTailApply(primitive["="], 54, V2650)) === true) ? (6) : ((mustBoolean(klTailApply(primitive["="], 55, V2650)) === true) ? (7) : ((mustBoolean(klTailApply(primitive["="], 56, V2650)) === true) ? (8) : ((mustBoolean(klTailApply(primitive["="], 57, V2650)) === true) ? (9) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.byte->digit"))) : (err("no cond match")))))))))))) ;}, 1);;

defun("shen.pre", function(V2655, V2656) { return (mustBoolean(klTailApply(primitive["="], null, V2655)) === true) ? (0) : ((mustBoolean(klTailApply(primitive["cons?"], V2655)) === true) ? (new Trampoline(primitive["+"], klTailApply(primitive["*"], klTailApply(primitive["shen.expt"], 10, V2656), klTailApply(primitive["hd"], V2655)), klTailApply(primitive["shen.pre"], klTailApply(primitive["tl"], V2655), klTailApply(primitive["+"], V2656, 1)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.pre"))) : (err("no cond match")))) ;}, 2);;

defun("shen.post", function(V2661, V2662) { return (mustBoolean(klTailApply(primitive["="], null, V2661)) === true) ? (0) : ((mustBoolean(klTailApply(primitive["cons?"], V2661)) === true) ? (new Trampoline(primitive["+"], klTailApply(primitive["*"], klTailApply(primitive["shen.expt"], 10, klTailApply(primitive["-"], 0, V2662)), klTailApply(primitive["hd"], V2661)), klTailApply(primitive["shen.post"], klTailApply(primitive["tl"], V2661), klTailApply(primitive["+"], V2662, 1)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.post"))) : (err("no cond match")))) ;}, 2);;

defun("shen.expt", function(V2667, V2668) { return (mustBoolean(klTailApply(primitive["="], 0, V2668)) === true) ? (1) : ((mustBoolean(klTailApply(primitive[">"], V2668, 0)) === true) ? (new Trampoline(primitive["*"], V2667, klTailApply(primitive["shen.expt"], V2667, klTailApply(primitive["-"], V2668, 1)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["*"], 1, klTailApply(primitive["/"], klTailApply(primitive["shen.expt"], V2667, klTailApply(primitive["+"], V2668, 1)), V2667))) : (err("no cond match")))) ;}, 2);;

defun("shen.<st_input1>", function(V2670) { return (function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], V2670); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt))) : (new Trampoline(primitive["fail"]));})() ;}, 1);;

defun("shen.<st_input2>", function(V2672) { return (function(){let Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], V2672); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt))) : (new Trampoline(primitive["fail"]));})() ;}, 1);;

defun("shen.<comment>", function(V2674) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltsingleline$gt = klTailApply(primitive["shen.<singleline>"], V2674); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsingleline$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltsingleline$gt), new Symbol("shen.skip"))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$unshen$do$ltmultiline$gt = klTailApply(primitive["shen.<multiline>"], V2674); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltmultiline$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltmultiline$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<singleline>", function(V2676) { return (function(){let Parse$unshen$do$ltbackslash$gt = klTailApply(primitive["shen.<backslash>"], V2676); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltbackslash$gt))) === true) ? ((function(){let Parse$unshen$do$ltbackslash$gt = klTailApply(primitive["shen.<backslash>"], Parse$unshen$do$ltbackslash$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltbackslash$gt))) === true) ? ((function(){let Parse$unshen$do$ltanysingle$gt = klTailApply(primitive["shen.<anysingle>"], Parse$unshen$do$ltbackslash$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltanysingle$gt))) === true) ? ((function(){let Parse$unshen$do$ltreturn$gt = klTailApply(primitive["shen.<return>"], Parse$unshen$do$ltanysingle$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltreturn$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltreturn$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})() ;}, 1);;

defun("shen.<backslash>", function(V2678) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2678))) && mustBoolean(klTailApply(primitive["="], 92, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2678)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2678)), klTailApply(primitive["shen.hdtl"], V2678))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<anysingle>", function(V2680) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltnon_return$gt = klTailApply(primitive["shen.<non-return>"], V2680); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltnon_return$gt))) === true) ? ((function(){let Parse$unshen$do$ltanysingle$gt = klTailApply(primitive["shen.<anysingle>"], Parse$unshen$do$ltnon_return$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltanysingle$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltanysingle$gt), new Symbol("shen.skip"))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$un$lte$gt = klTailApply(primitive["<e>"], V2680); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<non-return>", function(V2682) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2682))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2682)); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["element?"], Parse$unX, klTailApply(primitive["cons"], 10, klTailApply(primitive["cons"], 13, null))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2682)), klTailApply(primitive["shen.hdtl"], V2682))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<return>", function(V2684) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2684))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2684)); return (mustBoolean(klTailApply(primitive["element?"], Parse$unX, klTailApply(primitive["cons"], 10, klTailApply(primitive["cons"], 13, null)))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2684)), klTailApply(primitive["shen.hdtl"], V2684))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<multiline>", function(V2686) { return (function(){let Parse$unshen$do$ltbackslash$gt = klTailApply(primitive["shen.<backslash>"], V2686); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltbackslash$gt))) === true) ? ((function(){let Parse$unshen$do$lttimes$gt = klTailApply(primitive["shen.<times>"], Parse$unshen$do$ltbackslash$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$lttimes$gt))) === true) ? ((function(){let Parse$unshen$do$ltanymulti$gt = klTailApply(primitive["shen.<anymulti>"], Parse$unshen$do$lttimes$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltanymulti$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltanymulti$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})() ;}, 1);;

defun("shen.<times>", function(V2688) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2688))) && mustBoolean(klTailApply(primitive["="], 42, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2688)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2688)), klTailApply(primitive["shen.hdtl"], V2688))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.<anymulti>", function(V2690) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltcomment$gt = klTailApply(primitive["shen.<comment>"], V2690); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcomment$gt))) === true) ? ((function(){let Parse$unshen$do$ltanymulti$gt = klTailApply(primitive["shen.<anymulti>"], Parse$unshen$do$ltcomment$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltanymulti$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltanymulti$gt), new Symbol("shen.skip"))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let YaccParse = (function(){let Parse$unshen$do$lttimes$gt = klTailApply(primitive["shen.<times>"], V2690); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$lttimes$gt))) === true) ? ((function(){let Parse$unshen$do$ltbackslash$gt = klTailApply(primitive["shen.<backslash>"], Parse$unshen$do$lttimes$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltbackslash$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltbackslash$gt), new Symbol("shen.skip"))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2690))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2690)); return (function(){let Parse$unshen$do$ltanymulti$gt = klTailApply(primitive["shen.<anymulti>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2690)), klTailApply(primitive["shen.hdtl"], V2690))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltanymulti$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltanymulti$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})();})()) : (new Trampoline(primitive["fail"]))) : (YaccParse);})()) : (YaccParse);})() ;}, 1);;

defun("shen.<whitespaces>", function(V2692) { return (function(){let YaccParse = (function(){let Parse$unshen$do$ltwhitespace$gt = klTailApply(primitive["shen.<whitespace>"], V2692); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltwhitespace$gt))) === true) ? ((function(){let Parse$unshen$do$ltwhitespaces$gt = klTailApply(primitive["shen.<whitespaces>"], Parse$unshen$do$ltwhitespace$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltwhitespaces$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltwhitespaces$gt), new Symbol("shen.skip"))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){let Parse$unshen$do$ltwhitespace$gt = klTailApply(primitive["shen.<whitespace>"], V2692); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltwhitespace$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltwhitespace$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);;

defun("shen.<whitespace>", function(V2694) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2694))) === true) ? ((function(){let Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2694)); return (mustBoolean((function(){let Parse$unCase = Parse$unX; return (mustBoolean(klTailApply(primitive["="], Parse$unCase, 32)) || mustBoolean((mustBoolean(klTailApply(primitive["="], Parse$unCase, 13)) || mustBoolean((mustBoolean(klTailApply(primitive["="], Parse$unCase, 10)) || mustBoolean(klTailApply(primitive["="], Parse$unCase, 9)))))));})()) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V2694)), klTailApply(primitive["shen.hdtl"], V2694))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);;

defun("shen.cons_form", function(V2696) { return (mustBoolean(klTailApply(primitive["="], null, V2696)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2696)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2696))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2696)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2696))))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2696)), new Symbol("bar!"))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2696), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2696))))) : ((mustBoolean(klTailApply(primitive["cons?"], V2696)) === true) ? (new Trampoline(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2696), klTailApply(primitive["cons"], klTailApply(primitive["shen.cons_form"], klTailApply(primitive["tl"], V2696)), null)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.cons_form"))) : (err("no cond match"))))) ;}, 1);;

defun("shen.package-macro", function(V2701, V2702) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2701)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("$"), klTailApply(primitive["hd"], V2701))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2701))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2701)))))))))) === true) ? (new Trampoline(primitive["append"], klTailApply(primitive["explode"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2701))), V2702)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2701)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("package"), klTailApply(primitive["hd"], V2701))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2701))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("null"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2701)))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2701)))))))))))) === true) ? (new Trampoline(primitive["append"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2701))), V2702)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2701)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("package"), klTailApply(primitive["hd"], V2701))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2701))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2701)))))))))) === true) ? ((function(){let ListofExceptions = klTailApply(primitive["shen.eval-without-macros"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2701)))); return (function(){let External = klTailApply(primitive["shen.record-exceptions"], ListofExceptions, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2701))); return (function(){let PackageNameDot = klTailApply(primitive["intern"], klTailApply(primitive["cn"], klTailApply(primitive["str"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2701))), ".")); return (function(){let ExpPackageNameDot = klTailApply(primitive["explode"], PackageNameDot); return (function(){let Packaged = klTailApply(primitive["shen.packageh"], PackageNameDot, ListofExceptions, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2701))), ExpPackageNameDot); return (function(){let Internal = klTailApply(primitive["shen.record-internal"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2701)), klTailApply(primitive["shen.internal-symbols"], ExpPackageNameDot, Packaged)); return new Trampoline(primitive["append"], Packaged, V2702);})();})();})();})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], V2701, V2702)) : (err("no cond match"))))) ;}, 2);;

defun("shen.record-exceptions", function(V2705, V2706) { return (function(){let CurrExceptions = klTailApply(primitive["get/or"], V2706, new Symbol("shen.external-symbols"), klFun(function() { return null}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))); return (function(){let AllExceptions = klTailApply(primitive["union"], V2705, CurrExceptions); return new Trampoline(primitive["put"], V2706, new Symbol("shen.external-symbols"), AllExceptions, klTailApply(primitive["value"], new Symbol("*property-vector*")));})();})() ;}, 2);;

defun("shen.record-internal", function(V2709, V2710) { return new Trampoline(primitive["put"], V2709, new Symbol("shen.internal-symbols"), klTailApply(primitive["union"], V2710, klTailApply(primitive["get/or"], V2709, new Symbol("shen.internal-symbols"), klFun(function() { return null}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*")))), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 2);;

defun("shen.internal-symbols", function(V2721, V2722) { return (mustBoolean((mustBoolean(klTailApply(primitive["symbol?"], V2722)) && mustBoolean(klTailApply(primitive["shen.prefix?"], V2721, klTailApply(primitive["explode"], V2722))))) === true) ? (new Trampoline(primitive["cons"], V2722, null)) : ((mustBoolean(klTailApply(primitive["cons?"], V2722)) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["shen.internal-symbols"], V2721, klTailApply(primitive["hd"], V2722)), klTailApply(primitive["shen.internal-symbols"], V2721, klTailApply(primitive["tl"], V2722)))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match")))) ;}, 2);;

defun("shen.packageh", function(V2739, V2740, V2741, V2742) { return (mustBoolean(klTailApply(primitive["cons?"], V2741)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["shen.packageh"], V2739, V2740, klTailApply(primitive["hd"], V2741), V2742), klTailApply(primitive["shen.packageh"], V2739, V2740, klTailApply(primitive["tl"], V2741), V2742))) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.sysfunc?"], V2741)) || mustBoolean((mustBoolean(klTailApply(primitive["variable?"], V2741)) || mustBoolean(klTailApply(primitive["element?"], V2741, V2740)))))) === true) ? (V2741) : ((mustBoolean((mustBoolean(klTailApply(primitive["symbol?"], V2741)) && mustBoolean((function(){let ExplodeX = klTailApply(primitive["explode"], V2741); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["shen.prefix?"], klTailApply(primitive["cons"], "s", klTailApply(primitive["cons"], "h", klTailApply(primitive["cons"], "e", klTailApply(primitive["cons"], "n", klTailApply(primitive["cons"], ".", null))))), ExplodeX))) && mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["shen.prefix?"], V2742, ExplodeX))));})()))) === true) ? (new Trampoline(primitive["concat"], V2739, V2741)) : ((mustBoolean(true) === true) ? (V2741) : (err("no cond match"))))) ;}, 4);;

defun("shen.f_error", function(V2744) { return (function(){klTailApply(primitive["shen.prhush"], klTailApply(primitive["cn"], "partial function ", klTailApply(primitive["shen.app"], V2744, ";\n", new Symbol("shen.a"))), klTailApply(primitive["stoutput"])); return (function(){(mustBoolean((mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["shen.tracked?"], V2744))) && mustBoolean(klTailApply(primitive["y-or-n?"], klTailApply(primitive["cn"], "track ", klTailApply(primitive["shen.app"], V2744, "? ", new Symbol("shen.a"))))))) === true) ? (klTailApply(primitive["shen.track-function"], klTailApply(primitive["ps"], V2744))) : (new Symbol("shen.ok")); return new Trampoline(primitive["simple-error"], "aborted");})();})() ;}, 1);;

defun("shen.tracked?", function(V2746) { return new Trampoline(primitive["element?"], V2746, klTailApply(primitive["value"], new Symbol("shen.*tracking*"))) ;}, 1);;

defun("track", function(V2748) { return (function(){let Source = klTailApply(primitive["ps"], V2748); return new Trampoline(primitive["shen.track-function"], Source);})() ;}, 1);;

defun("shen.track-function", function(V2750) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2750)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defun"), klTailApply(primitive["hd"], V2750))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2750))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2750)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2750))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2750)))))))))))))))) === true) ? ((function(){let KL = klTailApply(primitive["cons"], new Symbol("defun"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2750)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2750))), klTailApply(primitive["cons"], klTailApply(primitive["shen.insert-tracking-code"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2750)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2750))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2750))))), null)))); return (function(){let Ob = klTailApply(primitive["eval-kl"], KL); return (function(){let Tr = klTailApply(primitive["set"], new Symbol("shen.*tracking*"), klTailApply(primitive["cons"], Ob, klTailApply(primitive["value"], new Symbol("shen.*tracking*")))); return Ob;})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.track-function"))) : (err("no cond match"))) ;}, 1);;

defun("shen.insert-tracking-code", function(V2754, V2755, V2756) { return new Trampoline(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("set"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("+"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), null)), klTailApply(primitive["cons"], 1, null))), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.input-track"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), null)), klTailApply(primitive["cons"], V2754, klTailApply(primitive["cons"], klTailApply(primitive["shen.cons_form"], V2755), null)))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.terpri-or-read-char"), null), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], V2756, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.output-track"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), null)), klTailApply(primitive["cons"], V2754, klTailApply(primitive["cons"], new Symbol("Result"), null)))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("set"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("-"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), null)), klTailApply(primitive["cons"], 1, null))), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.terpri-or-read-char"), null), klTailApply(primitive["cons"], new Symbol("Result"), null))), null))), null))), null)))), null))), null))), null))) ;}, 3);;

defun("step", function(V2762) { return (mustBoolean(klTailApply(primitive["="], new Symbol("+"), V2762)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*step*"), true)) : ((mustBoolean(klTailApply(primitive["="], new Symbol("-"), V2762)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*step*"), false)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "step expects a + or a -.\n")) : (err("no cond match")))) ;}, 1);;

defun("spy", function(V2768) { return (mustBoolean(klTailApply(primitive["="], new Symbol("+"), V2768)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*spy*"), true)) : ((mustBoolean(klTailApply(primitive["="], new Symbol("-"), V2768)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*spy*"), false)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "spy expects a + or a -.\n")) : (err("no cond match")))) ;}, 1);;

defun("shen.terpri-or-read-char", function() { return (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*step*"))) === true) ? (new Trampoline(primitive["shen.check-byte"], klTailApply(primitive["read-byte"], klTailApply(primitive["value"], new Symbol("*stinput*"))))) : (new Trampoline(primitive["nl"], 1)) ;}, 0);;

defun("shen.check-byte", function(V2774) { return (mustBoolean(klTailApply(primitive["="], V2774, klTailApply(primitive["shen.hat"]))) === true) ? (new Trampoline(primitive["simple-error"], "aborted")) : ((mustBoolean(true) === true) ? (true) : (err("no cond match"))) ;}, 1);;

defun("shen.input-track", function(V2778, V2779, V2780) { return (function(){klTailApply(primitive["shen.prhush"], klTailApply(primitive["cn"], "\n", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.spaces"], V2778), klTailApply(primitive["cn"], "<", klTailApply(primitive["shen.app"], V2778, klTailApply(primitive["cn"], "> Inputs to ", klTailApply(primitive["shen.app"], V2779, klTailApply(primitive["cn"], " \n", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.spaces"], V2778), "", new Symbol("shen.a"))), new Symbol("shen.a"))), new Symbol("shen.a"))), new Symbol("shen.a"))), klTailApply(primitive["stoutput"])); return new Trampoline(primitive["shen.recursively-print"], V2780);})() ;}, 3);;

defun("shen.recursively-print", function(V2782) { return (mustBoolean(klTailApply(primitive["="], null, V2782)) === true) ? (new Trampoline(primitive["shen.prhush"], " ==>", klTailApply(primitive["stoutput"]))) : ((mustBoolean(klTailApply(primitive["cons?"], V2782)) === true) ? ((function(){klTailApply(primitive["print"], klTailApply(primitive["hd"], V2782)); return (function(){klTailApply(primitive["shen.prhush"], ", ", klTailApply(primitive["stoutput"])); return new Trampoline(primitive["shen.recursively-print"], klTailApply(primitive["tl"], V2782));})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.recursively-print"))) : (err("no cond match")))) ;}, 1);;

defun("shen.spaces", function(V2784) { return (mustBoolean(klTailApply(primitive["="], 0, V2784)) === true) ? ("") : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cn"], " ", klTailApply(primitive["shen.spaces"], klTailApply(primitive["-"], V2784, 1)))) : (err("no cond match"))) ;}, 1);;

defun("shen.output-track", function(V2788, V2789, V2790) { return new Trampoline(primitive["shen.prhush"], klTailApply(primitive["cn"], "\n", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.spaces"], V2788), klTailApply(primitive["cn"], "<", klTailApply(primitive["shen.app"], V2788, klTailApply(primitive["cn"], "> Output from ", klTailApply(primitive["shen.app"], V2789, klTailApply(primitive["cn"], " \n", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.spaces"], V2788), klTailApply(primitive["cn"], "==> ", klTailApply(primitive["shen.app"], V2790, "", new Symbol("shen.s"))), new Symbol("shen.a"))), new Symbol("shen.a"))), new Symbol("shen.a"))), new Symbol("shen.a"))), klTailApply(primitive["stoutput"])) ;}, 3);;

defun("untrack", function(V2792) { return (function(){let Tracking = klTailApply(primitive["value"], new Symbol("shen.*tracking*")); return (function(){let Tracking = klTailApply(primitive["set"], new Symbol("shen.*tracking*"), klTailApply(primitive["remove"], V2792, Tracking)); return new Trampoline(primitive["eval"], klTailApply(primitive["ps"], V2792));})();})() ;}, 1);;

defun("profile", function(V2794) { return new Trampoline(primitive["shen.profile-help"], klTailApply(primitive["ps"], V2794)) ;}, 1);;

defun("shen.profile-help", function(V2800) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2800)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defun"), klTailApply(primitive["hd"], V2800))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2800))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2800)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2800))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2800)))))))))))))))) === true) ? ((function(){let G = klTailApply(primitive["gensym"], new Symbol("shen.f")); return (function(){let Profile = klTailApply(primitive["cons"], new Symbol("defun"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2800)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2800))), klTailApply(primitive["cons"], klTailApply(primitive["shen.profile-func"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2800)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2800))), klTailApply(primitive["cons"], G, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2800))))), null)))); return (function(){let Def = klTailApply(primitive["cons"], new Symbol("defun"), klTailApply(primitive["cons"], G, klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2800))), klTailApply(primitive["cons"], klTailApply(primitive["subst"], G, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2800)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2800))))), null)))); return (function(){let CompileProfile = klTailApply(primitive["shen.eval-without-macros"], Profile); return (function(){let CompileG = klTailApply(primitive["shen.eval-without-macros"], Def); return new Trampoline(primitive["hd"], klTailApply(primitive["tl"], V2800));})();})();})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "Cannot profile.\n")) : (err("no cond match"))) ;}, 1);;

defun("unprofile", function(V2802) { return new Trampoline(primitive["untrack"], V2802) ;}, 1);;

defun("shen.profile-func", function(V2806, V2807, V2808) { return new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Start"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], new Symbol("run"), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], V2808, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Finish"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("-"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], new Symbol("run"), null)), klTailApply(primitive["cons"], new Symbol("Start"), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Record"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.put-profile"), klTailApply(primitive["cons"], V2806, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("+"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.get-profile"), klTailApply(primitive["cons"], V2806, null)), klTailApply(primitive["cons"], new Symbol("Finish"), null))), null))), klTailApply(primitive["cons"], new Symbol("Result"), null)))), null)))), null)))), null)))) ;}, 3);;

defun("profile-results", function(V2810) { return (function(){let Results = klTailApply(primitive["shen.get-profile"], V2810); return (function(){let Initialise = klTailApply(primitive["shen.put-profile"], V2810, 0); return new Trampoline(primitive["@p"], V2810, Results);})();})() ;}, 1);;

defun("shen.get-profile", function(V2812) { return new Trampoline(primitive["get/or"], V2812, new Symbol("profile"), klFun(function() { return 0}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);;

defun("shen.put-profile", function(V2815, V2816) { return new Trampoline(primitive["put"], V2815, new Symbol("profile"), V2816, klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 2);;

defun("load", function(V2818) { return (function(){let Load = (function(){let Start = klTailApply(primitive["get-time"], new Symbol("run")); return (function(){let Result = klTailApply(primitive["shen.load-help"], klTailApply(primitive["value"], new Symbol("shen.*tc*")), klTailApply(primitive["read-file"], V2818)); return (function(){let Finish = klTailApply(primitive["get-time"], new Symbol("run")); return (function(){let Time = klTailApply(primitive["-"], Finish, Start); return (function(){let Message = klTailApply(primitive["shen.prhush"], klTailApply(primitive["cn"], "\nrun time: ", klTailApply(primitive["cn"], klTailApply(primitive["str"], Time), " secs\n")), klTailApply(primitive["stoutput"])); return Result;})();})();})();})();})(); return (function(){let Infs = (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*tc*"))) === true) ? (klTailApply(primitive["shen.prhush"], klTailApply(primitive["cn"], "\ntypechecked in ", klTailApply(primitive["shen.app"], klTailApply(primitive["inferences"]), " inferences\n", new Symbol("shen.a"))), klTailApply(primitive["stoutput"]))) : (new Symbol("shen.skip")); return new Symbol("loaded");})();})() ;}, 1);;

defun("shen.load-help", function(V2825, V2826) { return (mustBoolean(klTailApply(primitive["="], false, V2825)) === true) ? (new Trampoline(primitive["for-each"], klFun(function(X) { return new Trampoline(primitive["shen.prhush"], klTailApply(primitive["shen.app"], klTailApply(primitive["shen.eval-without-macros"], X), "\n", new Symbol("shen.s")), klTailApply(primitive["stoutput"]));}, 1), V2826)) : ((mustBoolean(true) === true) ? ((function(){let RemoveSynonyms = klTailApply(primitive["mapcan"], klFun(function(X) { return new Trampoline(primitive["shen.remove-synonyms"], X);}, 1), V2826); return (function(){let Table = klTailApply(primitive["mapcan"], klFun(function(X) { return new Trampoline(primitive["shen.typetable"], X);}, 1), RemoveSynonyms); return (function(){let Assume = klTailApply(primitive["for-each"], klFun(function(X) { return new Trampoline(primitive["shen.assumetype"], X);}, 1), Table); return (function(){ try { return klTailApply(primitive["for-each"], klFun(function(X) { return new Trampoline(primitive["shen.typecheck-and-load"], X);}, 1), RemoveSynonyms);} catch (err) { return klTailApply(klFun(function(E) { return new Trampoline(primitive["shen.unwind-types"], E, Table);}, 1), err);} })();})();})();})()) : (err("no cond match"))) ;}, 2);;

defun("shen.remove-synonyms", function(V2828) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2828)) && mustBoolean(klTailApply(primitive["="], new Symbol("shen.synonyms-help"), klTailApply(primitive["hd"], V2828))))) === true) ? ((function(){klTailApply(primitive["eval"], V2828); return null;})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], V2828, null)) : (err("no cond match"))) ;}, 1);;

defun("shen.typecheck-and-load", function(V2830) { return (function(){klTailApply(primitive["nl"], 1); return new Trampoline(primitive["shen.typecheck-and-evaluate"], V2830, klTailApply(primitive["gensym"], new Symbol("A")));})() ;}, 1);;

defun("shen.typetable", function(V2836) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2836)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("define"), klTailApply(primitive["hd"], V2836))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2836))))))) === true) ? ((function(){let Sig = klTailApply(primitive["compile"], klFun(function(Y) { return new Trampoline(primitive["shen.<sig+rest>"], Y);}, 1), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2836)), klFun(function(E) { return new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2836)), " lacks a proper signature.\n", new Symbol("shen.a")));}, 1)); return new Trampoline(primitive["cons"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2836)), Sig), null);})()) : ((mustBoolean(true) === true) ? (null) : (err("no cond match"))) ;}, 1);;

defun("shen.assumetype", function(V2838) { return (mustBoolean(klTailApply(primitive["cons?"], V2838)) === true) ? (new Trampoline(primitive["declare"], klTailApply(primitive["hd"], V2838), klTailApply(primitive["tl"], V2838))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.assumetype"))) : (err("no cond match"))) ;}, 1);;

defun("shen.unwind-types", function(V2845, V2846) { return (mustBoolean(klTailApply(primitive["="], null, V2846)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["error-to-string"], V2845))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2846)) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2846))))) === true) ? ((function(){klTailApply(primitive["shen.remtype"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2846))); return new Trampoline(primitive["shen.unwind-types"], V2845, klTailApply(primitive["tl"], V2846));})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.unwind-types"))) : (err("no cond match")))) ;}, 2);;

defun("shen.remtype", function(V2848) { return new Trampoline(primitive["set"], new Symbol("shen.*signedfuncs*"), klTailApply(primitive["shen.removetype"], V2848, klTailApply(primitive["value"], new Symbol("shen.*signedfuncs*")))) ;}, 1);;

defun("shen.removetype", function(V2856, V2857) { return (mustBoolean(klTailApply(primitive["="], null, V2857)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2857)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V2857))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2857)), V2856)))))) === true) ? (new Trampoline(primitive["shen.removetype"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V2857)), klTailApply(primitive["tl"], V2857))) : ((mustBoolean(klTailApply(primitive["cons?"], V2857)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V2857), klTailApply(primitive["shen.removetype"], V2856, klTailApply(primitive["tl"], V2857)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.removetype"))) : (err("no cond match"))))) ;}, 2);;

defun("shen.<sig+rest>", function(V2859) { return (function(){let Parse$unshen$do$ltsignature$gt = klTailApply(primitive["shen.<signature>"], V2859); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsignature$gt))) === true) ? ((function(){let Parse$un$lt$ex$gt = klTailApply(primitive["<!>"], Parse$unshen$do$ltsignature$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lt$ex$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lt$ex$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsignature$gt))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})() ;}, 1);;

defun("write-to-file", function(V2862, V2863) { return (function(){let Stream = klTailApply(primitive["open"], V2862, new Symbol("out")); return (function(){let String = (mustBoolean(klTailApply(primitive["string?"], V2863)) === true) ? (klTailApply(primitive["shen.app"], V2863, "\n\n", new Symbol("shen.a"))) : (klTailApply(primitive["shen.app"], V2863, "\n\n", new Symbol("shen.s"))); return (function(){let Write = klTailApply(primitive["pr"], String, Stream); return (function(){let Close = klTailApply(primitive["close"], Stream); return V2863;})();})();})();})() ;}, 2);;

defun("pr", function(V2866, V2867) { return (function(){ try { return klTailApply(primitive["shen.prh"], V2866, V2867, 0);} catch (err) { return klTailApply(klFun(function(E) { return V2866;}, 1), err);} })() ;}, 2);;

defun("shen.prh", function(V2871, V2872, V2873) { return new Trampoline(primitive["shen.prh"], V2871, V2872, klTailApply(primitive["shen.write-char-and-inc"], V2871, V2872, V2873)) ;}, 3);;

defun("shen.write-char-and-inc", function(V2877, V2878, V2879) { return (function(){klTailApply(primitive["write-byte"], klTailApply(primitive["string->n"], klTailApply(primitive["pos"], V2877, V2879)), V2878); return new Trampoline(primitive["+"], V2879, 1);})() ;}, 3);;

defun("print", function(V2881) { return (function(){let String = klTailApply(primitive["shen.insert"], V2881, "~S"); return (function(){let Print = klTailApply(primitive["shen.prhush"], String, klTailApply(primitive["stoutput"])); return V2881;})();})() ;}, 1);;

defun("shen.prhush", function(V2884, V2885) { return (mustBoolean(klTailApply(primitive["value"], new Symbol("*hush*"))) === true) ? (V2884) : (new Trampoline(primitive["pr"], V2884, V2885)) ;}, 2);;

defun("shen.mkstr", function(V2888, V2889) { return (mustBoolean(klTailApply(primitive["string?"], V2888)) === true) ? (new Trampoline(primitive["shen.mkstr-l"], klTailApply(primitive["shen.proc-nl"], V2888), V2889)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.mkstr-r"], klTailApply(primitive["cons"], new Symbol("shen.proc-nl"), klTailApply(primitive["cons"], V2888, null)), V2889)) : (err("no cond match"))) ;}, 2);;

defun("shen.mkstr-l", function(V2892, V2893) { return (mustBoolean(klTailApply(primitive["="], null, V2893)) === true) ? (V2892) : ((mustBoolean(klTailApply(primitive["cons?"], V2893)) === true) ? (new Trampoline(primitive["shen.mkstr-l"], klTailApply(primitive["shen.insert-l"], klTailApply(primitive["hd"], V2893), V2892), klTailApply(primitive["tl"], V2893))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.mkstr-l"))) : (err("no cond match")))) ;}, 2);;

defun("shen.insert-l", function(V2898, V2899) { return (mustBoolean(klTailApply(primitive["="], "", V2899)) === true) ? ("") : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V2899)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V2899, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V2899))) && mustBoolean(klTailApply(primitive["="], "A", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V2899), 0))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.app"), klTailApply(primitive["cons"], V2898, klTailApply(primitive["cons"], klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V2899)), klTailApply(primitive["cons"], new Symbol("shen.a"), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V2899)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V2899, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V2899))) && mustBoolean(klTailApply(primitive["="], "R", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V2899), 0))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.app"), klTailApply(primitive["cons"], V2898, klTailApply(primitive["cons"], klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V2899)), klTailApply(primitive["cons"], new Symbol("shen.r"), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V2899)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V2899, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V2899))) && mustBoolean(klTailApply(primitive["="], "S", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V2899), 0))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.app"), klTailApply(primitive["cons"], V2898, klTailApply(primitive["cons"], klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V2899)), klTailApply(primitive["cons"], new Symbol("shen.s"), null))))) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V2899)) === true) ? (new Trampoline(primitive["shen.factor-cn"], klTailApply(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], klTailApply(primitive["pos"], V2899, 0), klTailApply(primitive["cons"], klTailApply(primitive["shen.insert-l"], V2898, klTailApply(primitive["tlstr"], V2899)), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2899)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cn"), klTailApply(primitive["hd"], V2899))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2899))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2899)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2899))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2899)), klTailApply(primitive["cons"], klTailApply(primitive["shen.insert-l"], V2898, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2899)))), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2899)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.app"), klTailApply(primitive["hd"], V2899))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2899))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2899)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2899))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2899)))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.app"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2899)), klTailApply(primitive["cons"], klTailApply(primitive["shen.insert-l"], V2898, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2899)))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2899))))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.insert-l"))) : (err("no cond match"))))))))) ;}, 2);;

defun("shen.factor-cn", function(V2901) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2901)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cn"), klTailApply(primitive["hd"], V2901))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2901))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2901)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2901))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cn"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2901)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2901)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2901))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2901)))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2901))))) && mustBoolean((mustBoolean(klTailApply(primitive["string?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2901)))) && mustBoolean(klTailApply(primitive["string?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2901))))))))))))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], klTailApply(primitive["cn"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2901)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2901)))))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2901)))))))) : ((mustBoolean(true) === true) ? (V2901) : (err("no cond match"))) ;}, 1);;

defun("shen.proc-nl", function(V2903) { return (mustBoolean(klTailApply(primitive["="], "", V2903)) === true) ? ("") : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V2903)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V2903, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V2903))) && mustBoolean(klTailApply(primitive["="], "%", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V2903), 0))))))))) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["n->string"], 10), klTailApply(primitive["shen.proc-nl"], klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V2903))))) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V2903)) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["pos"], V2903, 0), klTailApply(primitive["shen.proc-nl"], klTailApply(primitive["tlstr"], V2903)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.proc-nl"))) : (err("no cond match"))))) ;}, 1);;

defun("shen.mkstr-r", function(V2906, V2907) { return (mustBoolean(klTailApply(primitive["="], null, V2907)) === true) ? (V2906) : ((mustBoolean(klTailApply(primitive["cons?"], V2907)) === true) ? (new Trampoline(primitive["shen.mkstr-r"], klTailApply(primitive["cons"], new Symbol("shen.insert"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V2907), klTailApply(primitive["cons"], V2906, null))), klTailApply(primitive["tl"], V2907))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.mkstr-r"))) : (err("no cond match")))) ;}, 2);;

defun("shen.insert", function(V2910, V2911) { return new Trampoline(primitive["shen.insert-h"], V2910, V2911, "") ;}, 2);;

defun("shen.insert-h", function(V2917, V2918, V2919) { return (mustBoolean(klTailApply(primitive["="], "", V2918)) === true) ? (V2919) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V2918)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V2918, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V2918))) && mustBoolean(klTailApply(primitive["="], "A", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V2918), 0))))))))) === true) ? (new Trampoline(primitive["cn"], V2919, klTailApply(primitive["shen.app"], V2917, klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V2918)), new Symbol("shen.a")))) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V2918)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V2918, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V2918))) && mustBoolean(klTailApply(primitive["="], "R", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V2918), 0))))))))) === true) ? (new Trampoline(primitive["cn"], V2919, klTailApply(primitive["shen.app"], V2917, klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V2918)), new Symbol("shen.r")))) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V2918)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V2918, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V2918))) && mustBoolean(klTailApply(primitive["="], "S", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V2918), 0))))))))) === true) ? (new Trampoline(primitive["cn"], V2919, klTailApply(primitive["shen.app"], V2917, klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V2918)), new Symbol("shen.s")))) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V2918)) === true) ? (new Trampoline(primitive["shen.insert-h"], V2917, klTailApply(primitive["tlstr"], V2918), klTailApply(primitive["cn"], V2919, klTailApply(primitive["pos"], V2918, 0)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.insert-h"))) : (err("no cond match"))))))) ;}, 3);;

defun("shen.app", function(V2923, V2924, V2925) { return new Trampoline(primitive["cn"], klTailApply(primitive["shen.arg->str"], V2923, V2925), V2924) ;}, 3);;

defun("shen.arg->str", function(V2933, V2934) { return (mustBoolean(klTailApply(primitive["="], V2933, klTailApply(primitive["fail"]))) === true) ? ("...") : ((mustBoolean(klTailApply(primitive["shen.list?"], V2933)) === true) ? (new Trampoline(primitive["shen.list->str"], V2933, V2934)) : ((mustBoolean(klTailApply(primitive["string?"], V2933)) === true) ? (new Trampoline(primitive["shen.str->str"], V2933, V2934)) : ((mustBoolean(klTailApply(primitive["absvector?"], V2933)) === true) ? (new Trampoline(primitive["shen.vector->str"], V2933, V2934)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.atom->str"], V2933)) : (err("no cond match")))))) ;}, 2);;

defun("shen.list->str", function(V2937, V2938) { return (mustBoolean(klTailApply(primitive["="], new Symbol("shen.r"), V2938)) === true) ? (new Trampoline(primitive["@s"], "(", klTailApply(primitive["@s"], klTailApply(primitive["shen.iter-list"], V2937, new Symbol("shen.r"), klTailApply(primitive["shen.maxseq"])), ")"))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["@s"], "[", klTailApply(primitive["@s"], klTailApply(primitive["shen.iter-list"], V2937, V2938, klTailApply(primitive["shen.maxseq"])), "]"))) : (err("no cond match"))) ;}, 2);;

defun("shen.maxseq", function() { return new Trampoline(primitive["value"], new Symbol("*maximum-print-sequence-size*")) ;}, 0);;

defun("shen.iter-list", function(V2952, V2953, V2954) { return (mustBoolean(klTailApply(primitive["="], null, V2952)) === true) ? ("") : ((mustBoolean(klTailApply(primitive["="], 0, V2954)) === true) ? ("... etc") : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2952)) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V2952))))) === true) ? (new Trampoline(primitive["shen.arg->str"], klTailApply(primitive["hd"], V2952), V2953)) : ((mustBoolean(klTailApply(primitive["cons?"], V2952)) === true) ? (new Trampoline(primitive["@s"], klTailApply(primitive["shen.arg->str"], klTailApply(primitive["hd"], V2952), V2953), klTailApply(primitive["@s"], " ", klTailApply(primitive["shen.iter-list"], klTailApply(primitive["tl"], V2952), V2953, klTailApply(primitive["-"], V2954, 1))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["@s"], "|", klTailApply(primitive["@s"], " ", klTailApply(primitive["shen.arg->str"], V2952, V2953)))) : (err("no cond match")))))) ;}, 3);;

defun("shen.str->str", function(V2961, V2962) { return (mustBoolean(klTailApply(primitive["="], new Symbol("shen.a"), V2962)) === true) ? (V2961) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["@s"], klTailApply(primitive["n->string"], 34), klTailApply(primitive["@s"], V2961, klTailApply(primitive["n->string"], 34)))) : (err("no cond match"))) ;}, 2);;

defun("shen.vector->str", function(V2965, V2966) { return (mustBoolean(klTailApply(primitive["shen.print-vector?"], V2965)) === true) ? (new Trampoline(klTailApply(primitive["function"], klTailApply(primitive["<-address"], V2965, 0)), V2965)) : ((mustBoolean(klTailApply(primitive["vector?"], V2965)) === true) ? (new Trampoline(primitive["@s"], "<", klTailApply(primitive["@s"], klTailApply(primitive["shen.iter-vector"], V2965, 1, V2966, klTailApply(primitive["shen.maxseq"])), ">"))) : (new Trampoline(primitive["@s"], "<", klTailApply(primitive["@s"], "<", klTailApply(primitive["@s"], klTailApply(primitive["shen.iter-vector"], V2965, 0, V2966, klTailApply(primitive["shen.maxseq"])), ">>"))))) ;}, 2);;

defun("shen.print-vector?", function(V2968) { return (function(){let Zero = klTailApply(primitive["<-address"], V2968, 0); return (mustBoolean(klTailApply(primitive["="], Zero, new Symbol("shen.tuple"))) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], Zero, new Symbol("shen.pvar"))) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], Zero, new Symbol("shen.dictionary"))) === true) ? (true) : ((mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["number?"], Zero))) === true) ? (new Trampoline(primitive["shen.fbound?"], Zero)) : (false))));})() ;}, 1);;

defun("shen.fbound?", function(V2970) { return (function(){ try { return (function(){klTailApply(primitive["shen.lookup-func"], V2970); return true;})();} catch (err) { return klTailApply(klFun(function(E) { return false;}, 1), err);} })() ;}, 1);;

defun("shen.tuple", function(V2972) { return new Trampoline(primitive["cn"], "(@p ", klTailApply(primitive["shen.app"], klTailApply(primitive["<-address"], V2972, 1), klTailApply(primitive["cn"], " ", klTailApply(primitive["shen.app"], klTailApply(primitive["<-address"], V2972, 2), ")", new Symbol("shen.s"))), new Symbol("shen.s"))) ;}, 1);;

defun("shen.dictionary", function(V2974) { return "(dict ...)" ;}, 1);;

defun("shen.iter-vector", function(V2985, V2986, V2987, V2988) { return (mustBoolean(klTailApply(primitive["="], 0, V2988)) === true) ? ("... etc") : ((mustBoolean(true) === true) ? ((function(){let Item = klTailApply(primitive["<-address/or"], V2985, V2986, klFun(function() { return new Symbol("shen.out-of-bounds")}, 0)); return (function(){let Next = klTailApply(primitive["<-address/or"], V2985, klTailApply(primitive["+"], V2986, 1), klFun(function() { return new Symbol("shen.out-of-bounds")}, 0)); return (mustBoolean(klTailApply(primitive["="], Item, new Symbol("shen.out-of-bounds"))) === true) ? ("") : ((mustBoolean(klTailApply(primitive["="], Next, new Symbol("shen.out-of-bounds"))) === true) ? (new Trampoline(primitive["shen.arg->str"], Item, V2987)) : (new Trampoline(primitive["@s"], klTailApply(primitive["shen.arg->str"], Item, V2987), klTailApply(primitive["@s"], " ", klTailApply(primitive["shen.iter-vector"], V2985, klTailApply(primitive["+"], V2986, 1), V2987, klTailApply(primitive["-"], V2988, 1))))));})();})()) : (err("no cond match"))) ;}, 4);;

defun("shen.atom->str", function(V2990) { return (function(){ try { return klTailApply(primitive["str"], V2990);} catch (err) { return klTailApply(klFun(function(E) { return new Trampoline(primitive["shen.funexstring"]);}, 1), err);} })() ;}, 1);;

defun("shen.funexstring", function() { return new Trampoline(primitive["@s"], "", klTailApply(primitive["@s"], "f", klTailApply(primitive["@s"], "u", klTailApply(primitive["@s"], "n", klTailApply(primitive["@s"], "e", klTailApply(primitive["@s"], klTailApply(primitive["shen.arg->str"], klTailApply(primitive["gensym"], klTailApply(primitive["intern"], "x")), new Symbol("shen.a")), "")))))) ;}, 0);;

defun("shen.list?", function(V2992) { return (mustBoolean(klTailApply(primitive["empty?"], V2992)) || mustBoolean(klTailApply(primitive["cons?"], V2992))) ;}, 1);;

defun("macroexpand", function(V2994) { return (function(){let Y = klTailApply(primitive["shen.compose"], klTailApply(primitive["value"], new Symbol("*macros*")), V2994); return (mustBoolean(klTailApply(primitive["="], V2994, Y)) === true) ? (V2994) : (new Trampoline(primitive["shen.walk"], klFun(function(Z) { return new Trampoline(primitive["macroexpand"], Z);}, 1), Y));})() ;}, 1);;

defun("shen.error-macro", function(V2996) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2996)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("error"), klTailApply(primitive["hd"], V2996))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2996))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("simple-error"), klTailApply(primitive["cons"], klTailApply(primitive["shen.mkstr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2996)), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2996))), null))) : ((mustBoolean(true) === true) ? (V2996) : (err("no cond match"))) ;}, 1);;

defun("shen.output-macro", function(V2998) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2998)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("output"), klTailApply(primitive["hd"], V2998))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2998))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.prhush"), klTailApply(primitive["cons"], klTailApply(primitive["shen.mkstr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2998)), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2998))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stoutput"), null), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V2998)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("pr"), klTailApply(primitive["hd"], V2998))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V2998))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V2998)))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("pr"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V2998)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stoutput"), null), null)))) : ((mustBoolean(true) === true) ? (V2998) : (err("no cond match")))) ;}, 1);;

defun("shen.make-string-macro", function(V3000) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3000)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("make-string"), klTailApply(primitive["hd"], V3000))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3000))))))) === true) ? (new Trampoline(primitive["shen.mkstr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3000)), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3000)))) : ((mustBoolean(true) === true) ? (V3000) : (err("no cond match"))) ;}, 1);;

defun("shen.input-macro", function(V3002) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3002)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("lineread"), klTailApply(primitive["hd"], V3002))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V3002))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("lineread"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3002)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("input"), klTailApply(primitive["hd"], V3002))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V3002))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("input"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3002)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("read"), klTailApply(primitive["hd"], V3002))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V3002))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("read"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3002)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("input+"), klTailApply(primitive["hd"], V3002))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3002))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3002)))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("input+"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3002)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3002)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("read-byte"), klTailApply(primitive["hd"], V3002))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V3002))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("read-byte"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3002)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("read-char-code"), klTailApply(primitive["hd"], V3002))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V3002))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("read-char-code"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null))) : ((mustBoolean(true) === true) ? (V3002) : (err("no cond match")))))))) ;}, 1);;

defun("shen.compose", function(V3005, V3006) { return (mustBoolean(klTailApply(primitive["="], null, V3005)) === true) ? (V3006) : ((mustBoolean(klTailApply(primitive["cons?"], V3005)) === true) ? (new Trampoline(primitive["shen.compose"], klTailApply(primitive["tl"], V3005), klTailApply(klTailApply(primitive["hd"], V3005), V3006))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.compose"))) : (err("no cond match")))) ;}, 2);;

defun("shen.compile-macro", function(V3008) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3008)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("compile"), klTailApply(primitive["hd"], V3008))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3008))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3008)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3008))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("compile"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3008)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3008))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], new Symbol("E"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], new Symbol("E"), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("error"), klTailApply(primitive["cons"], "parse error here: ~S~%", klTailApply(primitive["cons"], new Symbol("E"), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("error"), klTailApply(primitive["cons"], "parse error~%", null)), null)))), null))), null))))) : ((mustBoolean(true) === true) ? (V3008) : (err("no cond match"))) ;}, 1);;

defun("shen.prolog-macro", function(V3010) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3010)) && mustBoolean(klTailApply(primitive["="], new Symbol("prolog?"), klTailApply(primitive["hd"], V3010))))) === true) ? ((function(){let F = klTailApply(primitive["gensym"], new Symbol("shen.f")); return (function(){let Receive = klTailApply(primitive["shen.receive-terms"], klTailApply(primitive["tl"], V3010)); return (function(){let PrologDef = klTailApply(primitive["eval"], klTailApply(primitive["append"], klTailApply(primitive["cons"], new Symbol("defprolog"), klTailApply(primitive["cons"], F, null)), klTailApply(primitive["append"], Receive, klTailApply(primitive["append"], klTailApply(primitive["cons"], new Symbol("<--"), null), klTailApply(primitive["append"], klTailApply(primitive["shen.pass-literals"], klTailApply(primitive["tl"], V3010)), klTailApply(primitive["cons"], new Symbol(";"), null)))))); return (function(){let Query = klTailApply(primitive["cons"], F, klTailApply(primitive["append"], Receive, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.start-new-prolog-process"), null), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("freeze"), klTailApply(primitive["cons"], true, null)), null)))); return Query;})();})();})();})()) : ((mustBoolean(true) === true) ? (V3010) : (err("no cond match"))) ;}, 1);;

defun("shen.receive-terms", function(V3016) { return (mustBoolean(klTailApply(primitive["="], null, V3016)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3016)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V3016))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("receive"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V3016)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V3016)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V3016))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V3016))), klTailApply(primitive["shen.receive-terms"], klTailApply(primitive["tl"], V3016)))) : ((mustBoolean(klTailApply(primitive["cons?"], V3016)) === true) ? (new Trampoline(primitive["shen.receive-terms"], klTailApply(primitive["tl"], V3016))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.receive-terms"))) : (err("no cond match"))))) ;}, 1);;

defun("shen.pass-literals", function(V3020) { return (mustBoolean(klTailApply(primitive["="], null, V3020)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3020)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V3020))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("receive"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V3020)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V3020)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V3020))))))))))))) === true) ? (new Trampoline(primitive["shen.pass-literals"], klTailApply(primitive["tl"], V3020))) : ((mustBoolean(klTailApply(primitive["cons?"], V3020)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V3020), klTailApply(primitive["shen.pass-literals"], klTailApply(primitive["tl"], V3020)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.pass-literals"))) : (err("no cond match"))))) ;}, 1);;

defun("shen.defprolog-macro", function(V3022) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3022)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defprolog"), klTailApply(primitive["hd"], V3022))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3022))))))) === true) ? (new Trampoline(primitive["compile"], klFun(function(Y) { return new Trampoline(primitive["shen.<defprolog>"], Y);}, 1), klTailApply(primitive["tl"], V3022), klFun(function(Y) { return new Trampoline(primitive["shen.prolog-error"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3022)), Y);}, 1))) : ((mustBoolean(true) === true) ? (V3022) : (err("no cond match"))) ;}, 1);;

defun("shen.datatype-macro", function(V3024) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3024)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("datatype"), klTailApply(primitive["hd"], V3024))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3024))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.process-datatype"), klTailApply(primitive["cons"], klTailApply(primitive["shen.intern-type"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3024))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("compile"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], new Symbol("X"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.<datatype-rules>"), klTailApply(primitive["cons"], new Symbol("X"), null)), null))), klTailApply(primitive["cons"], klTailApply(primitive["shen.rcons_form"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3024))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("function"), klTailApply(primitive["cons"], new Symbol("shen.datatype-error"), null)), null)))), null)))) : ((mustBoolean(true) === true) ? (V3024) : (err("no cond match"))) ;}, 1);;

defun("shen.intern-type", function(V3026) { return new Trampoline(primitive["intern"], klTailApply(primitive["cn"], "type#", klTailApply(primitive["str"], V3026))) ;}, 1);;

defun("shen.@s-macro", function(V3028) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3028)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("@s"), klTailApply(primitive["hd"], V3028))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3028))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3028)))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3028))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("@s"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3028)), klTailApply(primitive["cons"], klTailApply(primitive["shen.@s-macro"], klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3028)))), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3028)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("@s"), klTailApply(primitive["hd"], V3028))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3028))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3028)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3028))))) && mustBoolean(klTailApply(primitive["string?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3028)))))))))))))) === true) ? ((function(){let E = klTailApply(primitive["explode"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3028))); return (mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["length"], E), 1)) === true) ? (new Trampoline(primitive["shen.@s-macro"], klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["append"], E, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3028)))))) : (V3028);})()) : ((mustBoolean(true) === true) ? (V3028) : (err("no cond match")))) ;}, 1);;

defun("shen.synonyms-macro", function(V3030) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3030)) && mustBoolean(klTailApply(primitive["="], new Symbol("synonyms"), klTailApply(primitive["hd"], V3030))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.synonyms-help"), klTailApply(primitive["cons"], klTailApply(primitive["shen.rcons_form"], klTailApply(primitive["shen.curry-synonyms"], klTailApply(primitive["tl"], V3030))), null))) : ((mustBoolean(true) === true) ? (V3030) : (err("no cond match"))) ;}, 1);;

defun("shen.curry-synonyms", function(V3032) { return new Trampoline(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.curry-type"], X);}, 1), V3032) ;}, 1);;

defun("shen.nl-macro", function(V3034) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3034)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("nl"), klTailApply(primitive["hd"], V3034))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V3034))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("nl"), klTailApply(primitive["cons"], 1, null))) : ((mustBoolean(true) === true) ? (V3034) : (err("no cond match"))) ;}, 1);;

defun("shen.assoc-macro", function(V3036) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3036)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3036))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3036)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3036))))) && mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V3036), klTailApply(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], new Symbol("@v"), klTailApply(primitive["cons"], new Symbol("append"), klTailApply(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], new Symbol("or"), klTailApply(primitive["cons"], new Symbol("+"), klTailApply(primitive["cons"], new Symbol("*"), klTailApply(primitive["cons"], new Symbol("do"), null)))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V3036), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3036)), klTailApply(primitive["cons"], klTailApply(primitive["shen.assoc-macro"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], V3036), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3036)))), null)))) : ((mustBoolean(true) === true) ? (V3036) : (err("no cond match"))) ;}, 1);;

defun("shen.let-macro", function(V3038) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3038)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("let"), klTailApply(primitive["hd"], V3038))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3038))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3038)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3038))))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3038)))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3038)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3038))), klTailApply(primitive["cons"], klTailApply(primitive["shen.let-macro"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3038))))), null))))) : ((mustBoolean(true) === true) ? (V3038) : (err("no cond match"))) ;}, 1);;

defun("shen.abs-macro", function(V3040) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3040)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], V3040))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3040))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3040)))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3040))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3040)), klTailApply(primitive["cons"], klTailApply(primitive["shen.abs-macro"], klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3040)))), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3040)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], V3040))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3040))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3040)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3040))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["tl"], V3040))) : ((mustBoolean(true) === true) ? (V3040) : (err("no cond match")))) ;}, 1);;

defun("shen.cases-macro", function(V3044) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3044)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cases"), klTailApply(primitive["hd"], V3044))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3044))) && mustBoolean((mustBoolean(klTailApply(primitive["="], true, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3044)))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3044)))))))))))) === true) ? (new Trampoline(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3044)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3044)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cases"), klTailApply(primitive["hd"], V3044))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3044))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3044)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3044))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3044)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3044))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("simple-error"), klTailApply(primitive["cons"], "error: cases exhausted", null)), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3044)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cases"), klTailApply(primitive["hd"], V3044))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3044))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3044)))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3044)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3044))), klTailApply(primitive["cons"], klTailApply(primitive["shen.cases-macro"], klTailApply(primitive["cons"], new Symbol("cases"), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3044))))), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3044)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cases"), klTailApply(primitive["hd"], V3044))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3044))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3044)))))))))) === true) ? (new Trampoline(primitive["simple-error"], "error: odd number of case elements\n")) : ((mustBoolean(true) === true) ? (V3044) : (err("no cond match")))))) ;}, 1);;

defun("shen.timer-macro", function(V3046) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3046)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("time"), klTailApply(primitive["hd"], V3046))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3046))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3046)))))))))) === true) ? (new Trampoline(primitive["shen.let-macro"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Start"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], new Symbol("run"), null)), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3046)), klTailApply(primitive["cons"], new Symbol("Finish"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], new Symbol("run"), null)), klTailApply(primitive["cons"], new Symbol("Time"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("-"), klTailApply(primitive["cons"], new Symbol("Finish"), klTailApply(primitive["cons"], new Symbol("Start"), null))), klTailApply(primitive["cons"], new Symbol("Message"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.prhush"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], "\nrun time: ", klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("str"), klTailApply(primitive["cons"], new Symbol("Time"), null)), klTailApply(primitive["cons"], " secs\n", null))), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stoutput"), null), null))), klTailApply(primitive["cons"], new Symbol("Result"), null)))))))))))))) : ((mustBoolean(true) === true) ? (V3046) : (err("no cond match"))) ;}, 1);;

defun("shen.tuple-up", function(V3048) { return (mustBoolean(klTailApply(primitive["cons?"], V3048)) === true) ? (new Trampoline(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V3048), klTailApply(primitive["cons"], klTailApply(primitive["shen.tuple-up"], klTailApply(primitive["tl"], V3048)), null)))) : ((mustBoolean(true) === true) ? (V3048) : (err("no cond match"))) ;}, 1);;

defun("shen.put/get-macro", function(V3050) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3050)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("put"), klTailApply(primitive["hd"], V3050))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3050))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050)))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("put"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3050)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050))), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050)))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("*property-vector*"), null)), null)))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3050)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("get"), klTailApply(primitive["hd"], V3050))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3050))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("get"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3050)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("*property-vector*"), null)), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3050)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("get/or"), klTailApply(primitive["hd"], V3050))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3050))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050)))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("get/or"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3050)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050))), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050)))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("*property-vector*"), null)), null)))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3050)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("unput"), klTailApply(primitive["hd"], V3050))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3050))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("unput"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3050)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3050))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("*property-vector*"), null)), null))))) : ((mustBoolean(true) === true) ? (V3050) : (err("no cond match")))))) ;}, 1);;

defun("shen.function-macro", function(V3052) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3052)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("function"), klTailApply(primitive["hd"], V3052))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3052))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3052)))))))))) === true) ? (new Trampoline(primitive["shen.function-abstraction"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3052)), klTailApply(primitive["arity"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3052))))) : ((mustBoolean(true) === true) ? (V3052) : (err("no cond match"))) ;}, 1);;

defun("shen.function-abstraction", function(V3055, V3056) { return (mustBoolean(klTailApply(primitive["="], 0, V3056)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], V3055, " has no lambda form\n", new Symbol("shen.a")))) : ((mustBoolean(klTailApply(primitive["="], -1, V3056)) === true) ? (new Trampoline(primitive["cons"], new Symbol("function"), klTailApply(primitive["cons"], V3055, null))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.function-abstraction-help"], V3055, V3056, null)) : (err("no cond match")))) ;}, 2);;

defun("shen.function-abstraction-help", function(V3060, V3061, V3062) { return (mustBoolean(klTailApply(primitive["="], 0, V3061)) === true) ? (new Trampoline(primitive["cons"], V3060, V3062)) : ((mustBoolean(true) === true) ? ((function(){let X = klTailApply(primitive["gensym"], new Symbol("V")); return new Trampoline(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], X, klTailApply(primitive["cons"], klTailApply(primitive["shen.function-abstraction-help"], V3060, klTailApply(primitive["-"], V3061, 1), klTailApply(primitive["append"], V3062, klTailApply(primitive["cons"], X, null))), null)));})()) : (err("no cond match"))) ;}, 3);;

defun("undefmacro", function(V3064) { return (function(){let MacroReg = klTailApply(primitive["value"], new Symbol("shen.*macroreg*")); return (function(){let Pos = klTailApply(primitive["shen.findpos"], V3064, MacroReg); return (function(){let Remove1 = klTailApply(primitive["set"], new Symbol("shen.*macroreg*"), klTailApply(primitive["remove"], V3064, MacroReg)); return (function(){let Remove2 = klTailApply(primitive["set"], new Symbol("*macros*"), klTailApply(primitive["shen.remove-nth"], Pos, klTailApply(primitive["value"], new Symbol("*macros*")))); return V3064;})();})();})();})() ;}, 1);;

defun("shen.findpos", function(V3074, V3075) { return (mustBoolean(klTailApply(primitive["="], null, V3075)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], V3074, " is not a macro\n", new Symbol("shen.a")))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3075)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V3075), V3074)))) === true) ? (1) : ((mustBoolean(klTailApply(primitive["cons?"], V3075)) === true) ? (new Trampoline(primitive["+"], 1, klTailApply(primitive["shen.findpos"], V3074, klTailApply(primitive["tl"], V3075)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.findpos"))) : (err("no cond match"))))) ;}, 2);;

defun("shen.remove-nth", function(V3080, V3081) { return (mustBoolean((mustBoolean(klTailApply(primitive["="], 1, V3080)) && mustBoolean(klTailApply(primitive["cons?"], V3081)))) === true) ? (new Trampoline(primitive["tl"], V3081)) : ((mustBoolean(klTailApply(primitive["cons?"], V3081)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V3081), klTailApply(primitive["shen.remove-nth"], klTailApply(primitive["-"], V3080, 1), klTailApply(primitive["tl"], V3081)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.remove-nth"))) : (err("no cond match")))) ;}, 2);;

defun("shen.initialise_arity_table", function(V3083) { return (mustBoolean(klTailApply(primitive["="], null, V3083)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V3083)) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V3083))))) === true) ? ((function(){let DecArity = klTailApply(primitive["put"], klTailApply(primitive["hd"], V3083), new Symbol("arity"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V3083)), klTailApply(primitive["value"], new Symbol("*property-vector*"))); return new Trampoline(primitive["shen.initialise_arity_table"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V3083)));})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.initialise_arity_table"))) : (err("no cond match")))) ;}, 1);;

defun("arity", function(V3085) { return new Trampoline(primitive["get/or"], V3085, new Symbol("arity"), klFun(function() { return -1}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);;

defun("systemf", function(V3087) { return (function(){let Shen = klTailApply(primitive["intern"], "shen"); return (function(){let External = klTailApply(primitive["get"], Shen, new Symbol("shen.external-symbols"), klTailApply(primitive["value"], new Symbol("*property-vector*"))); return (function(){let Place = klTailApply(primitive["put"], Shen, new Symbol("shen.external-symbols"), klTailApply(primitive["adjoin"], V3087, External), klTailApply(primitive["value"], new Symbol("*property-vector*"))); return V3087;})();})();})() ;}, 1);;

defun("adjoin", function(V3090, V3091) { return (mustBoolean(klTailApply(primitive["element?"], V3090, V3091)) === true) ? (V3091) : (new Trampoline(primitive["cons"], V3090, V3091)) ;}, 2);;

defun("shen.lambda-form-entry", function(V3093) { return (mustBoolean(klTailApply(primitive["="], new Symbol("package"), V3093)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["="], new Symbol("receive"), V3093)) === true) ? (null) : ((mustBoolean(true) === true) ? ((function(){let ArityF = klTailApply(primitive["arity"], V3093); return (mustBoolean(klTailApply(primitive["="], ArityF, -1)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["="], ArityF, 0)) === true) ? (null) : (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], V3093, klTailApply(primitive["eval-kl"], klTailApply(primitive["shen.lambda-form"], V3093, ArityF))), null)));})()) : (err("no cond match")))) ;}, 1);;

defun("shen.lambda-form", function(V3096, V3097) { return (mustBoolean(klTailApply(primitive["="], 0, V3097)) === true) ? (V3096) : ((mustBoolean(true) === true) ? ((function(){let X = klTailApply(primitive["gensym"], new Symbol("V")); return new Trampoline(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], X, klTailApply(primitive["cons"], klTailApply(primitive["shen.lambda-form"], klTailApply(primitive["shen.add-end"], V3096, X), klTailApply(primitive["-"], V3097, 1)), null)));})()) : (err("no cond match"))) ;}, 2);;

defun("shen.add-end", function(V3100, V3101) { return (mustBoolean(klTailApply(primitive["cons?"], V3100)) === true) ? (new Trampoline(primitive["append"], V3100, klTailApply(primitive["cons"], V3101, null))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], V3100, klTailApply(primitive["cons"], V3101, null))) : (err("no cond match"))) ;}, 2);;

defun("shen.set-lambda-form-entry", function(V3103) { return (mustBoolean(klTailApply(primitive["cons?"], V3103)) === true) ? (new Trampoline(primitive["put"], klTailApply(primitive["hd"], V3103), new Symbol("shen.lambda-form"), klTailApply(primitive["tl"], V3103), klTailApply(primitive["value"], new Symbol("*property-vector*")))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.set-lambda-form-entry"))) : (err("no cond match"))) ;}, 1);;

defun("specialise", function(V3105) { return (function(){klTailApply(primitive["set"], new Symbol("shen.*special*"), klTailApply(primitive["cons"], V3105, klTailApply(primitive["value"], new Symbol("shen.*special*")))); return V3105;})() ;}, 1);;

defun("unspecialise", function(V3107) { return (function(){klTailApply(primitive["set"], new Symbol("shen.*special*"), klTailApply(primitive["remove"], V3107, klTailApply(primitive["value"], new Symbol("shen.*special*")))); return V3107;})() ;}, 1);;

klTailApply(primitive["set"], new Symbol("shen.*continue-repl-loop*"), true);

klTailApply(primitive["set"], new Symbol("shen.*history*"), null);

klTailApply(primitive["set"], new Symbol("shen.*step*"), false);

klTailApply(primitive["set"], new Symbol("shen.*installing-kl*"), false);

klTailApply(primitive["set"], new Symbol("shen.*history*"), null);

klTailApply(primitive["set"], new Symbol("shen.*tc*"), false);

klTailApply(primitive["set"], new Symbol("*property-vector*"), klTailApply(primitive["dict"], 20000));

klTailApply(primitive["set"], new Symbol("shen.*process-counter*"), 0);

klTailApply(primitive["set"], new Symbol("shen.*varcounter*"), klTailApply(primitive["vector"], 1000));

klTailApply(primitive["set"], new Symbol("shen.*prologvectors*"), klTailApply(primitive["vector"], 1000));

klTailApply(primitive["set"], new Symbol("shen.*demodulation-function*"), klFun(function(X) { return X;}, 1));

klTailApply(primitive["set"], new Symbol("shen.*macroreg*"), klTailApply(primitive["cons"], new Symbol("shen.timer-macro"), klTailApply(primitive["cons"], new Symbol("shen.cases-macro"), klTailApply(primitive["cons"], new Symbol("shen.abs-macro"), klTailApply(primitive["cons"], new Symbol("shen.put/get-macro"), klTailApply(primitive["cons"], new Symbol("shen.compile-macro"), klTailApply(primitive["cons"], new Symbol("shen.datatype-macro"), klTailApply(primitive["cons"], new Symbol("shen.let-macro"), klTailApply(primitive["cons"], new Symbol("shen.assoc-macro"), klTailApply(primitive["cons"], new Symbol("shen.make-string-macro"), klTailApply(primitive["cons"], new Symbol("shen.output-macro"), klTailApply(primitive["cons"], new Symbol("shen.input-macro"), klTailApply(primitive["cons"], new Symbol("shen.error-macro"), klTailApply(primitive["cons"], new Symbol("shen.prolog-macro"), klTailApply(primitive["cons"], new Symbol("shen.synonyms-macro"), klTailApply(primitive["cons"], new Symbol("shen.nl-macro"), klTailApply(primitive["cons"], new Symbol("shen.@s-macro"), klTailApply(primitive["cons"], new Symbol("shen.defprolog-macro"), klTailApply(primitive["cons"], new Symbol("shen.function-macro"), null)))))))))))))))))));

klTailApply(primitive["set"], new Symbol("*macros*"), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.timer-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.cases-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.abs-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.put/get-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.compile-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.datatype-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.let-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.assoc-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.make-string-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.output-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.input-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.error-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.prolog-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.synonyms-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.nl-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.@s-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.defprolog-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.function-macro"], X);}, 1), null)))))))))))))))))));

klTailApply(primitive["set"], new Symbol("shen.*gensym*"), 0);

klTailApply(primitive["set"], new Symbol("shen.*tracking*"), null);

klTailApply(primitive["set"], new Symbol("shen.*alphabet*"), klTailApply(primitive["cons"], new Symbol("A"), klTailApply(primitive["cons"], new Symbol("B"), klTailApply(primitive["cons"], new Symbol("C"), klTailApply(primitive["cons"], new Symbol("D"), klTailApply(primitive["cons"], new Symbol("E"), klTailApply(primitive["cons"], new Symbol("F"), klTailApply(primitive["cons"], new Symbol("G"), klTailApply(primitive["cons"], new Symbol("H"), klTailApply(primitive["cons"], new Symbol("I"), klTailApply(primitive["cons"], new Symbol("J"), klTailApply(primitive["cons"], new Symbol("K"), klTailApply(primitive["cons"], new Symbol("L"), klTailApply(primitive["cons"], new Symbol("M"), klTailApply(primitive["cons"], new Symbol("N"), klTailApply(primitive["cons"], new Symbol("O"), klTailApply(primitive["cons"], new Symbol("P"), klTailApply(primitive["cons"], new Symbol("Q"), klTailApply(primitive["cons"], new Symbol("R"), klTailApply(primitive["cons"], new Symbol("S"), klTailApply(primitive["cons"], new Symbol("T"), klTailApply(primitive["cons"], new Symbol("U"), klTailApply(primitive["cons"], new Symbol("V"), klTailApply(primitive["cons"], new Symbol("W"), klTailApply(primitive["cons"], new Symbol("X"), klTailApply(primitive["cons"], new Symbol("Y"), klTailApply(primitive["cons"], new Symbol("Z"), null)))))))))))))))))))))))))));

klTailApply(primitive["set"], new Symbol("shen.*special*"), klTailApply(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["cons"], new Symbol("@v"), klTailApply(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], new Symbol("set"), klTailApply(primitive["cons"], new Symbol("open"), null))))))))));

klTailApply(primitive["set"], new Symbol("shen.*extraspecial*"), klTailApply(primitive["cons"], new Symbol("define"), klTailApply(primitive["cons"], new Symbol("shen.process-datatype"), klTailApply(primitive["cons"], new Symbol("input+"), klTailApply(primitive["cons"], new Symbol("defcc"), klTailApply(primitive["cons"], new Symbol("shen.read+"), klTailApply(primitive["cons"], new Symbol("defmacro"), null)))))));

klTailApply(primitive["set"], new Symbol("shen.*spy*"), false);

klTailApply(primitive["set"], new Symbol("shen.*datatypes*"), null);

klTailApply(primitive["set"], new Symbol("shen.*alldatatypes*"), null);

klTailApply(primitive["set"], new Symbol("shen.*shen-type-theory-enabled?*"), true);

klTailApply(primitive["set"], new Symbol("shen.*synonyms*"), null);

klTailApply(primitive["set"], new Symbol("shen.*system*"), null);

klTailApply(primitive["set"], new Symbol("shen.*signedfuncs*"), null);

klTailApply(primitive["set"], new Symbol("shen.*maxcomplexity*"), 128);

klTailApply(primitive["set"], new Symbol("shen.*occurs*"), true);

klTailApply(primitive["set"], new Symbol("shen.*maxinferences*"), 1000000);

klTailApply(primitive["set"], new Symbol("*maximum-print-sequence-size*"), 20);

klTailApply(primitive["set"], new Symbol("shen.*catch*"), 0);

klTailApply(primitive["set"], new Symbol("shen.*call*"), 0);

klTailApply(primitive["set"], new Symbol("shen.*infs*"), 0);

klTailApply(primitive["set"], new Symbol("*hush*"), false);

klTailApply(primitive["set"], new Symbol("shen.*optimise*"), false);

klTailApply(primitive["set"], new Symbol("*version*"), "Shen 20.1");

(mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["bound?"], new Symbol("*home-directory*")))) === true) ? (klTailApply(primitive["set"], new Symbol("*home-directory*"), "")) : (new Symbol("shen.skip"));

(mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["bound?"], new Symbol("*sterror*")))) === true) ? (klTailApply(primitive["set"], new Symbol("*sterror*"), klTailApply(primitive["value"], new Symbol("*stoutput*")))) : (new Symbol("shen.skip"));

(mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["bound?"], new Symbol("*argv*")))) === true) ? (klTailApply(primitive["set"], new Symbol("*argv*"), klTailApply(primitive["cons"], "shen", null))) : (new Symbol("shen.skip"));

klTailApply(primitive["shen.initialise_arity_table"], klTailApply(primitive["cons"], new Symbol("abort"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("absvector?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("absvector"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("adjoin"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("append"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("arity"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("assoc"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("boolean?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("bound?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("cd"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("close"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("compile"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("concat"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("declare"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("destroy"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("difference"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("element?"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("empty?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("enable-type-theory"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("error-to-string"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("shen.interror"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("eval"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("eval-kl"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("exit"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("explode"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("external"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("fail-if"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("fail"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("fix"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("fold-left"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("fold-right"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("filter"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("for-each"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("findall"), klTailApply(primitive["cons"], 5, klTailApply(primitive["cons"], new Symbol("freeze"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("fst"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("gensym"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("get"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("get/or"), klTailApply(primitive["cons"], 4, klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("address->"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("<-address"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("<-address/or"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("<-vector"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("<-vector/or"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol(">"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol(">="), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("hash"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("hdv"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("hdstr"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("head"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("integer?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("intern"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("identical"), klTailApply(primitive["cons"], 4, klTailApply(primitive["cons"], new Symbol("inferences"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("input"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("input+"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("implementation"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("intersection"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("internal"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("it"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("kill"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("language"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("length"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("limit"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("lineread"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("load"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("<"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("<="), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("vector"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("macroexpand"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("map"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("mapcan"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("maxinferences"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("nl"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("not"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("nth"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("n->string"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("number?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("occurs-check"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("occurrences"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("occurs-check"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("open"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("optimise"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("or"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("os"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("package"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("package?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("port"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("porters"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("pos"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("print"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("profile"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("profile-results"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("pr"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("ps"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("preclude"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("preclude-all-but"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("protect"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("address->"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("put"), klTailApply(primitive["cons"], 4, klTailApply(primitive["cons"], new Symbol("shen.reassemble"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("read-file-as-string"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-file"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-file-as-charlist"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-file-as-bytelist"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-byte"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-from-string"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-char-code"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("receive"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("release"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("remove"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("shen.require"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("reverse"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("set"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("simple-error"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("snd"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("specialise"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("spy"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("step"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("stinput"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("stoutput"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("sterror"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("string->n"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("string->symbol"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("string?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("str"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("subst"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("sum"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("symbol?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("systemf"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("tail"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("tc"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("tc?"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("thaw"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("tlstr"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("track"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("trap-error"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("tuple?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("return"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("undefmacro"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("unput"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("unprofile"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("unify"), klTailApply(primitive["cons"], 4, klTailApply(primitive["cons"], new Symbol("unify!"), klTailApply(primitive["cons"], 4, klTailApply(primitive["cons"], new Symbol("union"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("untrack"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("unspecialise"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("undefmacro"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("vector"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("vector?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("vector->"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("value/or"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("variable?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("version"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("write-byte"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("write-to-file"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("y-or-n?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("+"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("*"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("/"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("-"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("=="), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("<e>"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("<!>"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("@v"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("preclude"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("include"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("preclude-all-but"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("include-all-but"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("dict"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("dict?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("dict-count"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("dict->"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("<-dict/or"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("<-dict"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("dict-rm"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("dict-fold"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("dict-keys"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("dict-values"), klTailApply(primitive["cons"], 1, null)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

klTailApply(primitive["put"], klTailApply(primitive["intern"], "shen"), new Symbol("shen.external-symbols"), klTailApply(primitive["cons"], new Symbol("!"), klTailApply(primitive["cons"], new Symbol("}"), klTailApply(primitive["cons"], new Symbol("{"), klTailApply(primitive["cons"], new Symbol("-->"), klTailApply(primitive["cons"], new Symbol("<--"), klTailApply(primitive["cons"], new Symbol("&&"), klTailApply(primitive["cons"], new Symbol(":"), klTailApply(primitive["cons"], new Symbol(";"), klTailApply(primitive["cons"], new Symbol(":-"), klTailApply(primitive["cons"], new Symbol(":="), klTailApply(primitive["cons"], new Symbol("_"), klTailApply(primitive["cons"], new Symbol("*language*"), klTailApply(primitive["cons"], new Symbol("*implementation*"), klTailApply(primitive["cons"], new Symbol("*stinput*"), klTailApply(primitive["cons"], new Symbol("*stoutput*"), klTailApply(primitive["cons"], new Symbol("*sterror*"), klTailApply(primitive["cons"], new Symbol("*home-directory*"), klTailApply(primitive["cons"], new Symbol("*version*"), klTailApply(primitive["cons"], new Symbol("*argv*"), klTailApply(primitive["cons"], new Symbol("*maximum-print-sequence-size*"), klTailApply(primitive["cons"], new Symbol("*macros*"), klTailApply(primitive["cons"], new Symbol("*os*"), klTailApply(primitive["cons"], new Symbol("*release*"), klTailApply(primitive["cons"], new Symbol("*property-vector*"), klTailApply(primitive["cons"], new Symbol("*port*"), klTailApply(primitive["cons"], new Symbol("*porters*"), klTailApply(primitive["cons"], new Symbol("*hush*"), klTailApply(primitive["cons"], new Symbol("@v"), klTailApply(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["cons"], new Symbol("<-"), klTailApply(primitive["cons"], new Symbol("->"), klTailApply(primitive["cons"], new Symbol("<e>"), klTailApply(primitive["cons"], new Symbol("<!>"), klTailApply(primitive["cons"], new Symbol("=="), klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], new Symbol(">="), klTailApply(primitive["cons"], new Symbol(">"), klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], new Symbol("=!"), klTailApply(primitive["cons"], new Symbol("$"), klTailApply(primitive["cons"], new Symbol("-"), klTailApply(primitive["cons"], new Symbol("/"), klTailApply(primitive["cons"], new Symbol("*"), klTailApply(primitive["cons"], new Symbol("+"), klTailApply(primitive["cons"], new Symbol("<="), klTailApply(primitive["cons"], new Symbol("<"), klTailApply(primitive["cons"], new Symbol(">>"), klTailApply(primitive["cons"], klTailApply(primitive["vector"], 0), klTailApply(primitive["cons"], new Symbol("y-or-n?"), klTailApply(primitive["cons"], new Symbol("write-to-file"), klTailApply(primitive["cons"], new Symbol("write-byte"), klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], new Symbol("when"), klTailApply(primitive["cons"], new Symbol("warn"), klTailApply(primitive["cons"], new Symbol("version"), klTailApply(primitive["cons"], new Symbol("verified"), klTailApply(primitive["cons"], new Symbol("variable?"), klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("value/or"), klTailApply(primitive["cons"], new Symbol("vector->"), klTailApply(primitive["cons"], new Symbol("<-vector"), klTailApply(primitive["cons"], new Symbol("<-vector/or"), klTailApply(primitive["cons"], new Symbol("vector"), klTailApply(primitive["cons"], new Symbol("vector?"), klTailApply(primitive["cons"], new Symbol("unspecialise"), klTailApply(primitive["cons"], new Symbol("untrack"), klTailApply(primitive["cons"], new Symbol("unit"), klTailApply(primitive["cons"], new Symbol("shen.unix"), klTailApply(primitive["cons"], new Symbol("union"), klTailApply(primitive["cons"], new Symbol("unify"), klTailApply(primitive["cons"], new Symbol("unify!"), klTailApply(primitive["cons"], new Symbol("unput"), klTailApply(primitive["cons"], new Symbol("unprofile"), klTailApply(primitive["cons"], new Symbol("undefmacro"), klTailApply(primitive["cons"], new Symbol("return"), klTailApply(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], new Symbol("tuple?"), klTailApply(primitive["cons"], true, klTailApply(primitive["cons"], new Symbol("trap-error"), klTailApply(primitive["cons"], new Symbol("track"), klTailApply(primitive["cons"], new Symbol("time"), klTailApply(primitive["cons"], new Symbol("thaw"), klTailApply(primitive["cons"], new Symbol("tc?"), klTailApply(primitive["cons"], new Symbol("tc"), klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], new Symbol("tlstr"), klTailApply(primitive["cons"], new Symbol("tlv"), klTailApply(primitive["cons"], new Symbol("tail"), klTailApply(primitive["cons"], new Symbol("systemf"), klTailApply(primitive["cons"], new Symbol("synonyms"), klTailApply(primitive["cons"], new Symbol("symbol"), klTailApply(primitive["cons"], new Symbol("symbol?"), klTailApply(primitive["cons"], new Symbol("string->symbol"), klTailApply(primitive["cons"], new Symbol("sum"), klTailApply(primitive["cons"], new Symbol("subst"), klTailApply(primitive["cons"], new Symbol("string?"), klTailApply(primitive["cons"], new Symbol("string->n"), klTailApply(primitive["cons"], new Symbol("stream"), klTailApply(primitive["cons"], new Symbol("string"), klTailApply(primitive["cons"], new Symbol("stinput"), klTailApply(primitive["cons"], new Symbol("sterror"), klTailApply(primitive["cons"], new Symbol("stoutput"), klTailApply(primitive["cons"], new Symbol("step"), klTailApply(primitive["cons"], new Symbol("spy"), klTailApply(primitive["cons"], new Symbol("specialise"), klTailApply(primitive["cons"], new Symbol("snd"), klTailApply(primitive["cons"], new Symbol("simple-error"), klTailApply(primitive["cons"], new Symbol("set"), klTailApply(primitive["cons"], new Symbol("save"), klTailApply(primitive["cons"], new Symbol("str"), klTailApply(primitive["cons"], new Symbol("run"), klTailApply(primitive["cons"], new Symbol("reverse"), klTailApply(primitive["cons"], new Symbol("remove"), klTailApply(primitive["cons"], new Symbol("release"), klTailApply(primitive["cons"], new Symbol("read"), klTailApply(primitive["cons"], new Symbol("receive"), klTailApply(primitive["cons"], new Symbol("read-file"), klTailApply(primitive["cons"], new Symbol("read-file-as-bytelist"), klTailApply(primitive["cons"], new Symbol("read-file-as-string"), klTailApply(primitive["cons"], new Symbol("read-byte"), klTailApply(primitive["cons"], new Symbol("read-file-as-charlist"), klTailApply(primitive["cons"], new Symbol("read-char-code"), klTailApply(primitive["cons"], new Symbol("read-from-string"), klTailApply(primitive["cons"], new Symbol("package?"), klTailApply(primitive["cons"], new Symbol("put"), klTailApply(primitive["cons"], new Symbol("preclude"), klTailApply(primitive["cons"], new Symbol("preclude-all-but"), klTailApply(primitive["cons"], new Symbol("ps"), klTailApply(primitive["cons"], new Symbol("prolog?"), klTailApply(primitive["cons"], new Symbol("protect"), klTailApply(primitive["cons"], new Symbol("profile-results"), klTailApply(primitive["cons"], new Symbol("profile"), klTailApply(primitive["cons"], new Symbol("print"), klTailApply(primitive["cons"], new Symbol("pr"), klTailApply(primitive["cons"], new Symbol("pos"), klTailApply(primitive["cons"], new Symbol("porters"), klTailApply(primitive["cons"], new Symbol("port"), klTailApply(primitive["cons"], new Symbol("package"), klTailApply(primitive["cons"], new Symbol("output"), klTailApply(primitive["cons"], new Symbol("out"), klTailApply(primitive["cons"], new Symbol("os"), klTailApply(primitive["cons"], new Symbol("or"), klTailApply(primitive["cons"], new Symbol("optimise"), klTailApply(primitive["cons"], new Symbol("open"), klTailApply(primitive["cons"], new Symbol("occurrences"), klTailApply(primitive["cons"], new Symbol("occurs-check"), klTailApply(primitive["cons"], new Symbol("n->string"), klTailApply(primitive["cons"], new Symbol("number?"), klTailApply(primitive["cons"], new Symbol("number"), klTailApply(primitive["cons"], new Symbol("null"), klTailApply(primitive["cons"], new Symbol("nth"), klTailApply(primitive["cons"], new Symbol("not"), klTailApply(primitive["cons"], new Symbol("nl"), klTailApply(primitive["cons"], new Symbol("mode"), klTailApply(primitive["cons"], new Symbol("macroexpand"), klTailApply(primitive["cons"], new Symbol("maxinferences"), klTailApply(primitive["cons"], new Symbol("mapcan"), klTailApply(primitive["cons"], new Symbol("map"), klTailApply(primitive["cons"], new Symbol("make-string"), klTailApply(primitive["cons"], new Symbol("load"), klTailApply(primitive["cons"], new Symbol("loaded"), klTailApply(primitive["cons"], new Symbol("list"), klTailApply(primitive["cons"], new Symbol("lineread"), klTailApply(primitive["cons"], new Symbol("limit"), klTailApply(primitive["cons"], new Symbol("length"), klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("lazy"), klTailApply(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], new Symbol("language"), klTailApply(primitive["cons"], new Symbol("kill"), klTailApply(primitive["cons"], new Symbol("is"), klTailApply(primitive["cons"], new Symbol("intersection"), klTailApply(primitive["cons"], new Symbol("inferences"), klTailApply(primitive["cons"], new Symbol("intern"), klTailApply(primitive["cons"], new Symbol("integer?"), klTailApply(primitive["cons"], new Symbol("input"), klTailApply(primitive["cons"], new Symbol("input+"), klTailApply(primitive["cons"], new Symbol("include"), klTailApply(primitive["cons"], new Symbol("include-all-but"), klTailApply(primitive["cons"], new Symbol("it"), klTailApply(primitive["cons"], new Symbol("in"), klTailApply(primitive["cons"], new Symbol("internal"), klTailApply(primitive["cons"], new Symbol("implementation"), klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], new Symbol("identical"), klTailApply(primitive["cons"], new Symbol("head"), klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], new Symbol("hdv"), klTailApply(primitive["cons"], new Symbol("hdstr"), klTailApply(primitive["cons"], new Symbol("hash"), klTailApply(primitive["cons"], new Symbol("get"), klTailApply(primitive["cons"], new Symbol("get/or"), klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], new Symbol("gensym"), klTailApply(primitive["cons"], new Symbol("function"), klTailApply(primitive["cons"], new Symbol("fst"), klTailApply(primitive["cons"], new Symbol("freeze"), klTailApply(primitive["cons"], new Symbol("fix"), klTailApply(primitive["cons"], new Symbol("file"), klTailApply(primitive["cons"], new Symbol("fail"), klTailApply(primitive["cons"], new Symbol("fail-if"), klTailApply(primitive["cons"], new Symbol("fwhen"), klTailApply(primitive["cons"], new Symbol("findall"), klTailApply(primitive["cons"], new Symbol("for-each"), klTailApply(primitive["cons"], new Symbol("fold-right"), klTailApply(primitive["cons"], new Symbol("fold-left"), klTailApply(primitive["cons"], new Symbol("filter"), klTailApply(primitive["cons"], false, klTailApply(primitive["cons"], new Symbol("enable-type-theory"), klTailApply(primitive["cons"], new Symbol("explode"), klTailApply(primitive["cons"], new Symbol("external"), klTailApply(primitive["cons"], new Symbol("exception"), klTailApply(primitive["cons"], new Symbol("eval-kl"), klTailApply(primitive["cons"], new Symbol("eval"), klTailApply(primitive["cons"], new Symbol("error-to-string"), klTailApply(primitive["cons"], new Symbol("error"), klTailApply(primitive["cons"], new Symbol("empty?"), klTailApply(primitive["cons"], new Symbol("exit"), klTailApply(primitive["cons"], new Symbol("element?"), klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], new Symbol("difference"), klTailApply(primitive["cons"], new Symbol("destroy"), klTailApply(primitive["cons"], new Symbol("defun"), klTailApply(primitive["cons"], new Symbol("define"), klTailApply(primitive["cons"], new Symbol("defmacro"), klTailApply(primitive["cons"], new Symbol("defcc"), klTailApply(primitive["cons"], new Symbol("defprolog"), klTailApply(primitive["cons"], new Symbol("declare"), klTailApply(primitive["cons"], new Symbol("datatype"), klTailApply(primitive["cons"], new Symbol("cut"), klTailApply(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], new Symbol("cond"), klTailApply(primitive["cons"], new Symbol("concat"), klTailApply(primitive["cons"], new Symbol("compile"), klTailApply(primitive["cons"], new Symbol("cd"), klTailApply(primitive["cons"], new Symbol("cases"), klTailApply(primitive["cons"], new Symbol("call"), klTailApply(primitive["cons"], new Symbol("close"), klTailApply(primitive["cons"], new Symbol("bind"), klTailApply(primitive["cons"], new Symbol("bound?"), klTailApply(primitive["cons"], new Symbol("boolean?"), klTailApply(primitive["cons"], new Symbol("boolean"), klTailApply(primitive["cons"], new Symbol("bar!"), klTailApply(primitive["cons"], new Symbol("assoc"), klTailApply(primitive["cons"], new Symbol("arity"), klTailApply(primitive["cons"], new Symbol("abort"), klTailApply(primitive["cons"], new Symbol("append"), klTailApply(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], new Symbol("adjoin"), klTailApply(primitive["cons"], new Symbol("<-address"), klTailApply(primitive["cons"], new Symbol("<-address/or"), klTailApply(primitive["cons"], new Symbol("address->"), klTailApply(primitive["cons"], new Symbol("absvector?"), klTailApply(primitive["cons"], new Symbol("absvector"), klTailApply(primitive["cons"], new Symbol("dict"), klTailApply(primitive["cons"], new Symbol("dict?"), klTailApply(primitive["cons"], new Symbol("dict-count"), klTailApply(primitive["cons"], new Symbol("dict->"), klTailApply(primitive["cons"], new Symbol("<-dict/or"), klTailApply(primitive["cons"], new Symbol("<-dict"), klTailApply(primitive["cons"], new Symbol("dict-rm"), klTailApply(primitive["cons"], new Symbol("dict-fold"), klTailApply(primitive["cons"], new Symbol("dict-keys"), klTailApply(primitive["cons"], new Symbol("dict-values"), klTailApply(primitive["cons"], new Symbol("shen.native"), klTailApply(primitive["cons"], new Symbol("shen.load-plugin"), null))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), klTailApply(primitive["value"], new Symbol("*property-vector*")));

klTailApply(primitive["for-each"], klFun(function(Entry) { return new Trampoline(primitive["shen.set-lambda-form-entry"], Entry);}, 1), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.datatype-error"), klFun(function(X) { return new Trampoline(primitive["shen.datatype-error"], X);}, 1)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.tuple"), klFun(function(X) { return new Trampoline(primitive["shen.tuple"], X);}, 1)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.pvar"), klFun(function(X) { return new Trampoline(primitive["shen.pvar"], X);}, 1)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.dictionary"), klFun(function(X) { return new Trampoline(primitive["shen.dictionary"], X);}, 1)), klTailApply(primitive["mapcan"], klFun(function(X) { return new Trampoline(primitive["shen.lambda-form-entry"], X);}, 1), klTailApply(primitive["external"], klTailApply(primitive["intern"], "shen"))))))));

module.exports = {call: kl.call,api: {defun: kl.defun, hd : kl.hd, tl: kl.tl, cons: kl.cons, eq: kl.eq, intern: kl.intern}}
