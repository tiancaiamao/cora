var kl = require('./kl'); let defun = kl.defun; let klTailApply = kl.klTailApply; let Symbol = kl.Symbol; let err = kl.err; let primitive = kl.primitive; let mustBoolean = kl.mustBoolean; let Trampoline = kl.Trampoline; let klFun = kl.klFun;
defun("shen.shen", function() { return (function(){klTailApply(primitive["shen.credits"]); return new Trampoline(primitive["shen.loop"]);})() ;}, 0);

defun("exit", function(V305) { return new Trampoline(primitive["set"], new Symbol("shen.*continue-repl-loop*"), false) ;}, 1);

defun("shen.loop", function() { return (function(){klTailApply(primitive["shen.initialise_environment"]); return (function(){klTailApply(primitive["shen.prompt"]); return (function(){(function(){ try { return klTailApply(primitive["shen.read-evaluate-print"]);} catch (err) { return klTailApply(klFun(function(E) { return new Trampoline(primitive["pr"], klTailApply(primitive["error-to-string"], E), klTailApply(primitive["stoutput"]));}, 1), err);} })(); return (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*continue-repl-loop*"))) === true) ? (new Trampoline(primitive["shen.loop"])) : (new Symbol("exit"));})();})();})() ;}, 0);

defun("shen.credits", function() { return (function(){klTailApply(primitive["shen.prhush"], "Cora, my own lisp!\n", klTailApply(primitive["stoutput"])); return (function(){klTailApply(primitive["shen.prhush"], "Inspired by the awesome Shen language.\n", klTailApply(primitive["stoutput"])); return new Trampoline(primitive["shen.prhush"], "Copyright (C) 2018 Arthur Mao <tiancaiamao@gmail.com>\n", klTailApply(primitive["stoutput"]));})();})() ;}, 0);

defun("shen.initialise_environment", function() { return new Trampoline(primitive["shen.multiple-set"], klTailApply(primitive["cons"], new Symbol("shen.*call*"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("shen.*infs*"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("shen.*process-counter*"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("shen.*catch*"), klTailApply(primitive["cons"], 0, null))))))))) ;}, 0);

defun("shen.multiple-set", function(V307) { return (mustBoolean(klTailApply(primitive["="], null, V307)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V307)) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V307))))) === true) ? ((function(){klTailApply(primitive["set"], klTailApply(primitive["hd"], V307), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V307))); return new Trampoline(primitive["shen.multiple-set"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V307)));})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.multiple-set"))) : (err("no cond match")))) ;}, 1);

defun("destroy", function(V309) { return new Trampoline(primitive["declare"], V309, new Symbol("symbol")) ;}, 1);

defun("shen.read-evaluate-print", function() { return (function(){var Lineread = klTailApply(primitive["shen.toplineread"]); return (function(){var History = klTailApply(primitive["value"], new Symbol("shen.*history*")); return (function(){var NewLineread = klTailApply(primitive["shen.retrieve-from-history-if-needed"], Lineread, History); return (function(){var NewHistory = klTailApply(primitive["shen.update_history"], NewLineread, History); return (function(){var Parsed = klTailApply(primitive["fst"], NewLineread); return new Trampoline(primitive["shen.toplevel"], Parsed);})();})();})();})();})() ;}, 0);

defun("shen.retrieve-from-history-if-needed", function(V321, V322) { return (mustBoolean((mustBoolean(klTailApply(primitive["tuple?"], V321)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["snd"], V321))) && mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], klTailApply(primitive["snd"], V321)), klTailApply(primitive["cons"], klTailApply(primitive["shen.space"]), klTailApply(primitive["cons"], klTailApply(primitive["shen.newline"]), null)))))))) === true) ? (new Trampoline(primitive["shen.retrieve-from-history-if-needed"], klTailApply(primitive["@p"], klTailApply(primitive["fst"], V321), klTailApply(primitive["tl"], klTailApply(primitive["snd"], V321))), V322)) : ((mustBoolean((mustBoolean(klTailApply(primitive["tuple?"], V321)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["snd"], V321))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["snd"], V321)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["snd"], V321))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V322)) && mustBoolean((mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["snd"], V321)), klTailApply(primitive["shen.exclamation"]))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["snd"], V321))), klTailApply(primitive["shen.exclamation"]))))))))))))))) === true) ? ((function(){var PastPrint = klTailApply(primitive["shen.prbytes"], klTailApply(primitive["snd"], klTailApply(primitive["hd"], V322))); return new Trampoline(primitive["hd"], V322);})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["tuple?"], V321)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["snd"], V321))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["snd"], V321)), klTailApply(primitive["shen.exclamation"]))))))) === true) ? ((function(){var Key$qu = klTailApply(primitive["shen.make-key"], klTailApply(primitive["tl"], klTailApply(primitive["snd"], V321)), V322); return (function(){var Find = klTailApply(primitive["head"], klTailApply(primitive["shen.find-past-inputs"], Key$qu, V322)); return (function(){var PastPrint = klTailApply(primitive["shen.prbytes"], klTailApply(primitive["snd"], Find)); return Find;})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["tuple?"], V321)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["snd"], V321))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["snd"], V321)))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["snd"], V321)), klTailApply(primitive["shen.percent"]))))))))) === true) ? ((function(){klTailApply(primitive["shen.print-past-inputs"], klFun(function(X) { return true;}, 1), klTailApply(primitive["reverse"], V322), 0); return new Trampoline(primitive["abort"]);})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["tuple?"], V321)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["snd"], V321))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["snd"], V321)), klTailApply(primitive["shen.percent"]))))))) === true) ? ((function(){var Key$qu = klTailApply(primitive["shen.make-key"], klTailApply(primitive["tl"], klTailApply(primitive["snd"], V321)), V322); return (function(){var Pastprint = klTailApply(primitive["shen.print-past-inputs"], Key$qu, klTailApply(primitive["reverse"], V322), 0); return new Trampoline(primitive["abort"]);})();})()) : ((mustBoolean(true) === true) ? (V321) : (err("no cond match"))))))) ;}, 2);

defun("shen.percent", function() { return 37 ;}, 0);

defun("shen.exclamation", function() { return 33 ;}, 0);

defun("shen.prbytes", function(V324) { return (function(){klTailApply(primitive["for-each"], klFun(function(Byte) { return new Trampoline(primitive["pr"], klTailApply(primitive["n->string"], Byte), klTailApply(primitive["stoutput"]));}, 1), V324); return new Trampoline(primitive["nl"], 1);})() ;}, 1);

defun("shen.update_history", function(V327, V328) { return new Trampoline(primitive["set"], new Symbol("shen.*history*"), klTailApply(primitive["cons"], V327, V328)) ;}, 2);

defun("shen.toplineread", function() { return new Trampoline(primitive["shen.toplineread_loop"], klTailApply(primitive["read-char-code"], klTailApply(primitive["stinput"])), null) ;}, 0);

defun("shen.toplineread_loop", function(V332, V333) { return (mustBoolean((mustBoolean(klTailApply(primitive["="], -1, V332)) && mustBoolean(klTailApply(primitive["="], null, V333)))) === true) ? (new Trampoline(primitive["exit"], 0)) : ((mustBoolean(klTailApply(primitive["="], V332, klTailApply(primitive["shen.hat"]))) === true) ? (new Trampoline(primitive["simple-error"], "line read aborted")) : ((mustBoolean(klTailApply(primitive["element?"], V332, klTailApply(primitive["cons"], klTailApply(primitive["shen.newline"]), klTailApply(primitive["cons"], klTailApply(primitive["shen.carriage-return"]), null)))) === true) ? ((function(){var Line = klTailApply(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), V333, klFun(function(E) { return new Symbol("shen.nextline");}, 1)); return (function(){var It = klTailApply(primitive["shen.record-it"], V333); return (mustBoolean((mustBoolean(klTailApply(primitive["="], Line, new Symbol("shen.nextline"))) || mustBoolean(klTailApply(primitive["empty?"], Line)))) === true) ? (new Trampoline(primitive["shen.toplineread_loop"], klTailApply(primitive["read-char-code"], klTailApply(primitive["stinput"])), klTailApply(primitive["append"], V333, klTailApply(primitive["cons"], V332, null)))) : (new Trampoline(primitive["@p"], Line, V333));})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.toplineread_loop"], klTailApply(primitive["read-char-code"], klTailApply(primitive["stinput"])), (mustBoolean(klTailApply(primitive["="], V332, -1)) === true) ? (V333) : (klTailApply(primitive["append"], V333, klTailApply(primitive["cons"], V332, null))))) : (err("no cond match"))))) ;}, 2);

defun("shen.hat", function() { return 94 ;}, 0);

defun("shen.newline", function() { return 10 ;}, 0);

defun("shen.carriage-return", function() { return 13 ;}, 0);

defun("tc", function(V339) { return (mustBoolean(klTailApply(primitive["="], new Symbol("+"), V339)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*tc*"), true)) : ((mustBoolean(klTailApply(primitive["="], new Symbol("-"), V339)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*tc*"), false)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "tc expects a + or -")) : (err("no cond match")))) ;}, 1);

defun("shen.prompt", function() { return (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*tc*"))) === true) ? (new Trampoline(primitive["shen.prhush"], klTailApply(primitive["cn"], "\n\n(", klTailApply(primitive["shen.app"], klTailApply(primitive["length"], klTailApply(primitive["value"], new Symbol("shen.*history*"))), "+) ", new Symbol("shen.a"))), klTailApply(primitive["stoutput"]))) : (new Trampoline(primitive["shen.prhush"], klTailApply(primitive["cn"], "\n\n(", klTailApply(primitive["shen.app"], klTailApply(primitive["length"], klTailApply(primitive["value"], new Symbol("shen.*history*"))), "-) ", new Symbol("shen.a"))), klTailApply(primitive["stoutput"]))) ;}, 0);

defun("shen.toplevel", function(V341) { return new Trampoline(primitive["shen.toplevel_evaluate"], V341, klTailApply(primitive["value"], new Symbol("shen.*tc*"))) ;}, 1);

defun("shen.find-past-inputs", function(V344, V345) { return (function(){var F = klTailApply(primitive["shen.find"], V344, V345); return (mustBoolean(klTailApply(primitive["empty?"], F)) === true) ? (new Trampoline(primitive["simple-error"], "input not found\n")) : (F);})() ;}, 2);

defun("shen.make-key", function(V348, V349) { return (function(){var Atom = klTailApply(primitive["hd"], klTailApply(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), V348, klFun(function(E) { return (mustBoolean(klTailApply(primitive["cons?"], E)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "parse error here: ", klTailApply(primitive["shen.app"], E, "\n", new Symbol("shen.s"))))) : (new Trampoline(primitive["simple-error"], "parse error\n"));}, 1))); return (mustBoolean(klTailApply(primitive["integer?"], Atom)) === true) ? (klFun(function(X) { return new Trampoline(primitive["="], X, klTailApply(primitive["nth"], klTailApply(primitive["+"], Atom, 1), klTailApply(primitive["reverse"], V349)));}, 1)) : (klFun(function(X) { return new Trampoline(primitive["shen.prefix?"], V348, klTailApply(primitive["shen.trim-gubbins"], klTailApply(primitive["snd"], X)));}, 1));})() ;}, 2);

defun("shen.trim-gubbins", function(V351) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V351)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V351), klTailApply(primitive["shen.space"]))))) === true) ? (new Trampoline(primitive["shen.trim-gubbins"], klTailApply(primitive["tl"], V351))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V351)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V351), klTailApply(primitive["shen.newline"]))))) === true) ? (new Trampoline(primitive["shen.trim-gubbins"], klTailApply(primitive["tl"], V351))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V351)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V351), klTailApply(primitive["shen.carriage-return"]))))) === true) ? (new Trampoline(primitive["shen.trim-gubbins"], klTailApply(primitive["tl"], V351))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V351)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V351), klTailApply(primitive["shen.tab"]))))) === true) ? (new Trampoline(primitive["shen.trim-gubbins"], klTailApply(primitive["tl"], V351))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V351)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V351), klTailApply(primitive["shen.left-round"]))))) === true) ? (new Trampoline(primitive["shen.trim-gubbins"], klTailApply(primitive["tl"], V351))) : ((mustBoolean(true) === true) ? (V351) : (err("no cond match"))))))) ;}, 1);

defun("shen.space", function() { return 32 ;}, 0);

defun("shen.tab", function() { return 9 ;}, 0);

defun("shen.left-round", function() { return 40 ;}, 0);

defun("shen.find", function(V360, V361) { return (mustBoolean(klTailApply(primitive["="], null, V361)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V361)) && mustBoolean(klTailApply(V360, klTailApply(primitive["hd"], V361))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V361), klTailApply(primitive["shen.find"], V360, klTailApply(primitive["tl"], V361)))) : ((mustBoolean(klTailApply(primitive["cons?"], V361)) === true) ? (new Trampoline(primitive["shen.find"], V360, klTailApply(primitive["tl"], V361))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.find"))) : (err("no cond match"))))) ;}, 2);

defun("shen.prefix?", function(V375, V376) { return (mustBoolean(klTailApply(primitive["="], null, V375)) === true) ? (true) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V375)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V376)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V376), klTailApply(primitive["hd"], V375))))))) === true) ? (new Trampoline(primitive["shen.prefix?"], klTailApply(primitive["tl"], V375), klTailApply(primitive["tl"], V376))) : ((mustBoolean(true) === true) ? (false) : (err("no cond match")))) ;}, 2);

defun("shen.print-past-inputs", function(V388, V389, V390) { return (mustBoolean(klTailApply(primitive["="], null, V389)) === true) ? (new Symbol("_")) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V389)) && mustBoolean(klTailApply(primitive["not"], klTailApply(V388, klTailApply(primitive["hd"], V389)))))) === true) ? (new Trampoline(primitive["shen.print-past-inputs"], V388, klTailApply(primitive["tl"], V389), klTailApply(primitive["+"], V390, 1))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V389)) && mustBoolean(klTailApply(primitive["tuple?"], klTailApply(primitive["hd"], V389))))) === true) ? ((function(){klTailApply(primitive["shen.prhush"], klTailApply(primitive["shen.app"], V390, ". ", new Symbol("shen.a")), klTailApply(primitive["stoutput"])); return (function(){klTailApply(primitive["shen.prbytes"], klTailApply(primitive["snd"], klTailApply(primitive["hd"], V389))); return new Trampoline(primitive["shen.print-past-inputs"], V388, klTailApply(primitive["tl"], V389), klTailApply(primitive["+"], V390, 1));})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.print-past-inputs"))) : (err("no cond match"))))) ;}, 3);

defun("shen.toplevel_evaluate", function(V393, V394) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V393)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V393))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V393)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V393)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V393))))) && mustBoolean(klTailApply(primitive["="], true, V394)))))))))))) === true) ? (new Trampoline(primitive["shen.typecheck-and-evaluate"], klTailApply(primitive["hd"], V393), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V393))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V393)) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V393))))) === true) ? ((function(){klTailApply(primitive["shen.toplevel_evaluate"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], V393), null), V394); return (function(){klTailApply(primitive["nl"], 1); return new Trampoline(primitive["shen.toplevel_evaluate"], klTailApply(primitive["tl"], V393), V394);})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V393)) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V393))) && mustBoolean(klTailApply(primitive["="], true, V394)))))) === true) ? (new Trampoline(primitive["shen.typecheck-and-evaluate"], klTailApply(primitive["hd"], V393), klTailApply(primitive["gensym"], new Symbol("A")))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V393)) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V393))) && mustBoolean(klTailApply(primitive["="], false, V394)))))) === true) ? ((function(){var Eval = klTailApply(primitive["shen.eval-without-macros"], klTailApply(primitive["hd"], V393)); return new Trampoline(primitive["print"], Eval);})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.toplevel_evaluate"))) : (err("no cond match")))))) ;}, 2);

defun("shen.typecheck-and-evaluate", function(V397, V398) { return (function(){var Typecheck = klTailApply(primitive["shen.typecheck"], V397, V398); return (mustBoolean(klTailApply(primitive["="], Typecheck, false)) === true) ? (new Trampoline(primitive["simple-error"], "type error\n")) : ((function(){var Eval = klTailApply(primitive["shen.eval-without-macros"], V397); return (function(){var Type = klTailApply(primitive["shen.pretty-type"], Typecheck); return new Trampoline(primitive["shen.prhush"], klTailApply(primitive["shen.app"], Eval, klTailApply(primitive["cn"], " : ", klTailApply(primitive["shen.app"], Type, "", new Symbol("shen.r"))), new Symbol("shen.s")), klTailApply(primitive["stoutput"]));})();})());})() ;}, 2);

defun("shen.pretty-type", function(V400) { return new Trampoline(primitive["shen.mult_subst"], klTailApply(primitive["value"], new Symbol("shen.*alphabet*")), klTailApply(primitive["shen.extract-pvars"], V400), V400) ;}, 1);

defun("shen.extract-pvars", function(V406) { return (mustBoolean(klTailApply(primitive["shen.pvar?"], V406)) === true) ? (new Trampoline(primitive["cons"], V406, null)) : ((mustBoolean(klTailApply(primitive["cons?"], V406)) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["shen.extract-pvars"], klTailApply(primitive["hd"], V406)), klTailApply(primitive["shen.extract-pvars"], klTailApply(primitive["tl"], V406)))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match")))) ;}, 1);

defun("shen.mult_subst", function(V414, V415, V416) { return (mustBoolean(klTailApply(primitive["="], null, V414)) === true) ? (V416) : ((mustBoolean(klTailApply(primitive["="], null, V415)) === true) ? (V416) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V414)) && mustBoolean(klTailApply(primitive["cons?"], V415)))) === true) ? (new Trampoline(primitive["shen.mult_subst"], klTailApply(primitive["tl"], V414), klTailApply(primitive["tl"], V415), klTailApply(primitive["subst"], klTailApply(primitive["hd"], V414), klTailApply(primitive["hd"], V415), V416))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.mult_subst"))) : (err("no cond match"))))) ;}, 3);

defun("shen.shen->kl", function(V419, V420) { return new Trampoline(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<define>"], X);}, 1), klTailApply(primitive["cons"], V419, V420), klFun(function(X) { return new Trampoline(primitive["shen.shen-syntax-error"], V419, X);}, 1)) ;}, 2);

defun("shen.shen-syntax-error", function(V427, V428) { return (mustBoolean(klTailApply(primitive["cons?"], V428)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "syntax error in ", klTailApply(primitive["shen.app"], V427, klTailApply(primitive["cn"], " here:\n\n ", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.next-50"], 50, klTailApply(primitive["hd"], V428)), "\n", new Symbol("shen.a"))), new Symbol("shen.a"))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "syntax error in ", klTailApply(primitive["shen.app"], V427, "\n", new Symbol("shen.a"))))) : (err("no cond match"))) ;}, 2);

defun("shen.<define>", function(V430) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltname$gt = klTailApply(primitive["shen.<name>"], V430); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltname$gt))) === true) ? ((function(){var Parse$unshen$do$ltsignature$gt = klTailApply(primitive["shen.<signature>"], Parse$unshen$do$ltname$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsignature$gt))) === true) ? ((function(){var Parse$unshen$do$ltrules$gt = klTailApply(primitive["shen.<rules>"], Parse$unshen$do$ltsignature$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrules$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltrules$gt), klTailApply(primitive["shen.compile_to_machine_code"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltname$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltrules$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$unshen$do$ltname$gt = klTailApply(primitive["shen.<name>"], V430); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltname$gt))) === true) ? ((function(){var Parse$unshen$do$ltrules$gt = klTailApply(primitive["shen.<rules>"], Parse$unshen$do$ltname$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrules$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltrules$gt), klTailApply(primitive["shen.compile_to_machine_code"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltname$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltrules$gt)))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<name>", function(V432) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V432))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V432)); return new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V432)), klTailApply(primitive["shen.hdtl"], V432))), (mustBoolean((mustBoolean(klTailApply(primitive["symbol?"], Parse$unX)) && mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["shen.sysfunc?"], Parse$unX))))) === true) ? (Parse$unX) : (klTailApply(primitive["simple-error"], klTailApply(primitive["shen.app"], Parse$unX, " is not a legitimate function name.\n", new Symbol("shen.a")))));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.sysfunc?", function(V434) { return new Trampoline(primitive["element?"], V434, klTailApply(primitive["get"], klTailApply(primitive["intern"], "shen"), new Symbol("shen.external-symbols"), klTailApply(primitive["value"], new Symbol("*property-vector*")))) ;}, 1);

defun("shen.<signature>", function(V436) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V436))) && mustBoolean(klTailApply(primitive["="], new Symbol("{"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V436)))))) === true) ? ((function(){var Parse$unshen$do$ltsignature_help$gt = klTailApply(primitive["shen.<signature-help>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V436)), klTailApply(primitive["shen.hdtl"], V436))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsignature_help$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltsignature_help$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("}"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltsignature_help$gt)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltsignature_help$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsignature_help$gt))), klTailApply(primitive["shen.demodulate"], klTailApply(primitive["shen.curry-type"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsignature_help$gt))))) : (new Trampoline(primitive["fail"]))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.curry-type", function(V438) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V438)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V438))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("-->"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V438)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V438)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V438))))) && mustBoolean(klTailApply(primitive["="], new Symbol("-->"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V438)))))))))))))))) === true) ? (new Trampoline(primitive["shen.curry-type"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], V438), klTailApply(primitive["cons"], new Symbol("-->"), klTailApply(primitive["cons"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V438)), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V438)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V438))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("*"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V438)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V438)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V438))))) && mustBoolean(klTailApply(primitive["="], new Symbol("*"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V438)))))))))))))))) === true) ? (new Trampoline(primitive["shen.curry-type"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], V438), klTailApply(primitive["cons"], new Symbol("*"), klTailApply(primitive["cons"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V438)), null))))) : ((mustBoolean(klTailApply(primitive["cons?"], V438)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.curry-type"], Z);}, 1), V438)) : ((mustBoolean(true) === true) ? (V438) : (err("no cond match"))))) ;}, 1);

defun("shen.<signature-help>", function(V440) { return (function(){var YaccParse = (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V440))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V440)); return (function(){var Parse$unshen$do$ltsignature_help$gt = klTailApply(primitive["shen.<signature-help>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V440)), klTailApply(primitive["shen.hdtl"], V440))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsignature_help$gt))) === true) ? ((mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["element?"], Parse$unX, klTailApply(primitive["cons"], new Symbol("{"), klTailApply(primitive["cons"], new Symbol("}"), null))))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltsignature_help$gt), klTailApply(primitive["cons"], Parse$unX, klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsignature_help$gt)))) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})();})()) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$un$lte$gt = klTailApply(primitive["<e>"], V440); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), null)) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<rules>", function(V442) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltrule$gt = klTailApply(primitive["shen.<rule>"], V442); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrule$gt))) === true) ? ((function(){var Parse$unshen$do$ltrules$gt = klTailApply(primitive["shen.<rules>"], Parse$unshen$do$ltrule$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrules$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltrules$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.linearise"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltrule$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltrules$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$unshen$do$ltrule$gt = klTailApply(primitive["shen.<rule>"], V442); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrule$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltrule$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.linearise"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltrule$gt)), null))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<rule>", function(V444) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltpatterns$gt = klTailApply(primitive["shen.<patterns>"], V444); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpatterns$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("->"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)))))) === true) ? ((function(){var Parse$unshen$do$ltaction$gt = klTailApply(primitive["shen.<action>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltaction$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("where"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt)))))) === true) ? ((function(){var Parse$unshen$do$ltguard$gt = klTailApply(primitive["shen.<guard>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltguard$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltguard$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltguard$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt), null))), null)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$3 = (function(){var Parse$unshen$do$ltpatterns$gt = klTailApply(primitive["shen.<patterns>"], V444); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpatterns$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("->"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)))))) === true) ? ((function(){var Parse$unshen$do$ltaction$gt = klTailApply(primitive["shen.<action>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltaction$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt), null)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$3, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$4 = (function(){var Parse$unshen$do$ltpatterns$gt = klTailApply(primitive["shen.<patterns>"], V444); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpatterns$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("<-"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)))))) === true) ? ((function(){var Parse$unshen$do$ltaction$gt = klTailApply(primitive["shen.<action>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltaction$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("where"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt)))))) === true) ? ((function(){var Parse$unshen$do$ltguard$gt = klTailApply(primitive["shen.<guard>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltguard$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltguard$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltguard$gt), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.choicepoint!"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt), null)), null))), null)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$4, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$unshen$do$ltpatterns$gt = klTailApply(primitive["shen.<patterns>"], V444); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpatterns$gt))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt))) && mustBoolean(klTailApply(primitive["="], new Symbol("<-"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)))))) === true) ? ((function(){var Parse$unshen$do$ltaction$gt = klTailApply(primitive["shen.<action>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltaction$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltaction$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.choicepoint!"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltaction$gt), null)), null)))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse$4);})()) : (YaccParse$3);})()) : (YaccParse);})() ;}, 1);

defun("shen.fail_if", function(V447, V448) { return (mustBoolean(klTailApply(V447, V448)) === true) ? (new Trampoline(primitive["fail"])) : (V448) ;}, 2);

defun("shen.succeeds?", function(V454) { return (mustBoolean(klTailApply(primitive["="], V454, klTailApply(primitive["fail"]))) === true) ? (false) : ((mustBoolean(true) === true) ? (true) : (err("no cond match"))) ;}, 1);

defun("shen.<patterns>", function(V456) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltpattern$gt = klTailApply(primitive["shen.<pattern>"], V456); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern$gt))) === true) ? ((function(){var Parse$unshen$do$ltpatterns$gt = klTailApply(primitive["shen.<patterns>"], Parse$unshen$do$ltpattern$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpatterns$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltpatterns$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpatterns$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$un$lte$gt = klTailApply(primitive["<e>"], V456); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), null)) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<pattern>", function(V463) { return (function(){var YaccParse = (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V463))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))))) && mustBoolean(klTailApply(primitive["="], new Symbol("@p"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))))))) === true) ? ((function(){var Parse$unshen$do$ltpattern1$gt = klTailApply(primitive["shen.<pattern1>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern1$gt))) === true) ? ((function(){var Parse$unshen$do$ltpattern2$gt = klTailApply(primitive["shen.<pattern2>"], Parse$unshen$do$ltpattern1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))), klTailApply(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern1$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern2$gt), null))))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$3 = (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V463))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))))) && mustBoolean(klTailApply(primitive["="], new Symbol("cons"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))))))) === true) ? ((function(){var Parse$unshen$do$ltpattern1$gt = klTailApply(primitive["shen.<pattern1>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern1$gt))) === true) ? ((function(){var Parse$unshen$do$ltpattern2$gt = klTailApply(primitive["shen.<pattern2>"], Parse$unshen$do$ltpattern1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))), klTailApply(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern1$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern2$gt), null))))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse$3, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$4 = (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V463))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))))) && mustBoolean(klTailApply(primitive["="], new Symbol("@v"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))))))) === true) ? ((function(){var Parse$unshen$do$ltpattern1$gt = klTailApply(primitive["shen.<pattern1>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern1$gt))) === true) ? ((function(){var Parse$unshen$do$ltpattern2$gt = klTailApply(primitive["shen.<pattern2>"], Parse$unshen$do$ltpattern1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))), klTailApply(primitive["cons"], new Symbol("@v"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern1$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern2$gt), null))))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse$4, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$5 = (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V463))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))))) && mustBoolean(klTailApply(primitive["="], new Symbol("@s"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))))))) === true) ? ((function(){var Parse$unshen$do$ltpattern1$gt = klTailApply(primitive["shen.<pattern1>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern1$gt))) === true) ? ((function(){var Parse$unshen$do$ltpattern2$gt = klTailApply(primitive["shen.<pattern2>"], Parse$unshen$do$ltpattern1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))), klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern1$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern2$gt), null))))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse$5, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$6 = (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V463))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))))) && mustBoolean(klTailApply(primitive["="], new Symbol("vector"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))))))) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))))))) && mustBoolean(klTailApply(primitive["="], 0, klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))), klTailApply(primitive["shen.hdtl"], klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463))))))))))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V463)))), klTailApply(primitive["cons"], new Symbol("vector"), klTailApply(primitive["cons"], 0, null)))) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"]))) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse$6, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$7 = (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V463))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V463)); return (mustBoolean(klTailApply(primitive["cons?"], Parse$unX)) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V463)), klTailApply(primitive["shen.hdtl"], V463))), klTailApply(primitive["shen.constructor-error"], Parse$unX))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse$7, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$unshen$do$ltsimple$unpattern$gt = klTailApply(primitive["shen.<simple_pattern>"], V463); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsimple$unpattern$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltsimple$unpattern$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsimple$unpattern$gt))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse$7);})()) : (YaccParse$6);})()) : (YaccParse$5);})()) : (YaccParse$4);})()) : (YaccParse$3);})()) : (YaccParse);})() ;}, 1);

defun("shen.constructor-error", function(V465) { return new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], V465, " is not a legitimate constructor\n", new Symbol("shen.a"))) ;}, 1);

defun("shen.<simple_pattern>", function(V467) { return (function(){var YaccParse = (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V467))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V467)); return (mustBoolean(klTailApply(primitive["="], Parse$unX, new Symbol("_"))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V467)), klTailApply(primitive["shen.hdtl"], V467))), klTailApply(primitive["gensym"], new Symbol("Parse_Y")))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"])); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V467))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V467)); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["element?"], Parse$unX, klTailApply(primitive["cons"], new Symbol("->"), klTailApply(primitive["cons"], new Symbol("<-"), null))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V467)), klTailApply(primitive["shen.hdtl"], V467))), Parse$unX)) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]))) : (YaccParse);})() ;}, 1);

defun("shen.<pattern1>", function(V469) { return (function(){var Parse$unshen$do$ltpattern$gt = klTailApply(primitive["shen.<pattern>"], V469); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltpattern$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern$gt))) : (new Trampoline(primitive["fail"]));})() ;}, 1);

defun("shen.<pattern2>", function(V471) { return (function(){var Parse$unshen$do$ltpattern$gt = klTailApply(primitive["shen.<pattern>"], V471); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpattern$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltpattern$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpattern$gt))) : (new Trampoline(primitive["fail"]));})() ;}, 1);

defun("shen.<action>", function(V473) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V473))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V473)); return new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V473)), klTailApply(primitive["shen.hdtl"], V473))), Parse$unX);})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<guard>", function(V475) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V475))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V475)); return new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V475)), klTailApply(primitive["shen.hdtl"], V475))), Parse$unX);})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.compile_to_machine_code", function(V478, V479) { return (function(){var Lambda$pl = klTailApply(primitive["shen.compile_to_lambda+"], V478, V479); return (function(){var KL = klTailApply(primitive["shen.compile_to_kl"], V478, Lambda$pl); return (function(){var Record = klTailApply(primitive["shen.record-source"], V478, KL); return KL;})();})();})() ;}, 2);

defun("shen.record-source", function(V484, V485) { return (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*installing-kl*"))) === true) ? (new Symbol("shen.skip")) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["put"], V484, new Symbol("shen.source"), V485, klTailApply(primitive["value"], new Symbol("*property-vector*")))) : (err("no cond match"))) ;}, 2);

defun("shen.compile_to_lambda+", function(V488, V489) { return (function(){var Arity = klTailApply(primitive["shen.aritycheck"], V488, V489); return (function(){var UpDateSymbolTable = klTailApply(primitive["shen.update-symbol-table"], V488, Arity); return (function(){var Free = klTailApply(primitive["for-each"], klFun(function(Rule) { return new Trampoline(primitive["shen.free_variable_check"], V488, Rule);}, 1), V489); return (function(){var Variables = klTailApply(primitive["shen.parameters"], Arity); return (function(){var Strip = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.strip-protect"], X);}, 1), V489); return (function(){var Abstractions = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.abstract_rule"], X);}, 1), Strip); return (function(){var Applications = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.application_build"], Variables, X);}, 1), Abstractions); return new Trampoline(primitive["cons"], Variables, klTailApply(primitive["cons"], Applications, null));})();})();})();})();})();})();})() ;}, 2);

defun("shen.update-symbol-table", function(V492, V493) { return (mustBoolean(klTailApply(primitive["="], 0, V493)) === true) ? (new Symbol("shen.skip")) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["put"], V492, new Symbol("shen.lambda-form"), klTailApply(primitive["eval-kl"], klTailApply(primitive["shen.lambda-form"], V492, V493)), klTailApply(primitive["value"], new Symbol("*property-vector*")))) : (err("no cond match"))) ;}, 2);

defun("shen.free_variable_check", function(V496, V497) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V497)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V497))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V497)))))))) === true) ? ((function(){var Bound = klTailApply(primitive["shen.extract_vars"], klTailApply(primitive["hd"], V497)); return (function(){var Free = klTailApply(primitive["shen.extract_free_vars"], Bound, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V497))); return new Trampoline(primitive["shen.free_variable_warnings"], V496, Free);})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.free_variable_check"))) : (err("no cond match"))) ;}, 2);

defun("shen.extract_vars", function(V499) { return (mustBoolean(klTailApply(primitive["variable?"], V499)) === true) ? (new Trampoline(primitive["cons"], V499, null)) : ((mustBoolean(klTailApply(primitive["cons?"], V499)) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["shen.extract_vars"], klTailApply(primitive["hd"], V499)), klTailApply(primitive["shen.extract_vars"], klTailApply(primitive["tl"], V499)))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match")))) ;}, 1);

defun("shen.extract_free_vars", function(V511, V512) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V512)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V512))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V512)))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V512), new Symbol("protect"))))))))) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["variable?"], V512)) && mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["element?"], V512, V511))))) === true) ? (new Trampoline(primitive["cons"], V512, null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V512)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("lambda"), klTailApply(primitive["hd"], V512))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V512))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V512)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V512))))))))))))) === true) ? (new Trampoline(primitive["shen.extract_free_vars"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V512)), V511), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V512))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V512)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("let"), klTailApply(primitive["hd"], V512))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V512))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V512)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V512))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V512)))))))))))))))) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["shen.extract_free_vars"], V511, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V512)))), klTailApply(primitive["shen.extract_free_vars"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V512)), V511), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V512))))))) : ((mustBoolean(klTailApply(primitive["cons?"], V512)) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["shen.extract_free_vars"], V511, klTailApply(primitive["hd"], V512)), klTailApply(primitive["shen.extract_free_vars"], V511, klTailApply(primitive["tl"], V512)))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match"))))))) ;}, 2);

defun("shen.free_variable_warnings", function(V517, V518) { return (mustBoolean(klTailApply(primitive["="], null, V518)) === true) ? (new Symbol("_")) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "error: the following variables are free in ", klTailApply(primitive["shen.app"], V517, klTailApply(primitive["cn"], ": ", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.list_variables"], V518), "", new Symbol("shen.a"))), new Symbol("shen.a"))))) : (err("no cond match"))) ;}, 2);

defun("shen.list_variables", function(V520) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V520)) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V520))))) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["str"], klTailApply(primitive["hd"], V520)), ".")) : ((mustBoolean(klTailApply(primitive["cons?"], V520)) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["str"], klTailApply(primitive["hd"], V520)), klTailApply(primitive["cn"], ", ", klTailApply(primitive["shen.list_variables"], klTailApply(primitive["tl"], V520))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.list_variables"))) : (err("no cond match")))) ;}, 1);

defun("shen.strip-protect", function(V522) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V522)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V522))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V522)))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V522), new Symbol("protect"))))))))) === true) ? (new Trampoline(primitive["shen.strip-protect"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V522)))) : ((mustBoolean(klTailApply(primitive["cons?"], V522)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.strip-protect"], Z);}, 1), V522)) : ((mustBoolean(true) === true) ? (V522) : (err("no cond match")))) ;}, 1);

defun("shen.linearise", function(V524) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V524)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V524))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V524)))))))) === true) ? (new Trampoline(primitive["shen.linearise_help"], klTailApply(primitive["shen.flatten"], klTailApply(primitive["hd"], V524)), klTailApply(primitive["hd"], V524), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V524)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.linearise"))) : (err("no cond match"))) ;}, 1);

defun("shen.flatten", function(V526) { return (mustBoolean(klTailApply(primitive["="], null, V526)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["cons?"], V526)) === true) ? (new Trampoline(primitive["append"], klTailApply(primitive["shen.flatten"], klTailApply(primitive["hd"], V526)), klTailApply(primitive["shen.flatten"], klTailApply(primitive["tl"], V526)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], V526, null)) : (err("no cond match")))) ;}, 1);

defun("shen.linearise_help", function(V530, V531, V532) { return (mustBoolean(klTailApply(primitive["="], null, V530)) === true) ? (new Trampoline(primitive["cons"], V531, klTailApply(primitive["cons"], V532, null))) : ((mustBoolean(klTailApply(primitive["cons?"], V530)) === true) ? ((mustBoolean((mustBoolean(klTailApply(primitive["variable?"], klTailApply(primitive["hd"], V530))) && mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V530), klTailApply(primitive["tl"], V530))))) === true) ? ((function(){var Var = klTailApply(primitive["gensym"], klTailApply(primitive["hd"], V530)); return (function(){var NewAction = klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V530), klTailApply(primitive["cons"], Var, null))), klTailApply(primitive["cons"], V532, null))); return (function(){var NewPatts = klTailApply(primitive["shen.linearise_X"], klTailApply(primitive["hd"], V530), Var, V531); return new Trampoline(primitive["shen.linearise_help"], klTailApply(primitive["tl"], V530), NewPatts, NewAction);})();})();})()) : (new Trampoline(primitive["shen.linearise_help"], klTailApply(primitive["tl"], V530), V531, V532))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.linearise_help"))) : (err("no cond match")))) ;}, 3);

defun("shen.linearise_X", function(V545, V546, V547) { return (mustBoolean(klTailApply(primitive["="], V547, V545)) === true) ? (V546) : ((mustBoolean(klTailApply(primitive["cons?"], V547)) === true) ? ((function(){var L = klTailApply(primitive["shen.linearise_X"], V545, V546, klTailApply(primitive["hd"], V547)); return (mustBoolean(klTailApply(primitive["="], L, klTailApply(primitive["hd"], V547))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V547), klTailApply(primitive["shen.linearise_X"], V545, V546, klTailApply(primitive["tl"], V547)))) : (new Trampoline(primitive["cons"], L, klTailApply(primitive["tl"], V547)));})()) : ((mustBoolean(true) === true) ? (V547) : (err("no cond match")))) ;}, 3);

defun("shen.aritycheck", function(V550, V551) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V551)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V551))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V551)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V551))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V551))))))))))) === true) ? ((function(){klTailApply(primitive["shen.aritycheck-action"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V551)))); return new Trampoline(primitive["shen.aritycheck-name"], V550, klTailApply(primitive["arity"], V550), klTailApply(primitive["length"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V551))));})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V551)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V551))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V551)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V551))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V551))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V551)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V551))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V551)))))))))))))))))))) === true) ? ((mustBoolean(klTailApply(primitive["="], klTailApply(primitive["length"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V551))), klTailApply(primitive["length"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V551)))))) === true) ? ((function(){klTailApply(primitive["shen.aritycheck-action"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V551)))); return new Trampoline(primitive["shen.aritycheck"], V550, klTailApply(primitive["tl"], V551));})()) : (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "arity error in ", klTailApply(primitive["shen.app"], V550, "\n", new Symbol("shen.a")))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.aritycheck"))) : (err("no cond match")))) ;}, 2);

defun("shen.aritycheck-name", function(V564, V565, V566) { return (mustBoolean(klTailApply(primitive["="], -1, V565)) === true) ? (V566) : ((mustBoolean(klTailApply(primitive["="], V566, V565)) === true) ? (V566) : ((mustBoolean(true) === true) ? ((function(){klTailApply(primitive["shen.prhush"], klTailApply(primitive["cn"], "\nwarning: changing the arity of ", klTailApply(primitive["shen.app"], V564, " can cause errors.\n", new Symbol("shen.a"))), klTailApply(primitive["stoutput"])); return V566;})()) : (err("no cond match")))) ;}, 3);

defun("shen.aritycheck-action", function(V572) { return (mustBoolean(klTailApply(primitive["cons?"], V572)) === true) ? ((function(){klTailApply(primitive["shen.aah"], klTailApply(primitive["hd"], V572), klTailApply(primitive["tl"], V572)); return new Trampoline(primitive["for-each"], klFun(function(Y) { return new Trampoline(primitive["shen.aritycheck-action"], Y);}, 1), V572);})()) : ((mustBoolean(true) === true) ? (new Symbol("shen.skip")) : (err("no cond match"))) ;}, 1);

defun("shen.aah", function(V575, V576) { return (function(){var Arity = klTailApply(primitive["arity"], V575); return (function(){var Len = klTailApply(primitive["length"], V576); return (mustBoolean((mustBoolean(klTailApply(primitive[">"], Arity, -1)) && mustBoolean(klTailApply(primitive[">"], Len, Arity)))) === true) ? (new Trampoline(primitive["shen.prhush"], klTailApply(primitive["cn"], "warning: ", klTailApply(primitive["shen.app"], V575, klTailApply(primitive["cn"], " might not like ", klTailApply(primitive["shen.app"], Len, klTailApply(primitive["cn"], " argument", klTailApply(primitive["shen.app"], (mustBoolean(klTailApply(primitive[">"], Len, 1)) === true) ? ("s") : (""), ".\n", new Symbol("shen.a"))), new Symbol("shen.a"))), new Symbol("shen.a"))), klTailApply(primitive["stoutput"]))) : (new Symbol("shen.skip"));})();})() ;}, 2);

defun("shen.abstract_rule", function(V578) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V578)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V578))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V578)))))))) === true) ? (new Trampoline(primitive["shen.abstraction_build"], klTailApply(primitive["hd"], V578), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V578)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.abstract_rule"))) : (err("no cond match"))) ;}, 1);

defun("shen.abstraction_build", function(V581, V582) { return (mustBoolean(klTailApply(primitive["="], null, V581)) === true) ? (V582) : ((mustBoolean(klTailApply(primitive["cons?"], V581)) === true) ? (new Trampoline(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V581), klTailApply(primitive["cons"], klTailApply(primitive["shen.abstraction_build"], klTailApply(primitive["tl"], V581), V582), null)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.abstraction_build"))) : (err("no cond match")))) ;}, 2);

defun("shen.parameters", function(V584) { return (mustBoolean(klTailApply(primitive["="], 0, V584)) === true) ? (null) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["gensym"], new Symbol("V")), klTailApply(primitive["shen.parameters"], klTailApply(primitive["-"], V584, 1)))) : (err("no cond match"))) ;}, 1);

defun("shen.application_build", function(V587, V588) { return (mustBoolean(klTailApply(primitive["="], null, V587)) === true) ? (V588) : ((mustBoolean(klTailApply(primitive["cons?"], V587)) === true) ? (new Trampoline(primitive["shen.application_build"], klTailApply(primitive["tl"], V587), klTailApply(primitive["cons"], V588, klTailApply(primitive["cons"], klTailApply(primitive["hd"], V587), null)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.application_build"))) : (err("no cond match")))) ;}, 2);

defun("shen.compile_to_kl", function(V591, V592) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V592)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V592))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V592)))))))) === true) ? ((function(){var Arity = klTailApply(primitive["shen.store-arity"], V591, klTailApply(primitive["length"], klTailApply(primitive["hd"], V592))); return (function(){var Reduce = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.reduce"], X);}, 1), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V592))); return (function(){var CondExpression = klTailApply(primitive["shen.cond-expression"], V591, klTailApply(primitive["hd"], V592), Reduce); return (function(){var TypeTable = (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*optimise*"))) === true) ? (klTailApply(primitive["shen.typextable"], klTailApply(primitive["shen.get-type"], V591), klTailApply(primitive["hd"], V592))) : (new Symbol("shen.skip")); return (function(){var TypedCondExpression = (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*optimise*"))) === true) ? (klTailApply(primitive["shen.assign-types"], klTailApply(primitive["hd"], V592), TypeTable, CondExpression)) : (CondExpression); return new Trampoline(primitive["cons"], new Symbol("defun"), klTailApply(primitive["cons"], V591, klTailApply(primitive["cons"], klTailApply(primitive["hd"], V592), klTailApply(primitive["cons"], TypedCondExpression, null))));})();})();})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.compile_to_kl"))) : (err("no cond match"))) ;}, 2);

defun("shen.get-type", function(V598) { return (mustBoolean(klTailApply(primitive["cons?"], V598)) === true) ? (new Symbol("shen.skip")) : ((mustBoolean(true) === true) ? ((function(){var FType = klTailApply(primitive["assoc"], V598, klTailApply(primitive["value"], new Symbol("shen.*signedfuncs*"))); return (mustBoolean(klTailApply(primitive["empty?"], FType)) === true) ? (new Symbol("shen.skip")) : (new Trampoline(primitive["tl"], FType));})()) : (err("no cond match"))) ;}, 1);

defun("shen.typextable", function(V609, V610) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V609)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V609))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("-->"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V609)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V609)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V609))))) && mustBoolean(klTailApply(primitive["cons?"], V610)))))))))))) === true) ? ((mustBoolean(klTailApply(primitive["variable?"], klTailApply(primitive["hd"], V609))) === true) ? (new Trampoline(primitive["shen.typextable"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V609))), klTailApply(primitive["tl"], V610))) : (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], V610), klTailApply(primitive["hd"], V609)), klTailApply(primitive["shen.typextable"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V609))), klTailApply(primitive["tl"], V610))))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match"))) ;}, 2);

defun("shen.assign-types", function(V614, V615, V616) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V616)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("let"), klTailApply(primitive["hd"], V616))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V616))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V616)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V616))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V616)))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V616)), klTailApply(primitive["cons"], klTailApply(primitive["shen.assign-types"], V614, V615, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V616)))), klTailApply(primitive["cons"], klTailApply(primitive["shen.assign-types"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V616)), V614), V615, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V616))))), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V616)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("lambda"), klTailApply(primitive["hd"], V616))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V616))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V616)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V616))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V616)), klTailApply(primitive["cons"], klTailApply(primitive["shen.assign-types"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V616)), V614), V615, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V616)))), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V616)) && mustBoolean(klTailApply(primitive["="], new Symbol("cond"), klTailApply(primitive["hd"], V616))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("cond"), klTailApply(primitive["map"], klFun(function(Y) { return new Trampoline(primitive["cons"], klTailApply(primitive["shen.assign-types"], V614, V615, klTailApply(primitive["hd"], Y)), klTailApply(primitive["cons"], klTailApply(primitive["shen.assign-types"], V614, V615, klTailApply(primitive["hd"], klTailApply(primitive["tl"], Y))), null));}, 1), klTailApply(primitive["tl"], V616)))) : ((mustBoolean(klTailApply(primitive["cons?"], V616)) === true) ? ((function(){var NewTable = klTailApply(primitive["shen.typextable"], klTailApply(primitive["shen.get-type"], klTailApply(primitive["hd"], V616)), klTailApply(primitive["tl"], V616)); return new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V616), klTailApply(primitive["map"], klFun(function(Y) { return new Trampoline(primitive["shen.assign-types"], V614, klTailApply(primitive["append"], V615, NewTable), Y);}, 1), klTailApply(primitive["tl"], V616)));})()) : ((mustBoolean(true) === true) ? ((function(){var AtomType = klTailApply(primitive["assoc"], V616, V615); return (mustBoolean(klTailApply(primitive["cons?"], AtomType)) === true) ? (new Trampoline(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], V616, klTailApply(primitive["cons"], klTailApply(primitive["tl"], AtomType), null)))) : ((mustBoolean(klTailApply(primitive["element?"], V616, V614)) === true) ? (V616) : (new Trampoline(primitive["shen.atom-type"], V616)));})()) : (err("no cond match")))))) ;}, 3);

defun("shen.atom-type", function(V618) { return (mustBoolean(klTailApply(primitive["string?"], V618)) === true) ? (new Trampoline(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], V618, klTailApply(primitive["cons"], new Symbol("string"), null)))) : ((mustBoolean(klTailApply(primitive["number?"], V618)) === true) ? (new Trampoline(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], V618, klTailApply(primitive["cons"], new Symbol("number"), null)))) : ((mustBoolean(klTailApply(primitive["boolean?"], V618)) === true) ? (new Trampoline(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], V618, klTailApply(primitive["cons"], new Symbol("boolean"), null)))) : ((mustBoolean(klTailApply(primitive["symbol?"], V618)) === true) ? (new Trampoline(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], V618, klTailApply(primitive["cons"], new Symbol("symbol"), null)))) : (V618)))) ;}, 1);

defun("shen.store-arity", function(V623, V624) { return (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*installing-kl*"))) === true) ? (new Symbol("shen.skip")) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["put"], V623, new Symbol("arity"), V624, klTailApply(primitive["value"], new Symbol("*property-vector*")))) : (err("no cond match"))) ;}, 2);

defun("shen.reduce", function(V626) { return (function(){klTailApply(primitive["set"], new Symbol("shen.*teststack*"), null); return (function(){var Result = klTailApply(primitive["shen.reduce_help"], V626); return new Trampoline(primitive["cons"], klTailApply(primitive["cons"], new Symbol(":"), klTailApply(primitive["cons"], new Symbol("shen.tests"), klTailApply(primitive["reverse"], klTailApply(primitive["value"], new Symbol("shen.*teststack*"))))), klTailApply(primitive["cons"], Result, null));})();})() ;}, 1);

defun("shen.reduce_help", function(V628) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V628)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V628))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cons"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V628))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V628)))))))))))))))))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["tl"], V628))); return (function(){var Abstraction = klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))), klTailApply(primitive["cons"], klTailApply(primitive["shen.ebr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V628)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))), null))), null))); return (function(){var Application = klTailApply(primitive["cons"], klTailApply(primitive["cons"], Abstraction, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["tl"], V628)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["tl"], V628)), null)); return new Trampoline(primitive["shen.reduce_help"], Application);})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V628)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V628))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("@p"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V628))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V628)))))))))))))))))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["cons"], new Symbol("tuple?"), klTailApply(primitive["tl"], V628))); return (function(){var Abstraction = klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))), klTailApply(primitive["cons"], klTailApply(primitive["shen.ebr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V628)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))), null))), null))); return (function(){var Application = klTailApply(primitive["cons"], klTailApply(primitive["cons"], Abstraction, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fst"), klTailApply(primitive["tl"], V628)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("snd"), klTailApply(primitive["tl"], V628)), null)); return new Trampoline(primitive["shen.reduce_help"], Application);})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V628)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V628))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("@v"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V628))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V628)))))))))))))))))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["cons"], new Symbol("shen.+vector?"), klTailApply(primitive["tl"], V628))); return (function(){var Abstraction = klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))), klTailApply(primitive["cons"], klTailApply(primitive["shen.ebr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V628)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))), null))), null))); return (function(){var Application = klTailApply(primitive["cons"], klTailApply(primitive["cons"], Abstraction, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hdv"), klTailApply(primitive["tl"], V628)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tlv"), klTailApply(primitive["tl"], V628)), null)); return new Trampoline(primitive["shen.reduce_help"], Application);})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V628)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V628))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("@s"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V628))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V628)))))))))))))))))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["cons"], new Symbol("shen.+string?"), klTailApply(primitive["tl"], V628))); return (function(){var Abstraction = klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))), klTailApply(primitive["cons"], klTailApply(primitive["shen.ebr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V628)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))), null))), null))); return (function(){var Application = klTailApply(primitive["cons"], klTailApply(primitive["cons"], Abstraction, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("pos"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V628)), klTailApply(primitive["cons"], 0, null))), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tlstr"), klTailApply(primitive["tl"], V628)), null)); return new Trampoline(primitive["shen.reduce_help"], Application);})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V628)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V628))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V628))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V628)))) && mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["variable?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))))))))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))), klTailApply(primitive["tl"], V628)))); return new Trampoline(primitive["shen.reduce_help"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))));})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V628)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V628))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V628))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V628)))))))))))))))))) === true) ? (new Trampoline(primitive["shen.reduce_help"], klTailApply(primitive["shen.ebr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V628)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V628))))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V628)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("where"), klTailApply(primitive["hd"], V628))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V628))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V628)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V628))))))))))))) === true) ? ((function(){klTailApply(primitive["shen.add_test"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V628))); return new Trampoline(primitive["shen.reduce_help"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V628))));})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V628)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V628))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V628)))))))) === true) ? ((function(){var Z = klTailApply(primitive["shen.reduce_help"], klTailApply(primitive["hd"], V628)); return (mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V628), Z)) === true) ? (V628) : (new Trampoline(primitive["shen.reduce_help"], klTailApply(primitive["cons"], Z, klTailApply(primitive["tl"], V628))));})()) : ((mustBoolean(true) === true) ? (V628) : (err("no cond match")))))))))) ;}, 1);

defun("shen.+string?", function(V630) { return (mustBoolean(klTailApply(primitive["="], "", V630)) === true) ? (false) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["string?"], V630)) : (err("no cond match"))) ;}, 1);

defun("shen.+vector?", function(V632) { return (mustBoolean(klTailApply(primitive["absvector?"], V632)) && mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["<-address"], V632, 0), 0))) ;}, 1);

defun("shen.ebr", function(V646, V647, V648) { return (mustBoolean(klTailApply(primitive["="], V648, V647)) === true) ? (V646) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V648)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], V648))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V648))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V648)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V648))))) && mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["occurrences"], V647, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V648))), 0)))))))))))) === true) ? (V648) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V648)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("lambda"), klTailApply(primitive["hd"], V648))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V648))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V648)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V648))))) && mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["occurrences"], V647, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V648))), 0)))))))))))) === true) ? (V648) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V648)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("let"), klTailApply(primitive["hd"], V648))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V648))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V648)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V648))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V648)))))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V648)), V647)))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V648)), klTailApply(primitive["cons"], klTailApply(primitive["shen.ebr"], V646, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V648)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V648)))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V648))))))) : ((mustBoolean(klTailApply(primitive["cons?"], V648)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["shen.ebr"], V646, V647, klTailApply(primitive["hd"], V648)), klTailApply(primitive["shen.ebr"], V646, V647, klTailApply(primitive["tl"], V648)))) : ((mustBoolean(true) === true) ? (V648) : (err("no cond match"))))))) ;}, 3);

defun("shen.add_test", function(V650) { return new Trampoline(primitive["set"], new Symbol("shen.*teststack*"), klTailApply(primitive["cons"], V650, klTailApply(primitive["value"], new Symbol("shen.*teststack*")))) ;}, 1);

defun("shen.cond-expression", function(V654, V655, V656) { return (function(){var Err = klTailApply(primitive["shen.err-condition"], V654); return (function(){var Cases = klTailApply(primitive["shen.case-form"], V656, Err); return (function(){var EncodeChoices = klTailApply(primitive["shen.encode-choices"], Cases, V654); return new Trampoline(primitive["shen.cond-form"], EncodeChoices);})();})();})() ;}, 3);

defun("shen.cond-form", function(V660) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V660)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V660))) && mustBoolean((mustBoolean(klTailApply(primitive["="], true, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V660)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V660)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V660))))))))))))) === true) ? (new Trampoline(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V660)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], new Symbol("cond"), V660)) : (err("no cond match"))) ;}, 1);

defun("shen.encode-choices", function(V665, V666) { return (mustBoolean(klTailApply(primitive["="], null, V665)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V665)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V665))) && mustBoolean((mustBoolean(klTailApply(primitive["="], true, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V665)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.choicepoint!"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V665))))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], true, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))), klTailApply(primitive["cons"], (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*installing-kl*"))) === true) ? (klTailApply(primitive["cons"], new Symbol("shen.sys-error"), klTailApply(primitive["cons"], V666, null))) : (klTailApply(primitive["cons"], new Symbol("shen.f_error"), klTailApply(primitive["cons"], V666, null))), klTailApply(primitive["cons"], new Symbol("Result"), null)))), null)))), null)), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V665)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V665))) && mustBoolean((mustBoolean(klTailApply(primitive["="], true, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V665)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.choicepoint!"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], true, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))), klTailApply(primitive["cons"], klTailApply(primitive["shen.cond-form"], klTailApply(primitive["shen.encode-choices"], klTailApply(primitive["tl"], V665), V666)), klTailApply(primitive["cons"], new Symbol("Result"), null)))), null)))), null)), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V665)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V665))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.choicepoint!"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], true, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Freeze"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("freeze"), klTailApply(primitive["cons"], klTailApply(primitive["shen.cond-form"], klTailApply(primitive["shen.encode-choices"], klTailApply(primitive["tl"], V665), V666)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V665)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("thaw"), klTailApply(primitive["cons"], new Symbol("Freeze"), null)), klTailApply(primitive["cons"], new Symbol("Result"), null)))), null)))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("thaw"), klTailApply(primitive["cons"], new Symbol("Freeze"), null)), null)))), null)))), null)), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V665)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V665))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V665))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V665), klTailApply(primitive["shen.encode-choices"], klTailApply(primitive["tl"], V665), V666))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.encode-choices"))) : (err("no cond match"))))))) ;}, 2);

defun("shen.case-form", function(V673, V674) { return (mustBoolean(klTailApply(primitive["="], null, V673)) === true) ? (new Trampoline(primitive["cons"], V674, null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V673)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V673))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.tests"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.choicepoint!"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673))))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673))))))))))))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], true, klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673))), klTailApply(primitive["shen.case-form"], klTailApply(primitive["tl"], V673), V674))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V673)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V673))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.tests"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673)))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673))))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], true, klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673))), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V673)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V673))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.tests"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], klTailApply(primitive["shen.embed-and"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V673))))), klTailApply(primitive["tl"], klTailApply(primitive["hd"], V673))), klTailApply(primitive["shen.case-form"], klTailApply(primitive["tl"], V673), V674))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.case-form"))) : (err("no cond match")))))) ;}, 2);

defun("shen.embed-and", function(V676) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V676)) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V676))))) === true) ? (new Trampoline(primitive["hd"], V676)) : ((mustBoolean(klTailApply(primitive["cons?"], V676)) === true) ? (new Trampoline(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V676), klTailApply(primitive["cons"], klTailApply(primitive["shen.embed-and"], klTailApply(primitive["tl"], V676)), null)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.embed-and"))) : (err("no cond match")))) ;}, 1);

defun("shen.err-condition", function(V678) { return new Trampoline(primitive["cons"], true, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.f_error"), klTailApply(primitive["cons"], V678, null)), null)) ;}, 1);

defun("shen.sys-error", function(V680) { return new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "system function ", klTailApply(primitive["shen.app"], V680, ": unexpected argument\n", new Symbol("shen.a")))) ;}, 1);

defun("thaw", function(V682) { return new Trampoline(V682) ;}, 1);

defun("eval", function(V684) { return (function(){var Macroexpand = klTailApply(primitive["shen.walk"], klFun(function(Y) { return new Trampoline(primitive["macroexpand"], Y);}, 1), V684); return (mustBoolean(klTailApply(primitive["shen.packaged?"], Macroexpand)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.eval-without-macros"], Z);}, 1), klTailApply(primitive["shen.package-contents"], Macroexpand))) : (new Trampoline(primitive["shen.eval-without-macros"], Macroexpand));})() ;}, 1);

defun("shen.eval-without-macros", function(V686) { return new Trampoline(primitive["eval-kl"], klTailApply(primitive["shen.elim-def"], klTailApply(primitive["shen.proc-input+"], V686))) ;}, 1);

defun("shen.proc-input+", function(V688) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V688)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("input+"), klTailApply(primitive["hd"], V688))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V688))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V688)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V688))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("input+"), klTailApply(primitive["cons"], klTailApply(primitive["shen.rcons_form"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V688))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V688))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V688)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.read+"), klTailApply(primitive["hd"], V688))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V688))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V688)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V688))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.read+"), klTailApply(primitive["cons"], klTailApply(primitive["shen.rcons_form"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V688))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V688))))) : ((mustBoolean(klTailApply(primitive["cons?"], V688)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.proc-input+"], Z);}, 1), V688)) : ((mustBoolean(true) === true) ? (V688) : (err("no cond match"))))) ;}, 1);

defun("shen.elim-def", function(V690) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V690)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("define"), klTailApply(primitive["hd"], V690))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V690))))))) === true) ? (new Trampoline(primitive["shen.shen->kl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V690)), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V690)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V690)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defmacro"), klTailApply(primitive["hd"], V690))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V690))))))) === true) ? ((function(){var Default = klTailApply(primitive["cons"], new Symbol("X"), klTailApply(primitive["cons"], new Symbol("->"), klTailApply(primitive["cons"], new Symbol("X"), null))); return (function(){var Def = klTailApply(primitive["shen.elim-def"], klTailApply(primitive["cons"], new Symbol("define"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V690)), klTailApply(primitive["append"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V690)), Default)))); return (function(){var MacroAdd = klTailApply(primitive["shen.add-macro"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V690))); return Def;})();})();})()) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V690)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defcc"), klTailApply(primitive["hd"], V690))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V690))))))) === true) ? (new Trampoline(primitive["shen.elim-def"], klTailApply(primitive["shen.yacc"], V690))) : ((mustBoolean(klTailApply(primitive["cons?"], V690)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.elim-def"], Z);}, 1), V690)) : ((mustBoolean(true) === true) ? (V690) : (err("no cond match")))))) ;}, 1);

defun("shen.add-macro", function(V692) { return (function(){var MacroReg = klTailApply(primitive["value"], new Symbol("shen.*macroreg*")); return (function(){var NewMacroReg = klTailApply(primitive["set"], new Symbol("shen.*macroreg*"), klTailApply(primitive["adjoin"], V692, klTailApply(primitive["value"], new Symbol("shen.*macroreg*")))); return (mustBoolean(klTailApply(primitive["="], MacroReg, NewMacroReg)) === true) ? (new Symbol("shen.skip")) : (new Trampoline(primitive["set"], new Symbol("*macros*"), klTailApply(primitive["cons"], klTailApply(primitive["function"], V692), klTailApply(primitive["value"], new Symbol("*macros*")))));})();})() ;}, 1);

defun("shen.packaged?", function(V700) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V700)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("package"), klTailApply(primitive["hd"], V700))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V700))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V700)))))))))) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match"))) ;}, 1);

defun("external", function(V702) { return new Trampoline(primitive["get/or"], V702, new Symbol("shen.external-symbols"), klFun(function() { return new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "package ", klTailApply(primitive["shen.app"], V702, " has not been used.\n", new Symbol("shen.a"))))}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);

defun("internal", function(V704) { return new Trampoline(primitive["get/or"], V704, new Symbol("shen.internal-symbols"), klFun(function() { return new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "package ", klTailApply(primitive["shen.app"], V704, " has not been used.\n", new Symbol("shen.a"))))}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);

defun("shen.package-contents", function(V708) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V708)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("package"), klTailApply(primitive["hd"], V708))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V708))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("null"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V708)))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V708)))))))))))) === true) ? (new Trampoline(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V708)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V708)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("package"), klTailApply(primitive["hd"], V708))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V708))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V708)))))))))) === true) ? (new Trampoline(primitive["shen.packageh"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V708)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V708))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V708))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.package-contents"))) : (err("no cond match")))) ;}, 1);

defun("shen.walk", function(V711, V712) { return (mustBoolean(klTailApply(primitive["cons?"], V712)) === true) ? (new Trampoline(V711, klTailApply(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.walk"], V711, Z);}, 1), V712))) : ((mustBoolean(true) === true) ? (new Trampoline(V711, V712)) : (err("no cond match"))) ;}, 2);

defun("compile", function(V716, V717, V718) { return (function(){var O = klTailApply(V716, klTailApply(primitive["cons"], V717, klTailApply(primitive["cons"], null, null))); return (mustBoolean((mustBoolean(klTailApply(primitive["="], klTailApply(primitive["fail"]), O)) || mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["empty?"], klTailApply(primitive["hd"], O)))))) === true) ? (new Trampoline(V718, O)) : (new Trampoline(primitive["shen.hdtl"], O));})() ;}, 3);

defun("fail-if", function(V721, V722) { return (mustBoolean(klTailApply(V721, V722)) === true) ? (new Trampoline(primitive["fail"])) : (V722) ;}, 2);

defun("@s", function(V725, V726) { return new Trampoline(primitive["cn"], V725, V726) ;}, 2);

defun("tc?", function() { return new Trampoline(primitive["value"], new Symbol("shen.*tc*")) ;}, 0);

defun("ps", function(V728) { return new Trampoline(primitive["get/or"], V728, new Symbol("shen.source"), klFun(function() { return new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], V728, " not found.\n", new Symbol("shen.a")))}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);

defun("stinput", function() { return new Trampoline(primitive["value"], new Symbol("*stinput*")) ;}, 0);

defun("<-address/or", function(V732, V733, V734) { return (function(){ try { return klTailApply(primitive["<-address"], V732, V733);} catch (err) { return klTailApply(klFun(function(E) { return new Trampoline(primitive["thaw"], V734);}, 1), err);} })() ;}, 3);

defun("value/or", function(V737, V738) { return (function(){ try { return klTailApply(primitive["value"], V737);} catch (err) { return klTailApply(klFun(function(E) { return new Trampoline(primitive["thaw"], V738);}, 1), err);} })() ;}, 2);

defun("vector", function(V740) { return (function(){var Vector = klTailApply(primitive["absvector"], klTailApply(primitive["+"], V740, 1)); return (function(){var ZeroStamp = klTailApply(primitive["address->"], Vector, 0, V740); return (function(){var Standard = (mustBoolean(klTailApply(primitive["="], V740, 0)) === true) ? (ZeroStamp) : (klTailApply(primitive["shen.fillvector"], ZeroStamp, 1, V740, klTailApply(primitive["fail"]))); return Standard;})();})();})() ;}, 1);

defun("shen.fillvector", function(V746, V747, V748, V749) { return (mustBoolean(klTailApply(primitive["="], V748, V747)) === true) ? (new Trampoline(primitive["address->"], V746, V748, V749)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.fillvector"], klTailApply(primitive["address->"], V746, V747, V749), klTailApply(primitive["+"], 1, V747), V748, V749)) : (err("no cond match"))) ;}, 4);

defun("vector?", function(V751) { return (mustBoolean(klTailApply(primitive["absvector?"], V751)) && mustBoolean((function(){var X = klTailApply(primitive["<-address/or"], V751, 0, klFun(function() { return -1}, 0)); return (mustBoolean(klTailApply(primitive["number?"], X)) && mustBoolean(klTailApply(primitive[">="], X, 0)));})())) ;}, 1);

defun("vector->", function(V755, V756, V757) { return (mustBoolean(klTailApply(primitive["="], V756, 0)) === true) ? (new Trampoline(primitive["simple-error"], "cannot access 0th element of a vector\n")) : (new Trampoline(primitive["address->"], V755, V756, V757)) ;}, 3);

defun("<-vector", function(V760, V761) { return (mustBoolean(klTailApply(primitive["="], V761, 0)) === true) ? (new Trampoline(primitive["simple-error"], "cannot access 0th element of a vector\n")) : ((function(){var VectorElement = klTailApply(primitive["<-address"], V760, V761); return (mustBoolean(klTailApply(primitive["="], VectorElement, klTailApply(primitive["fail"]))) === true) ? (new Trampoline(primitive["simple-error"], "vector element not found\n")) : (VectorElement);})()) ;}, 2);

defun("<-vector/or", function(V765, V766, V767) { return (mustBoolean(klTailApply(primitive["="], V766, 0)) === true) ? (new Trampoline(primitive["simple-error"], "cannot access 0th element of a vector\n")) : ((function(){var VectorElement = klTailApply(primitive["<-address/or"], V765, V766, V767); return (mustBoolean(klTailApply(primitive["="], VectorElement, klTailApply(primitive["fail"]))) === true) ? (new Trampoline(primitive["thaw"], V767)) : (VectorElement);})()) ;}, 3);

defun("shen.posint?", function(V769) { return (mustBoolean(klTailApply(primitive["integer?"], V769)) && mustBoolean(klTailApply(primitive[">="], V769, 0))) ;}, 1);

defun("limit", function(V771) { return new Trampoline(primitive["<-address"], V771, 0) ;}, 1);

defun("shen.analyse-symbol?", function(V773) { return (mustBoolean(klTailApply(primitive["="], "", V773)) === true) ? (false) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V773)) === true) ? ((mustBoolean(klTailApply(primitive["shen.alpha?"], klTailApply(primitive["pos"], V773, 0))) && mustBoolean(klTailApply(primitive["shen.alphanums?"], klTailApply(primitive["tlstr"], V773))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.analyse-symbol?"))) : (err("no cond match")))) ;}, 1);

defun("shen.alpha?", function(V775) { return new Trampoline(primitive["element?"], V775, klTailApply(primitive["cons"], "A", klTailApply(primitive["cons"], "B", klTailApply(primitive["cons"], "C", klTailApply(primitive["cons"], "D", klTailApply(primitive["cons"], "E", klTailApply(primitive["cons"], "F", klTailApply(primitive["cons"], "G", klTailApply(primitive["cons"], "H", klTailApply(primitive["cons"], "I", klTailApply(primitive["cons"], "J", klTailApply(primitive["cons"], "K", klTailApply(primitive["cons"], "L", klTailApply(primitive["cons"], "M", klTailApply(primitive["cons"], "N", klTailApply(primitive["cons"], "O", klTailApply(primitive["cons"], "P", klTailApply(primitive["cons"], "Q", klTailApply(primitive["cons"], "R", klTailApply(primitive["cons"], "S", klTailApply(primitive["cons"], "T", klTailApply(primitive["cons"], "U", klTailApply(primitive["cons"], "V", klTailApply(primitive["cons"], "W", klTailApply(primitive["cons"], "X", klTailApply(primitive["cons"], "Y", klTailApply(primitive["cons"], "Z", klTailApply(primitive["cons"], "a", klTailApply(primitive["cons"], "b", klTailApply(primitive["cons"], "c", klTailApply(primitive["cons"], "d", klTailApply(primitive["cons"], "e", klTailApply(primitive["cons"], "f", klTailApply(primitive["cons"], "g", klTailApply(primitive["cons"], "h", klTailApply(primitive["cons"], "i", klTailApply(primitive["cons"], "j", klTailApply(primitive["cons"], "k", klTailApply(primitive["cons"], "l", klTailApply(primitive["cons"], "m", klTailApply(primitive["cons"], "n", klTailApply(primitive["cons"], "o", klTailApply(primitive["cons"], "p", klTailApply(primitive["cons"], "q", klTailApply(primitive["cons"], "r", klTailApply(primitive["cons"], "s", klTailApply(primitive["cons"], "t", klTailApply(primitive["cons"], "u", klTailApply(primitive["cons"], "v", klTailApply(primitive["cons"], "w", klTailApply(primitive["cons"], "x", klTailApply(primitive["cons"], "y", klTailApply(primitive["cons"], "z", klTailApply(primitive["cons"], "=", klTailApply(primitive["cons"], "*", klTailApply(primitive["cons"], "/", klTailApply(primitive["cons"], "+", klTailApply(primitive["cons"], "-", klTailApply(primitive["cons"], "_", klTailApply(primitive["cons"], "?", klTailApply(primitive["cons"], "$", klTailApply(primitive["cons"], "!", klTailApply(primitive["cons"], "@", klTailApply(primitive["cons"], "~", klTailApply(primitive["cons"], ">", klTailApply(primitive["cons"], "<", klTailApply(primitive["cons"], "&", klTailApply(primitive["cons"], "%", klTailApply(primitive["cons"], "{", klTailApply(primitive["cons"], "}", klTailApply(primitive["cons"], ":", klTailApply(primitive["cons"], ";", klTailApply(primitive["cons"], "`", klTailApply(primitive["cons"], "#", klTailApply(primitive["cons"], "\'", klTailApply(primitive["cons"], ".", null)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;}, 1);

defun("shen.alphanums?", function(V777) { return (mustBoolean(klTailApply(primitive["="], "", V777)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V777)) === true) ? ((mustBoolean(klTailApply(primitive["shen.alphanum?"], klTailApply(primitive["pos"], V777, 0))) && mustBoolean(klTailApply(primitive["shen.alphanums?"], klTailApply(primitive["tlstr"], V777))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.alphanums?"))) : (err("no cond match")))) ;}, 1);

defun("shen.alphanum?", function(V779) { return (mustBoolean(klTailApply(primitive["shen.alpha?"], V779)) || mustBoolean(klTailApply(primitive["shen.digit?"], V779))) ;}, 1);

defun("shen.digit?", function(V781) { return new Trampoline(primitive["element?"], V781, klTailApply(primitive["cons"], "1", klTailApply(primitive["cons"], "2", klTailApply(primitive["cons"], "3", klTailApply(primitive["cons"], "4", klTailApply(primitive["cons"], "5", klTailApply(primitive["cons"], "6", klTailApply(primitive["cons"], "7", klTailApply(primitive["cons"], "8", klTailApply(primitive["cons"], "9", klTailApply(primitive["cons"], "0", null))))))))))) ;}, 1);

defun("variable?", function(V783) { return (mustBoolean((mustBoolean(klTailApply(primitive["boolean?"], V783)) || mustBoolean((mustBoolean(klTailApply(primitive["number?"], V783)) || mustBoolean(klTailApply(primitive["string?"], V783)))))) === true) ? (false) : ((mustBoolean(true) === true) ? ((function(){ try { return (function(){var String = klTailApply(primitive["str"], V783); return klTailApply(primitive["shen.analyse-variable?"], String);})();} catch (err) { return klTailApply(klFun(function(E) { return false;}, 1), err);} })()) : (err("no cond match"))) ;}, 1);

defun("shen.analyse-variable?", function(V785) { return (mustBoolean(klTailApply(primitive["shen.+string?"], V785)) === true) ? ((mustBoolean(klTailApply(primitive["shen.uppercase?"], klTailApply(primitive["pos"], V785, 0))) && mustBoolean(klTailApply(primitive["shen.alphanums?"], klTailApply(primitive["tlstr"], V785))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.analyse-variable?"))) : (err("no cond match"))) ;}, 1);

defun("shen.uppercase?", function(V787) { return new Trampoline(primitive["element?"], V787, klTailApply(primitive["cons"], "A", klTailApply(primitive["cons"], "B", klTailApply(primitive["cons"], "C", klTailApply(primitive["cons"], "D", klTailApply(primitive["cons"], "E", klTailApply(primitive["cons"], "F", klTailApply(primitive["cons"], "G", klTailApply(primitive["cons"], "H", klTailApply(primitive["cons"], "I", klTailApply(primitive["cons"], "J", klTailApply(primitive["cons"], "K", klTailApply(primitive["cons"], "L", klTailApply(primitive["cons"], "M", klTailApply(primitive["cons"], "N", klTailApply(primitive["cons"], "O", klTailApply(primitive["cons"], "P", klTailApply(primitive["cons"], "Q", klTailApply(primitive["cons"], "R", klTailApply(primitive["cons"], "S", klTailApply(primitive["cons"], "T", klTailApply(primitive["cons"], "U", klTailApply(primitive["cons"], "V", klTailApply(primitive["cons"], "W", klTailApply(primitive["cons"], "X", klTailApply(primitive["cons"], "Y", klTailApply(primitive["cons"], "Z", null))))))))))))))))))))))))))) ;}, 1);

defun("gensym", function(V789) { return new Trampoline(primitive["concat"], V789, klTailApply(primitive["set"], new Symbol("shen.*gensym*"), klTailApply(primitive["+"], 1, klTailApply(primitive["value"], new Symbol("shen.*gensym*"))))) ;}, 1);

defun("concat", function(V792, V793) { return new Trampoline(primitive["intern"], klTailApply(primitive["cn"], klTailApply(primitive["str"], V792), klTailApply(primitive["str"], V793))) ;}, 2);

defun("@p", function(V796, V797) { return (function(){var Vector = klTailApply(primitive["absvector"], 3); return (function(){var Tag = klTailApply(primitive["address->"], Vector, 0, new Symbol("shen.tuple")); return (function(){var Fst = klTailApply(primitive["address->"], Vector, 1, V796); return (function(){var Snd = klTailApply(primitive["address->"], Vector, 2, V797); return Vector;})();})();})();})() ;}, 2);

defun("fst", function(V799) { return new Trampoline(primitive["<-address"], V799, 1) ;}, 1);

defun("snd", function(V801) { return new Trampoline(primitive["<-address"], V801, 2) ;}, 1);

defun("tuple?", function(V803) { return (mustBoolean(klTailApply(primitive["absvector?"], V803)) && mustBoolean(klTailApply(primitive["="], new Symbol("shen.tuple"), klTailApply(primitive["<-address/or"], V803, 0, klFun(function() { return new Symbol("shen.not-tuple")}, 0))))) ;}, 1);

defun("append", function(V806, V807) { return (mustBoolean(klTailApply(primitive["="], null, V806)) === true) ? (V807) : ((mustBoolean(klTailApply(primitive["cons?"], V806)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V806), klTailApply(primitive["append"], klTailApply(primitive["tl"], V806), V807))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("append"))) : (err("no cond match")))) ;}, 2);

defun("@v", function(V810, V811) { return (function(){var Limit = klTailApply(primitive["limit"], V811); return (function(){var NewVector = klTailApply(primitive["vector"], klTailApply(primitive["+"], Limit, 1)); return (function(){var X$plNewVector = klTailApply(primitive["vector->"], NewVector, 1, V810); return (mustBoolean(klTailApply(primitive["="], Limit, 0)) === true) ? (X$plNewVector) : (new Trampoline(primitive["shen.@v-help"], V811, 1, Limit, X$plNewVector));})();})();})() ;}, 2);

defun("shen.@v-help", function(V817, V818, V819, V820) { return (mustBoolean(klTailApply(primitive["="], V819, V818)) === true) ? (new Trampoline(primitive["shen.copyfromvector"], V817, V820, V819, klTailApply(primitive["+"], V819, 1))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.@v-help"], V817, klTailApply(primitive["+"], V818, 1), V819, klTailApply(primitive["shen.copyfromvector"], V817, V820, V818, klTailApply(primitive["+"], V818, 1)))) : (err("no cond match"))) ;}, 4);

defun("shen.copyfromvector", function(V825, V826, V827, V828) { return (function(){ try { return klTailApply(primitive["vector->"], V826, V828, klTailApply(primitive["<-vector"], V825, V827));} catch (err) { return klTailApply(klFun(function(E) { return V826;}, 1), err);} })() ;}, 4);

defun("hdv", function(V830) { return new Trampoline(primitive["<-vector/or"], V830, 1, klFun(function() { return new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "hdv needs a non-empty vector as an argument; not ", klTailApply(primitive["shen.app"], V830, "\n", new Symbol("shen.s"))))}, 0)) ;}, 1);

defun("tlv", function(V832) { return (function(){var Limit = klTailApply(primitive["limit"], V832); return (mustBoolean(klTailApply(primitive["="], Limit, 0)) === true) ? (new Trampoline(primitive["simple-error"], "cannot take the tail of the empty vector\n")) : ((mustBoolean(klTailApply(primitive["="], Limit, 1)) === true) ? (new Trampoline(primitive["vector"], 0)) : ((function(){var NewVector = klTailApply(primitive["vector"], klTailApply(primitive["-"], Limit, 1)); return new Trampoline(primitive["shen.tlv-help"], V832, 2, Limit, klTailApply(primitive["vector"], klTailApply(primitive["-"], Limit, 1)));})()));})() ;}, 1);

defun("shen.tlv-help", function(V838, V839, V840, V841) { return (mustBoolean(klTailApply(primitive["="], V840, V839)) === true) ? (new Trampoline(primitive["shen.copyfromvector"], V838, V841, V840, klTailApply(primitive["-"], V840, 1))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.tlv-help"], V838, klTailApply(primitive["+"], V839, 1), V840, klTailApply(primitive["shen.copyfromvector"], V838, V841, V839, klTailApply(primitive["-"], V839, 1)))) : (err("no cond match"))) ;}, 4);

defun("assoc", function(V853, V854) { return (mustBoolean(klTailApply(primitive["="], null, V854)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V854)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V854))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V854)), V853)))))) === true) ? (new Trampoline(primitive["hd"], V854)) : ((mustBoolean(klTailApply(primitive["cons?"], V854)) === true) ? (new Trampoline(primitive["assoc"], V853, klTailApply(primitive["tl"], V854))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("assoc"))) : (err("no cond match"))))) ;}, 2);

defun("boolean?", function(V860) { return (mustBoolean(klTailApply(primitive["="], true, V860)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], false, V860)) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match")))) ;}, 1);

defun("nl", function(V862) { return (mustBoolean(klTailApply(primitive["="], 0, V862)) === true) ? (0) : ((mustBoolean(true) === true) ? ((function(){klTailApply(primitive["shen.prhush"], "\n", klTailApply(primitive["stoutput"])); return new Trampoline(primitive["nl"], klTailApply(primitive["-"], V862, 1));})()) : (err("no cond match"))) ;}, 1);

defun("difference", function(V867, V868) { return (mustBoolean(klTailApply(primitive["="], null, V867)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["cons?"], V867)) === true) ? ((mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V867), V868)) === true) ? (new Trampoline(primitive["difference"], klTailApply(primitive["tl"], V867), V868)) : (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V867), klTailApply(primitive["difference"], klTailApply(primitive["tl"], V867), V868)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("difference"))) : (err("no cond match")))) ;}, 2);

defun("do", function(V871, V872) { return V872 ;}, 2);

defun("element?", function(V884, V885) { return (mustBoolean(klTailApply(primitive["="], null, V885)) === true) ? (false) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V885)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V885), V884)))) === true) ? (true) : ((mustBoolean(klTailApply(primitive["cons?"], V885)) === true) ? (new Trampoline(primitive["element?"], V884, klTailApply(primitive["tl"], V885))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("element?"))) : (err("no cond match"))))) ;}, 2);

defun("empty?", function(V891) { return (mustBoolean(klTailApply(primitive["="], null, V891)) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match"))) ;}, 1);

defun("fix", function(V894, V895) { return new Trampoline(primitive["shen.fix-help"], V894, V895, klTailApply(V894, V895)) ;}, 2);

defun("shen.fix-help", function(V906, V907, V908) { return (mustBoolean(klTailApply(primitive["="], V908, V907)) === true) ? (V908) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.fix-help"], V906, V908, klTailApply(V906, V908))) : (err("no cond match"))) ;}, 3);

defun("dict", function(V910) { return (function(){var D = klTailApply(primitive["absvector"], klTailApply(primitive["+"], 3, V910)); return (function(){var Tag = klTailApply(primitive["address->"], D, 0, new Symbol("shen.dictionary")); return (function(){var Capacity = klTailApply(primitive["address->"], D, 1, V910); return (function(){var Count = klTailApply(primitive["address->"], D, 2, 0); return (function(){var Fill = klTailApply(primitive["shen.fillvector"], D, 3, klTailApply(primitive["+"], 2, V910), null); return D;})();})();})();})();})() ;}, 1);

defun("dict?", function(V912) { return (mustBoolean(klTailApply(primitive["absvector?"], V912)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["<-address/or"], V912, 0, klFun(function() { return new Symbol("shen.not-dictionary")}, 0)), new Symbol("shen.dictionary")))) ;}, 1);

defun("shen.dict-capacity", function(V914) { return new Trampoline(primitive["<-address"], V914, 1) ;}, 1);

defun("dict-count", function(V916) { return new Trampoline(primitive["<-address"], V916, 2) ;}, 1);

defun("shen.dict-count->", function(V919, V920) { return new Trampoline(primitive["address->"], V919, 2, V920) ;}, 2);

defun("shen.<-dict-bucket", function(V923, V924) { return new Trampoline(primitive["<-address"], V923, klTailApply(primitive["+"], 3, V924)) ;}, 2);

defun("shen.dict-bucket->", function(V928, V929, V930) { return new Trampoline(primitive["address->"], V928, klTailApply(primitive["+"], 3, V929), V930) ;}, 3);

defun("shen.set-key-entry-value", function(V937, V938, V939) { return (mustBoolean(klTailApply(primitive["="], null, V939)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], V937, V938), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V939)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V939))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V939)), V937)))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V939)), V938), klTailApply(primitive["tl"], V939))) : ((mustBoolean(klTailApply(primitive["cons?"], V939)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V939), klTailApply(primitive["shen.set-key-entry-value"], V937, V938, klTailApply(primitive["tl"], V939)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.set-key-entry-value"))) : (err("no cond match"))))) ;}, 3);

defun("shen.remove-key-entry-value", function(V945, V946) { return (mustBoolean(klTailApply(primitive["="], null, V946)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V946)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V946))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V946)), V945)))))) === true) ? (new Trampoline(primitive["tl"], V946)) : ((mustBoolean(klTailApply(primitive["cons?"], V946)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V946), klTailApply(primitive["shen.remove-key-entry-value"], V945, klTailApply(primitive["tl"], V946)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.remove-key-entry-value"))) : (err("no cond match"))))) ;}, 2);

defun("shen.dict-update-count", function(V950, V951, V952) { return (function(){var Diff = klTailApply(primitive["-"], klTailApply(primitive["length"], V952), klTailApply(primitive["length"], V951)); return new Trampoline(primitive["shen.dict-count->"], V950, klTailApply(primitive["+"], Diff, klTailApply(primitive["dict-count"], V950)));})() ;}, 3);

defun("dict->", function(V956, V957, V958) { return (function(){var N = klTailApply(primitive["hash"], V957, klTailApply(primitive["shen.dict-capacity"], V956)); return (function(){var Bucket = klTailApply(primitive["shen.<-dict-bucket"], V956, N); return (function(){var NewBucket = klTailApply(primitive["shen.set-key-entry-value"], V957, V958, Bucket); return (function(){var Change = klTailApply(primitive["shen.dict-bucket->"], V956, N, NewBucket); return (function(){var Count = klTailApply(primitive["shen.dict-update-count"], V956, Bucket, NewBucket); return V958;})();})();})();})();})() ;}, 3);

defun("<-dict/or", function(V962, V963, V964) { return (function(){var N = klTailApply(primitive["hash"], V963, klTailApply(primitive["shen.dict-capacity"], V962)); return (function(){var Bucket = klTailApply(primitive["shen.<-dict-bucket"], V962, N); return (function(){var Result = klTailApply(primitive["assoc"], V963, Bucket); return (mustBoolean(klTailApply(primitive["empty?"], Result)) === true) ? (new Trampoline(primitive["thaw"], V964)) : (new Trampoline(primitive["tl"], Result));})();})();})() ;}, 3);

defun("<-dict", function(V967, V968) { return new Trampoline(primitive["<-dict/or"], V967, V968, klFun(function() { return new Trampoline(primitive["simple-error"], "value not found\n")}, 0)) ;}, 2);

defun("dict-rm", function(V971, V972) { return (function(){var N = klTailApply(primitive["hash"], V972, klTailApply(primitive["shen.dict-capacity"], V971)); return (function(){var Bucket = klTailApply(primitive["shen.<-dict-bucket"], V971, N); return (function(){var NewBucket = klTailApply(primitive["shen.remove-key-entry-value"], V972, Bucket); return (function(){var Change = klTailApply(primitive["shen.dict-bucket->"], V971, N, NewBucket); return (function(){var Count = klTailApply(primitive["shen.dict-update-count"], V971, Bucket, NewBucket); return V972;})();})();})();})();})() ;}, 2);

defun("dict-fold", function(V976, V977, V978) { return (function(){var Limit = klTailApply(primitive["shen.dict-capacity"], V977); return new Trampoline(primitive["shen.dict-fold-h"], V976, V977, V978, 0, Limit);})() ;}, 3);

defun("shen.dict-fold-h", function(V985, V986, V987, V988, V989) { return (mustBoolean(klTailApply(primitive["="], V989, V988)) === true) ? (V987) : ((mustBoolean(true) === true) ? ((function(){var B = klTailApply(primitive["shen.<-dict-bucket"], V986, V988); return (function(){var Acc = klTailApply(primitive["shen.bucket-fold"], V985, B, V987); return new Trampoline(primitive["shen.dict-fold-h"], V985, V986, Acc, klTailApply(primitive["+"], 1, V988), V989);})();})()) : (err("no cond match"))) ;}, 5);

defun("shen.bucket-fold", function(V993, V994, V995) { return (mustBoolean(klTailApply(primitive["="], null, V994)) === true) ? (V995) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V994)) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V994))))) === true) ? (new Trampoline(V993, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V994)), klTailApply(primitive["tl"], klTailApply(primitive["hd"], V994)), klTailApply(primitive["shen.bucket-fold"], V993, klTailApply(primitive["tl"], V994), V995))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.bucket-fold"))) : (err("no cond match")))) ;}, 3);

defun("dict-keys", function(V997) { return new Trampoline(primitive["dict-fold"], klFun(function(K) { return klFun(function($un) { return klFun(function(Acc) { return new Trampoline(primitive["cons"], K, Acc);}, 1);}, 1);}, 1), V997, null) ;}, 1);

defun("dict-values", function(V999) { return new Trampoline(primitive["dict-fold"], klFun(function($un) { return klFun(function(V) { return klFun(function(Acc) { return new Trampoline(primitive["cons"], V, Acc);}, 1);}, 1);}, 1), V999, null) ;}, 1);

defun("put", function(V1004, V1005, V1006, V1007) { return (function(){var Curr = klTailApply(primitive["<-dict/or"], V1007, V1004, klFun(function() { return null}, 0)); return (function(){var Added = klTailApply(primitive["shen.set-key-entry-value"], V1005, V1006, Curr); return (function(){var Update = klTailApply(primitive["dict->"], V1007, V1004, Added); return V1006;})();})();})() ;}, 4);

defun("unput", function(V1011, V1012, V1013) { return (function(){var Curr = klTailApply(primitive["<-dict/or"], V1013, V1011, klFun(function() { return null}, 0)); return (function(){var Removed = klTailApply(primitive["shen.remove-key-entry-value"], V1012, Curr); return (function(){var Update = klTailApply(primitive["dict->"], V1013, V1011, Removed); return V1011;})();})();})() ;}, 3);

defun("get/or", function(V1018, V1019, V1020, V1021) { return (function(){var Entry = klTailApply(primitive["<-dict/or"], V1021, V1018, klFun(function() { return null}, 0)); return (function(){var Result = klTailApply(primitive["assoc"], V1019, Entry); return (mustBoolean(klTailApply(primitive["empty?"], Result)) === true) ? (new Trampoline(primitive["thaw"], V1020)) : (new Trampoline(primitive["tl"], Result));})();})() ;}, 4);

defun("get", function(V1025, V1026, V1027) { return new Trampoline(primitive["get/or"], V1025, V1026, klFun(function() { return new Trampoline(primitive["simple-error"], "value not found\n")}, 0), V1027) ;}, 3);

defun("hash", function(V1030, V1031) { return new Trampoline(primitive["shen.mod"], klTailApply(primitive["sum"], klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["string->n"], X);}, 1), klTailApply(primitive["explode"], V1030))), V1031) ;}, 2);

defun("shen.mod", function(V1034, V1035) { return new Trampoline(primitive["shen.modh"], V1034, klTailApply(primitive["shen.multiples"], V1034, klTailApply(primitive["cons"], V1035, null))) ;}, 2);

defun("shen.multiples", function(V1038, V1039) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1039)) && mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["hd"], V1039), V1038)))) === true) ? (new Trampoline(primitive["tl"], V1039)) : ((mustBoolean(klTailApply(primitive["cons?"], V1039)) === true) ? (new Trampoline(primitive["shen.multiples"], V1038, klTailApply(primitive["cons"], klTailApply(primitive["*"], 2, klTailApply(primitive["hd"], V1039)), V1039))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.multiples"))) : (err("no cond match")))) ;}, 2);

defun("shen.modh", function(V1044, V1045) { return (mustBoolean(klTailApply(primitive["="], 0, V1044)) === true) ? (0) : ((mustBoolean(klTailApply(primitive["="], null, V1045)) === true) ? (V1044) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1045)) && mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["hd"], V1045), V1044)))) === true) ? ((mustBoolean(klTailApply(primitive["empty?"], klTailApply(primitive["tl"], V1045))) === true) ? (V1044) : (new Trampoline(primitive["shen.modh"], V1044, klTailApply(primitive["tl"], V1045)))) : ((mustBoolean(klTailApply(primitive["cons?"], V1045)) === true) ? (new Trampoline(primitive["shen.modh"], klTailApply(primitive["-"], V1044, klTailApply(primitive["hd"], V1045)), V1045)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.modh"))) : (err("no cond match")))))) ;}, 2);

defun("sum", function(V1047) { return (mustBoolean(klTailApply(primitive["="], null, V1047)) === true) ? (0) : ((mustBoolean(klTailApply(primitive["cons?"], V1047)) === true) ? (new Trampoline(primitive["+"], klTailApply(primitive["hd"], V1047), klTailApply(primitive["sum"], klTailApply(primitive["tl"], V1047)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("sum"))) : (err("no cond match")))) ;}, 1);

defun("head", function(V1055) { return (mustBoolean(klTailApply(primitive["cons?"], V1055)) === true) ? (new Trampoline(primitive["hd"], V1055)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "head expects a non-empty list")) : (err("no cond match"))) ;}, 1);

defun("tail", function(V1063) { return (mustBoolean(klTailApply(primitive["cons?"], V1063)) === true) ? (new Trampoline(primitive["tl"], V1063)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "tail expects a non-empty list")) : (err("no cond match"))) ;}, 1);

defun("hdstr", function(V1065) { return new Trampoline(primitive["pos"], V1065, 0) ;}, 1);

defun("intersection", function(V1070, V1071) { return (mustBoolean(klTailApply(primitive["="], null, V1070)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["cons?"], V1070)) === true) ? ((mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V1070), V1071)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1070), klTailApply(primitive["intersection"], klTailApply(primitive["tl"], V1070), V1071))) : (new Trampoline(primitive["intersection"], klTailApply(primitive["tl"], V1070), V1071))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("intersection"))) : (err("no cond match")))) ;}, 2);

defun("reverse", function(V1073) { return new Trampoline(primitive["shen.reverse_help"], V1073, null) ;}, 1);

defun("shen.reverse_help", function(V1076, V1077) { return (mustBoolean(klTailApply(primitive["="], null, V1076)) === true) ? (V1077) : ((mustBoolean(klTailApply(primitive["cons?"], V1076)) === true) ? (new Trampoline(primitive["shen.reverse_help"], klTailApply(primitive["tl"], V1076), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1076), V1077))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.reverse_help"))) : (err("no cond match")))) ;}, 2);

defun("union", function(V1080, V1081) { return (mustBoolean(klTailApply(primitive["="], null, V1080)) === true) ? (V1081) : ((mustBoolean(klTailApply(primitive["cons?"], V1080)) === true) ? ((mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V1080), V1081)) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["tl"], V1080), V1081)) : (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1080), klTailApply(primitive["union"], klTailApply(primitive["tl"], V1080), V1081)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("union"))) : (err("no cond match")))) ;}, 2);

defun("y-or-n?", function(V1083) { return (function(){var Message = klTailApply(primitive["shen.prhush"], klTailApply(primitive["shen.proc-nl"], V1083), klTailApply(primitive["stoutput"])); return (function(){var Y_or_N = klTailApply(primitive["shen.prhush"], " (y/n) ", klTailApply(primitive["stoutput"])); return (function(){var Input = klTailApply(primitive["shen.app"], klTailApply(primitive["read"], klTailApply(primitive["stinput"])), "", new Symbol("shen.s")); return (mustBoolean(klTailApply(primitive["="], "y", Input)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], "n", Input)) === true) ? (false) : ((function(){klTailApply(primitive["shen.prhush"], "please answer y or n\n", klTailApply(primitive["stoutput"])); return new Trampoline(primitive["y-or-n?"], V1083);})()));})();})();})() ;}, 1);

defun("not", function(V1085) { return (mustBoolean(V1085) === true) ? (false) : (true) ;}, 1);

defun("subst", function(V1098, V1099, V1100) { return (mustBoolean(klTailApply(primitive["="], V1100, V1099)) === true) ? (V1098) : ((mustBoolean(klTailApply(primitive["cons?"], V1100)) === true) ? (new Trampoline(primitive["map"], klFun(function(W) { return new Trampoline(primitive["subst"], V1098, V1099, W);}, 1), V1100)) : ((mustBoolean(true) === true) ? (V1100) : (err("no cond match")))) ;}, 3);

defun("explode", function(V1102) { return new Trampoline(primitive["shen.explode-h"], klTailApply(primitive["shen.app"], V1102, "", new Symbol("shen.a"))) ;}, 1);

defun("shen.explode-h", function(V1104) { return (mustBoolean(klTailApply(primitive["="], "", V1104)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V1104)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["pos"], V1104, 0), klTailApply(primitive["shen.explode-h"], klTailApply(primitive["tlstr"], V1104)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.explode-h"))) : (err("no cond match")))) ;}, 1);

defun("cd", function(V1106) { return new Trampoline(primitive["set"], new Symbol("*home-directory*"), (mustBoolean(klTailApply(primitive["="], V1106, "")) === true) ? ("") : (klTailApply(primitive["shen.app"], V1106, "/", new Symbol("shen.a")))) ;}, 1);

defun("for-each", function(V1109, V1110) { return (mustBoolean(klTailApply(primitive["="], null, V1110)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["cons?"], V1110)) === true) ? ((function(){var $un = klTailApply(V1109, klTailApply(primitive["hd"], V1110)); return new Trampoline(primitive["for-each"], V1109, klTailApply(primitive["tl"], V1110));})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("for-each"))) : (err("no cond match")))) ;}, 2);

defun("fold-right", function(V1114, V1115, V1116) { return (mustBoolean(klTailApply(primitive["="], null, V1115)) === true) ? (V1116) : ((mustBoolean(klTailApply(primitive["cons?"], V1115)) === true) ? (new Trampoline(V1114, klTailApply(primitive["hd"], V1115), klTailApply(primitive["fold-right"], V1114, klTailApply(primitive["tl"], V1115), V1116))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("fold-right"))) : (err("no cond match")))) ;}, 3);

defun("fold-left", function(V1120, V1121, V1122) { return (mustBoolean(klTailApply(primitive["="], null, V1122)) === true) ? (V1121) : ((mustBoolean(klTailApply(primitive["cons?"], V1122)) === true) ? (new Trampoline(primitive["fold-left"], V1120, klTailApply(V1120, V1121, klTailApply(primitive["hd"], V1122)), klTailApply(primitive["tl"], V1122))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("fold-left"))) : (err("no cond match")))) ;}, 3);

defun("filter", function(V1125, V1126) { return new Trampoline(primitive["shen.filter-h"], V1125, null, V1126) ;}, 2);

defun("shen.filter-h", function(V1136, V1137, V1138) { return (mustBoolean(klTailApply(primitive["="], null, V1138)) === true) ? (new Trampoline(primitive["reverse"], V1137)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1138)) && mustBoolean(klTailApply(V1136, klTailApply(primitive["hd"], V1138))))) === true) ? (new Trampoline(primitive["shen.filter-h"], V1136, klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1138), V1137), klTailApply(primitive["tl"], V1138))) : ((mustBoolean(klTailApply(primitive["cons?"], V1138)) === true) ? (new Trampoline(primitive["shen.filter-h"], V1136, V1137, klTailApply(primitive["tl"], V1138))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.filter-h"))) : (err("no cond match"))))) ;}, 3);

defun("map", function(V1141, V1142) { return new Trampoline(primitive["shen.map-h"], V1141, V1142, null) ;}, 2);

defun("shen.map-h", function(V1148, V1149, V1150) { return (mustBoolean(klTailApply(primitive["="], null, V1149)) === true) ? (new Trampoline(primitive["reverse"], V1150)) : ((mustBoolean(klTailApply(primitive["cons?"], V1149)) === true) ? (new Trampoline(primitive["shen.map-h"], V1148, klTailApply(primitive["tl"], V1149), klTailApply(primitive["cons"], klTailApply(V1148, klTailApply(primitive["hd"], V1149)), V1150))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.map-h"))) : (err("no cond match")))) ;}, 3);

defun("length", function(V1152) { return new Trampoline(primitive["shen.length-h"], V1152, 0) ;}, 1);

defun("shen.length-h", function(V1155, V1156) { return (mustBoolean(klTailApply(primitive["="], null, V1155)) === true) ? (V1156) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.length-h"], klTailApply(primitive["tl"], V1155), klTailApply(primitive["+"], V1156, 1))) : (err("no cond match"))) ;}, 2);

defun("occurrences", function(V1168, V1169) { return (mustBoolean(klTailApply(primitive["="], V1169, V1168)) === true) ? (1) : ((mustBoolean(klTailApply(primitive["cons?"], V1169)) === true) ? (new Trampoline(primitive["+"], klTailApply(primitive["occurrences"], V1168, klTailApply(primitive["hd"], V1169)), klTailApply(primitive["occurrences"], V1168, klTailApply(primitive["tl"], V1169)))) : ((mustBoolean(true) === true) ? (0) : (err("no cond match")))) ;}, 2);

defun("nth", function(V1178, V1179) { return (mustBoolean((mustBoolean(klTailApply(primitive["="], 1, V1178)) && mustBoolean(klTailApply(primitive["cons?"], V1179)))) === true) ? (new Trampoline(primitive["hd"], V1179)) : ((mustBoolean(klTailApply(primitive["cons?"], V1179)) === true) ? (new Trampoline(primitive["nth"], klTailApply(primitive["-"], V1178, 1), klTailApply(primitive["tl"], V1179))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("nth"))) : (err("no cond match")))) ;}, 2);

defun("shen.abs", function(V1181) { return (mustBoolean(klTailApply(primitive[">"], V1181, 0)) === true) ? (V1181) : (new Trampoline(primitive["-"], 0, V1181)) ;}, 1);

defun("shen.magless", function(V1184, V1185) { return (function(){var Nx2 = klTailApply(primitive["*"], V1185, 2); return (mustBoolean(klTailApply(primitive[">"], Nx2, V1184)) === true) ? (V1185) : (new Trampoline(primitive["shen.magless"], V1184, Nx2));})() ;}, 2);

defun("shen.integer-test?", function(V1191, V1192) { return (mustBoolean(klTailApply(primitive["="], 0, V1191)) === true) ? (true) : ((mustBoolean(klTailApply(primitive[">"], 1, V1191)) === true) ? (false) : ((mustBoolean(true) === true) ? ((function(){var Abs_N = klTailApply(primitive["-"], V1191, V1192); return (mustBoolean(klTailApply(primitive[">"], 0, Abs_N)) === true) ? (new Trampoline(primitive["integer?"], V1191)) : (new Trampoline(primitive["shen.integer-test?"], Abs_N, V1192));})()) : (err("no cond match")))) ;}, 2);

defun("mapcan", function(V1197, V1198) { return (mustBoolean(klTailApply(primitive["="], null, V1198)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["cons?"], V1198)) === true) ? (new Trampoline(primitive["append"], klTailApply(V1197, klTailApply(primitive["hd"], V1198)), klTailApply(primitive["mapcan"], V1197, klTailApply(primitive["tl"], V1198)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("mapcan"))) : (err("no cond match")))) ;}, 2);

defun("==", function(V1210, V1211) { return (mustBoolean(klTailApply(primitive["="], V1211, V1210)) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match"))) ;}, 2);

defun("abort", function() { return new Trampoline(primitive["simple-error"], "") ;}, 0);

defun("bound?", function(V1213) { return (mustBoolean(klTailApply(primitive["symbol?"], V1213)) && mustBoolean((function(){var Val = klTailApply(primitive["value/or"], V1213, klFun(function() { return new Symbol("shen.this-symbol-is-unbound")}, 0)); return (mustBoolean(klTailApply(primitive["="], Val, new Symbol("shen.this-symbol-is-unbound"))) === true) ? (false) : (true);})())) ;}, 1);

defun("shen.string->bytes", function(V1215) { return (mustBoolean(klTailApply(primitive["="], "", V1215)) === true) ? (null) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["string->n"], klTailApply(primitive["pos"], V1215, 0)), klTailApply(primitive["shen.string->bytes"], klTailApply(primitive["tlstr"], V1215)))) : (err("no cond match"))) ;}, 1);

defun("maxinferences", function(V1217) { return new Trampoline(primitive["set"], new Symbol("shen.*maxinferences*"), V1217) ;}, 1);

defun("inferences", function() { return new Trampoline(primitive["value"], new Symbol("shen.*infs*")) ;}, 0);

defun("protect", function(V1219) { return V1219 ;}, 1);

defun("stoutput", function() { return new Trampoline(primitive["value"], new Symbol("*stoutput*")) ;}, 0);

defun("sterror", function() { return new Trampoline(primitive["value"], new Symbol("*sterror*")) ;}, 0);

defun("string->symbol", function(V1221) { return (function(){var Symbol = klTailApply(primitive["intern"], V1221); return (mustBoolean(klTailApply(primitive["symbol?"], Symbol)) === true) ? (Symbol) : (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "cannot intern ", klTailApply(primitive["shen.app"], V1221, " to a symbol", new Symbol("shen.s")))));})() ;}, 1);

defun("optimise", function(V1227) { return (mustBoolean(klTailApply(primitive["="], new Symbol("+"), V1227)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*optimise*"), true)) : ((mustBoolean(klTailApply(primitive["="], new Symbol("-"), V1227)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*optimise*"), false)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "optimise expects a + or a -.\n")) : (err("no cond match")))) ;}, 1);

defun("os", function() { return new Trampoline(primitive["value"], new Symbol("*os*")) ;}, 0);

defun("language", function() { return new Trampoline(primitive["value"], new Symbol("*language*")) ;}, 0);

defun("version", function() { return new Trampoline(primitive["value"], new Symbol("*version*")) ;}, 0);

defun("port", function() { return new Trampoline(primitive["value"], new Symbol("*port*")) ;}, 0);

defun("porters", function() { return new Trampoline(primitive["value"], new Symbol("*porters*")) ;}, 0);

defun("implementation", function() { return new Trampoline(primitive["value"], new Symbol("*implementation*")) ;}, 0);

defun("release", function() { return new Trampoline(primitive["value"], new Symbol("*release*")) ;}, 0);

defun("package?", function(V1229) { return (function(){ try { return (function(){klTailApply(primitive["external"], V1229); return true;})();} catch (err) { return klTailApply(klFun(function(E) { return false;}, 1), err);} })() ;}, 1);

defun("function", function(V1231) { return new Trampoline(primitive["shen.lookup-func"], V1231) ;}, 1);

defun("shen.lookup-func", function(V1233) { return new Trampoline(primitive["get/or"], V1233, new Symbol("shen.lambda-form"), klFun(function() { return new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], V1233, " has no lambda expansion\n", new Symbol("shen.a")))}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);

defun("shen.yacc", function(V1235) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1235)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defcc"), klTailApply(primitive["hd"], V1235))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1235))))))) === true) ? (new Trampoline(primitive["shen.yacc->shen"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1235)), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1235)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.yacc"))) : (err("no cond match"))) ;}, 1);

defun("shen.yacc->shen", function(V1238, V1239) { return (function(){var CCRules = klTailApply(primitive["shen.split_cc_rules"], true, V1239, null); return (function(){var CCBody = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.cc_body"], X);}, 1), CCRules); return (function(){var YaccCases = klTailApply(primitive["shen.yacc_cases"], CCBody); return new Trampoline(primitive["cons"], new Symbol("define"), klTailApply(primitive["cons"], V1238, klTailApply(primitive["cons"], new Symbol("Stream"), klTailApply(primitive["cons"], new Symbol("->"), klTailApply(primitive["cons"], klTailApply(primitive["shen.kill-code"], YaccCases), null)))));})();})();})() ;}, 2);

defun("shen.kill-code", function(V1241) { return (mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["occurrences"], new Symbol("kill"), V1241), 0)) === true) ? (new Trampoline(primitive["cons"], new Symbol("trap-error"), klTailApply(primitive["cons"], V1241, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], new Symbol("E"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.analyse-kill"), klTailApply(primitive["cons"], new Symbol("E"), null)), null))), null)))) : ((mustBoolean(true) === true) ? (V1241) : (err("no cond match"))) ;}, 1);

defun("kill", function() { return new Trampoline(primitive["simple-error"], "yacc kill") ;}, 0);

defun("shen.analyse-kill", function(V1243) { return (function(){var String = klTailApply(primitive["error-to-string"], V1243); return (mustBoolean(klTailApply(primitive["="], String, "yacc kill")) === true) ? (new Trampoline(primitive["fail"])) : (V1243);})() ;}, 1);

defun("shen.split_cc_rules", function(V1249, V1250, V1251) { return (mustBoolean((mustBoolean(klTailApply(primitive["="], null, V1250)) && mustBoolean(klTailApply(primitive["="], null, V1251)))) === true) ? (null) : ((mustBoolean(klTailApply(primitive["="], null, V1250)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["shen.split_cc_rule"], V1249, klTailApply(primitive["reverse"], V1251), null), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1250)) && mustBoolean(klTailApply(primitive["="], new Symbol(";"), klTailApply(primitive["hd"], V1250))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["shen.split_cc_rule"], V1249, klTailApply(primitive["reverse"], V1251), null), klTailApply(primitive["shen.split_cc_rules"], V1249, klTailApply(primitive["tl"], V1250), null))) : ((mustBoolean(klTailApply(primitive["cons?"], V1250)) === true) ? (new Trampoline(primitive["shen.split_cc_rules"], V1249, klTailApply(primitive["tl"], V1250), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1250), V1251))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.split_cc_rules"))) : (err("no cond match")))))) ;}, 3);

defun("shen.split_cc_rule", function(V1259, V1260, V1261) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1260)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":="), klTailApply(primitive["hd"], V1260))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1260))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1260)))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["reverse"], V1261), klTailApply(primitive["tl"], V1260))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1260)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol(":="), klTailApply(primitive["hd"], V1260))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1260))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1260)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("where"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1260))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1260))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1260)))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["reverse"], V1261), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1260)))), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1260)), null))), null))) : ((mustBoolean(klTailApply(primitive["="], null, V1260)) === true) ? ((function(){klTailApply(primitive["shen.semantic-completion-warning"], V1259, V1261); return new Trampoline(primitive["shen.split_cc_rule"], V1259, klTailApply(primitive["cons"], new Symbol(":="), klTailApply(primitive["cons"], klTailApply(primitive["shen.default_semantics"], klTailApply(primitive["reverse"], V1261)), null)), V1261);})()) : ((mustBoolean(klTailApply(primitive["cons?"], V1260)) === true) ? (new Trampoline(primitive["shen.split_cc_rule"], V1259, klTailApply(primitive["tl"], V1260), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1260), V1261))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.split_cc_rule"))) : (err("no cond match")))))) ;}, 3);

defun("shen.semantic-completion-warning", function(V1272, V1273) { return (mustBoolean(klTailApply(primitive["="], true, V1272)) === true) ? ((function(){klTailApply(primitive["shen.prhush"], "warning: ", klTailApply(primitive["stoutput"])); return (function(){klTailApply(primitive["for-each"], klFun(function(X) { return new Trampoline(primitive["shen.prhush"], klTailApply(primitive["shen.app"], X, " ", new Symbol("shen.a")), klTailApply(primitive["stoutput"]));}, 1), klTailApply(primitive["reverse"], V1273)); return new Trampoline(primitive["shen.prhush"], "has no semantics.\n", klTailApply(primitive["stoutput"]));})();})()) : ((mustBoolean(true) === true) ? (new Symbol("shen.skip")) : (err("no cond match"))) ;}, 2);

defun("shen.default_semantics", function(V1275) { return (mustBoolean(klTailApply(primitive["="], null, V1275)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1275)) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1275))) && mustBoolean(klTailApply(primitive["shen.grammar_symbol?"], klTailApply(primitive["hd"], V1275))))))) === true) ? (new Trampoline(primitive["hd"], V1275)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1275)) && mustBoolean(klTailApply(primitive["shen.grammar_symbol?"], klTailApply(primitive["hd"], V1275))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("append"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1275), klTailApply(primitive["cons"], klTailApply(primitive["shen.default_semantics"], klTailApply(primitive["tl"], V1275)), null)))) : ((mustBoolean(klTailApply(primitive["cons?"], V1275)) === true) ? (new Trampoline(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1275), klTailApply(primitive["cons"], klTailApply(primitive["shen.default_semantics"], klTailApply(primitive["tl"], V1275)), null)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.default_semantics"))) : (err("no cond match")))))) ;}, 1);

defun("shen.grammar_symbol?", function(V1277) { return (mustBoolean(klTailApply(primitive["symbol?"], V1277)) && mustBoolean((function(){var Cs = klTailApply(primitive["shen.strip-pathname"], klTailApply(primitive["explode"], V1277)); return (mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], Cs), "<")) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["reverse"], Cs)), ">")));})())) ;}, 1);

defun("shen.yacc_cases", function(V1279) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1279)) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1279))))) === true) ? (new Trampoline(primitive["hd"], V1279)) : ((mustBoolean(klTailApply(primitive["cons?"], V1279)) === true) ? ((function(){var P = new Symbol("YaccParse"); return new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], P, klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1279), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], P, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))), klTailApply(primitive["cons"], klTailApply(primitive["shen.yacc_cases"], klTailApply(primitive["tl"], V1279)), klTailApply(primitive["cons"], P, null)))), null))));})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.yacc_cases"))) : (err("no cond match")))) ;}, 1);

defun("shen.cc_body", function(V1281) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1281)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1281))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1281)))))))) === true) ? (new Trampoline(primitive["shen.syntax"], klTailApply(primitive["hd"], V1281), new Symbol("Stream"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1281)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.cc_body"))) : (err("no cond match"))) ;}, 1);

defun("shen.syntax", function(V1285, V1286, V1287) { return (mustBoolean((mustBoolean(klTailApply(primitive["="], null, V1285)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1287)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("where"), klTailApply(primitive["hd"], V1287))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1287))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1287)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1287))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["shen.semantics"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1287))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1286, null)), klTailApply(primitive["cons"], klTailApply(primitive["shen.semantics"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1287)))), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))))) : ((mustBoolean(klTailApply(primitive["="], null, V1285)) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1286, null)), klTailApply(primitive["cons"], klTailApply(primitive["shen.semantics"], V1287), null)))) : ((mustBoolean(klTailApply(primitive["cons?"], V1285)) === true) ? ((mustBoolean(klTailApply(primitive["shen.grammar_symbol?"], klTailApply(primitive["hd"], V1285))) === true) ? (new Trampoline(primitive["shen.recursive_descent"], V1285, V1286, V1287)) : ((mustBoolean(klTailApply(primitive["variable?"], klTailApply(primitive["hd"], V1285))) === true) ? (new Trampoline(primitive["shen.variable-match"], V1285, V1286, V1287)) : ((mustBoolean(klTailApply(primitive["shen.jump_stream?"], klTailApply(primitive["hd"], V1285))) === true) ? (new Trampoline(primitive["shen.jump_stream"], V1285, V1286, V1287)) : ((mustBoolean(klTailApply(primitive["shen.terminal?"], klTailApply(primitive["hd"], V1285))) === true) ? (new Trampoline(primitive["shen.check_stream"], V1285, V1286, V1287)) : ((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1285))) === true) ? (new Trampoline(primitive["shen.list-stream"], klTailApply(primitive["shen.decons"], klTailApply(primitive["hd"], V1285)), klTailApply(primitive["tl"], V1285), V1286, V1287)) : (new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], klTailApply(primitive["hd"], V1285), " is not legal syntax\n", new Symbol("shen.a"))))))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.syntax"))) : (err("no cond match"))))) ;}, 3);

defun("shen.list-stream", function(V1292, V1293, V1294, V1295) { return (function(){var Test = klTailApply(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1294, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1294, null)), null)), null)), null))); return (function(){var Placeholder = klTailApply(primitive["gensym"], new Symbol("shen.place")); return (function(){var RunOn = klTailApply(primitive["shen.syntax"], V1293, klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1294, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], V1294, null)), null)), null))), V1295); return (function(){var Action = klTailApply(primitive["shen.insert-runon"], RunOn, Placeholder, klTailApply(primitive["shen.syntax"], V1292, klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1294, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], V1294, null)), null)), null))), Placeholder)); return new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], Test, klTailApply(primitive["cons"], Action, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), null))));})();})();})();})() ;}, 4);

defun("shen.decons", function(V1297) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1297)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cons"), klTailApply(primitive["hd"], V1297))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1297))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1297)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1297))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1297))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1297)), null)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1297)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cons"), klTailApply(primitive["hd"], V1297))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1297))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1297)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1297))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1297)), klTailApply(primitive["shen.decons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1297)))))) : ((mustBoolean(true) === true) ? (V1297) : (err("no cond match")))) ;}, 1);

defun("shen.insert-runon", function(V1312, V1313, V1314) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1314)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.pair"), klTailApply(primitive["hd"], V1314))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1314))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1314)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1314))))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1314))), V1313)))))))))))) === true) ? (V1312) : ((mustBoolean(klTailApply(primitive["cons?"], V1314)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.insert-runon"], V1312, V1313, Z);}, 1), V1314)) : ((mustBoolean(true) === true) ? (V1314) : (err("no cond match")))) ;}, 3);

defun("shen.strip-pathname", function(V1320) { return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["element?"], ".", V1320))) === true) ? (V1320) : ((mustBoolean(klTailApply(primitive["cons?"], V1320)) === true) ? (new Trampoline(primitive["shen.strip-pathname"], klTailApply(primitive["tl"], V1320))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.strip-pathname"))) : (err("no cond match")))) ;}, 1);

defun("shen.recursive_descent", function(V1324, V1325, V1326) { return (mustBoolean(klTailApply(primitive["cons?"], V1324)) === true) ? ((function(){var Test = klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1324), klTailApply(primitive["cons"], V1325, null)); return (function(){var Action = klTailApply(primitive["shen.syntax"], klTailApply(primitive["tl"], V1324), klTailApply(primitive["concat"], new Symbol("Parse_"), klTailApply(primitive["hd"], V1324)), V1326); return (function(){var Else = klTailApply(primitive["cons"], new Symbol("fail"), null); return new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], klTailApply(primitive["concat"], new Symbol("Parse_"), klTailApply(primitive["hd"], V1324)), klTailApply(primitive["cons"], Test, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("not"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("fail"), null), klTailApply(primitive["cons"], klTailApply(primitive["concat"], new Symbol("Parse_"), klTailApply(primitive["hd"], V1324)), null))), null)), klTailApply(primitive["cons"], Action, klTailApply(primitive["cons"], Else, null)))), null))));})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.recursive_descent"))) : (err("no cond match"))) ;}, 3);

defun("shen.variable-match", function(V1330, V1331, V1332) { return (mustBoolean(klTailApply(primitive["cons?"], V1330)) === true) ? ((function(){var Test = klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1331, null)), null)); return (function(){var Action = klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], klTailApply(primitive["concat"], new Symbol("Parse_"), klTailApply(primitive["hd"], V1330)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1331, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["shen.syntax"], klTailApply(primitive["tl"], V1330), klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1331, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.hdtl"), klTailApply(primitive["cons"], V1331, null)), null))), V1332), null)))); return (function(){var Else = klTailApply(primitive["cons"], new Symbol("fail"), null); return new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], Test, klTailApply(primitive["cons"], Action, klTailApply(primitive["cons"], Else, null))));})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.variable-match"))) : (err("no cond match"))) ;}, 3);

defun("shen.terminal?", function(V1342) { return (mustBoolean(klTailApply(primitive["cons?"], V1342)) === true) ? (false) : ((mustBoolean(klTailApply(primitive["variable?"], V1342)) === true) ? (false) : ((mustBoolean(true) === true) ? (true) : (err("no cond match")))) ;}, 1);

defun("shen.jump_stream?", function(V1348) { return (mustBoolean(klTailApply(primitive["="], V1348, new Symbol("_"))) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match"))) ;}, 1);

defun("shen.check_stream", function(V1352, V1353, V1354) { return (mustBoolean(klTailApply(primitive["cons?"], V1352)) === true) ? ((function(){var Test = klTailApply(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1353, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1352), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1353, null)), null)), null))), null))); return (function(){var Action = klTailApply(primitive["shen.syntax"], klTailApply(primitive["tl"], V1352), klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1353, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.hdtl"), klTailApply(primitive["cons"], V1353, null)), null))), V1354); return (function(){var Else = klTailApply(primitive["cons"], new Symbol("fail"), null); return new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], Test, klTailApply(primitive["cons"], Action, klTailApply(primitive["cons"], Else, null))));})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.check_stream"))) : (err("no cond match"))) ;}, 3);

defun("shen.jump_stream", function(V1358, V1359, V1360) { return (mustBoolean(klTailApply(primitive["cons?"], V1358)) === true) ? ((function(){var Test = klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1359, null)), null)); return (function(){var Action = klTailApply(primitive["shen.syntax"], klTailApply(primitive["tl"], V1358), klTailApply(primitive["cons"], new Symbol("shen.pair"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], V1359, null)), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.hdtl"), klTailApply(primitive["cons"], V1359, null)), null))), V1360); return (function(){var Else = klTailApply(primitive["cons"], new Symbol("fail"), null); return new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], Test, klTailApply(primitive["cons"], Action, klTailApply(primitive["cons"], Else, null))));})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.jump_stream"))) : (err("no cond match"))) ;}, 3);

defun("shen.semantics", function(V1362) { return (mustBoolean(klTailApply(primitive["="], null, V1362)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["shen.grammar_symbol?"], V1362)) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.hdtl"), klTailApply(primitive["cons"], klTailApply(primitive["concat"], new Symbol("Parse_"), V1362), null))) : ((mustBoolean(klTailApply(primitive["variable?"], V1362)) === true) ? (new Trampoline(primitive["concat"], new Symbol("Parse_"), V1362)) : ((mustBoolean(klTailApply(primitive["cons?"], V1362)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.semantics"], Z);}, 1), V1362)) : ((mustBoolean(true) === true) ? (V1362) : (err("no cond match")))))) ;}, 1);

defun("shen.snd-or-fail", function(V1370) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1370)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1370))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1370)))))))) === true) ? (new Trampoline(primitive["hd"], klTailApply(primitive["tl"], V1370))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["fail"])) : (err("no cond match"))) ;}, 1);

defun("fail", function() { return new Symbol("shen.fail!") ;}, 0);

defun("shen.pair", function(V1373, V1374) { return new Trampoline(primitive["cons"], V1373, klTailApply(primitive["cons"], V1374, null)) ;}, 2);

defun("shen.hdtl", function(V1376) { return new Trampoline(primitive["hd"], klTailApply(primitive["tl"], V1376)) ;}, 1);

defun("<!>", function(V1384) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1384)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1384))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1384)))))))) === true) ? (new Trampoline(primitive["cons"], null, klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1384), null))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["fail"])) : (err("no cond match"))) ;}, 1);

defun("<e>", function(V1390) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1390)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1390))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1390)))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1390), klTailApply(primitive["cons"], null, null))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("<e>"))) : (err("no cond match"))) ;}, 1);

defun("read-char-code", function(V1392) { return new Trampoline(primitive["read-byte"], V1392) ;}, 1);

defun("read-file-as-bytelist", function(V1394) { return new Trampoline(primitive["shen.read-file-as-Xlist"], V1394, klFun(function(S) { return new Trampoline(primitive["read-byte"], S);}, 1)) ;}, 1);

defun("shen.read-file-as-Xlist", function(V1397, V1398) { return (function(){var Stream = klTailApply(primitive["open"], V1397, new Symbol("in")); return (function(){var X = klTailApply(V1398, Stream); return (function(){var Xs = klTailApply(primitive["shen.read-file-as-Xlist-help"], Stream, V1398, X, null); return (function(){var Close = klTailApply(primitive["close"], Stream); return new Trampoline(primitive["reverse"], Xs);})();})();})();})() ;}, 2);

defun("shen.read-file-as-Xlist-help", function(V1403, V1404, V1405, V1406) { return (mustBoolean(klTailApply(primitive["="], -1, V1405)) === true) ? (V1406) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.read-file-as-Xlist-help"], V1403, V1404, klTailApply(V1404, V1403), klTailApply(primitive["cons"], V1405, V1406))) : (err("no cond match"))) ;}, 4);

defun("read-file-as-string", function(V1408) { return (function(){var Stream = klTailApply(primitive["open"], V1408, new Symbol("in")); return new Trampoline(primitive["shen.rfas-h"], Stream, klTailApply(primitive["read-char-code"], Stream), "");})() ;}, 1);

defun("shen.rfas-h", function(V1412, V1413, V1414) { return (mustBoolean(klTailApply(primitive["="], -1, V1413)) === true) ? ((function(){klTailApply(primitive["close"], V1412); return V1414;})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.rfas-h"], V1412, klTailApply(primitive["read-char-code"], V1412), klTailApply(primitive["cn"], V1414, klTailApply(primitive["n->string"], V1413)))) : (err("no cond match"))) ;}, 3);

defun("input", function(V1416) { return new Trampoline(primitive["eval-kl"], klTailApply(primitive["read"], V1416)) ;}, 1);

defun("input+", function(V1419, V1420) { return (function(){var Mono$qu = klTailApply(primitive["shen.monotype"], V1419); return (function(){var Input = klTailApply(primitive["read"], V1420); return (mustBoolean(klTailApply(primitive["="], false, klTailApply(primitive["shen.typecheck"], Input, klTailApply(primitive["shen.demodulate"], V1419)))) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "type error: ", klTailApply(primitive["shen.app"], Input, klTailApply(primitive["cn"], " is not of type ", klTailApply(primitive["shen.app"], V1419, "\n", new Symbol("shen.r"))), new Symbol("shen.r"))))) : (new Trampoline(primitive["eval-kl"], Input));})();})() ;}, 2);

defun("shen.monotype", function(V1422) { return (mustBoolean(klTailApply(primitive["cons?"], V1422)) === true) ? (new Trampoline(primitive["map"], klFun(function(Z) { return new Trampoline(primitive["shen.monotype"], Z);}, 1), V1422)) : ((mustBoolean(true) === true) ? ((mustBoolean(klTailApply(primitive["variable?"], V1422)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "input+ expects a monotype: not ", klTailApply(primitive["shen.app"], V1422, "\n", new Symbol("shen.a"))))) : (V1422)) : (err("no cond match"))) ;}, 1);

defun("read", function(V1424) { return new Trampoline(primitive["hd"], klTailApply(primitive["shen.read-loop"], V1424, klTailApply(primitive["read-char-code"], V1424), null)) ;}, 1);

defun("it", function() { return new Trampoline(primitive["value"], new Symbol("shen.*it*")) ;}, 0);

defun("shen.read-loop", function(V1432, V1433, V1434) { return (mustBoolean(klTailApply(primitive["="], 94, V1433)) === true) ? (new Trampoline(primitive["simple-error"], "read aborted")) : ((mustBoolean(klTailApply(primitive["="], -1, V1433)) === true) ? ((mustBoolean(klTailApply(primitive["empty?"], V1434)) === true) ? (new Trampoline(primitive["simple-error"], "error: empty stream")) : (new Trampoline(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), V1434, klFun(function(E) { return E;}, 1)))) : ((mustBoolean(klTailApply(primitive["shen.terminator?"], V1433)) === true) ? ((function(){var AllChars = klTailApply(primitive["append"], V1434, klTailApply(primitive["cons"], V1433, null)); return (function(){var It = klTailApply(primitive["shen.record-it"], AllChars); return (function(){var Read = klTailApply(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), AllChars, klFun(function(E) { return new Symbol("shen.nextbyte");}, 1)); return (mustBoolean((mustBoolean(klTailApply(primitive["="], Read, new Symbol("shen.nextbyte"))) || mustBoolean(klTailApply(primitive["empty?"], Read)))) === true) ? (new Trampoline(primitive["shen.read-loop"], V1432, klTailApply(primitive["read-char-code"], V1432), AllChars)) : (Read);})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.read-loop"], V1432, klTailApply(primitive["read-char-code"], V1432), klTailApply(primitive["append"], V1434, klTailApply(primitive["cons"], V1433, null)))) : (err("no cond match"))))) ;}, 3);

defun("shen.terminator?", function(V1436) { return new Trampoline(primitive["element?"], V1436, klTailApply(primitive["cons"], 9, klTailApply(primitive["cons"], 10, klTailApply(primitive["cons"], 13, klTailApply(primitive["cons"], 32, klTailApply(primitive["cons"], 34, klTailApply(primitive["cons"], 41, klTailApply(primitive["cons"], 93, null)))))))) ;}, 1);

defun("lineread", function(V1438) { return new Trampoline(primitive["shen.lineread-loop"], klTailApply(primitive["read-char-code"], V1438), null, V1438) ;}, 1);

defun("shen.lineread-loop", function(V1443, V1444, V1445) { return (mustBoolean(klTailApply(primitive["="], -1, V1443)) === true) ? ((mustBoolean(klTailApply(primitive["empty?"], V1444)) === true) ? (new Trampoline(primitive["simple-error"], "empty stream")) : (new Trampoline(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), V1444, klFun(function(E) { return E;}, 1)))) : ((mustBoolean(klTailApply(primitive["="], V1443, klTailApply(primitive["shen.hat"]))) === true) ? (new Trampoline(primitive["simple-error"], "line read aborted")) : ((mustBoolean(klTailApply(primitive["element?"], V1443, klTailApply(primitive["cons"], klTailApply(primitive["shen.newline"]), klTailApply(primitive["cons"], klTailApply(primitive["shen.carriage-return"]), null)))) === true) ? ((function(){var Line = klTailApply(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), V1444, klFun(function(E) { return new Symbol("shen.nextline");}, 1)); return (function(){var It = klTailApply(primitive["shen.record-it"], V1444); return (mustBoolean((mustBoolean(klTailApply(primitive["="], Line, new Symbol("shen.nextline"))) || mustBoolean(klTailApply(primitive["empty?"], Line)))) === true) ? (new Trampoline(primitive["shen.lineread-loop"], klTailApply(primitive["read-char-code"], V1445), klTailApply(primitive["append"], V1444, klTailApply(primitive["cons"], V1443, null)), V1445)) : (Line);})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.lineread-loop"], klTailApply(primitive["read-char-code"], V1445), klTailApply(primitive["append"], V1444, klTailApply(primitive["cons"], V1443, null)), V1445)) : (err("no cond match"))))) ;}, 3);

defun("shen.record-it", function(V1447) { return (function(){var TrimLeft = klTailApply(primitive["shen.trim-whitespace"], V1447); return (function(){var TrimRight = klTailApply(primitive["shen.trim-whitespace"], klTailApply(primitive["reverse"], TrimLeft)); return (function(){var Trimmed = klTailApply(primitive["reverse"], TrimRight); return new Trampoline(primitive["shen.record-it-h"], Trimmed);})();})();})() ;}, 1);

defun("shen.trim-whitespace", function(V1449) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1449)) && mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V1449), klTailApply(primitive["cons"], 9, klTailApply(primitive["cons"], 10, klTailApply(primitive["cons"], 13, klTailApply(primitive["cons"], 32, null)))))))) === true) ? (new Trampoline(primitive["shen.trim-whitespace"], klTailApply(primitive["tl"], V1449))) : ((mustBoolean(true) === true) ? (V1449) : (err("no cond match"))) ;}, 1);

defun("shen.record-it-h", function(V1451) { return (function(){klTailApply(primitive["set"], new Symbol("shen.*it*"), klTailApply(primitive["shen.cn-all"], klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["n->string"], X);}, 1), V1451))); return V1451;})() ;}, 1);

defun("shen.cn-all", function(V1453) { return (mustBoolean(klTailApply(primitive["="], null, V1453)) === true) ? ("") : ((mustBoolean(klTailApply(primitive["cons?"], V1453)) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["hd"], V1453), klTailApply(primitive["shen.cn-all"], klTailApply(primitive["tl"], V1453)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.cn-all"))) : (err("no cond match")))) ;}, 1);

defun("read-file", function(V1455) { return (function(){var Charlist = klTailApply(primitive["read-file-as-charlist"], V1455); return new Trampoline(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), Charlist, klFun(function(X) { return new Trampoline(primitive["shen.read-error"], X);}, 1));})() ;}, 1);

defun("read-from-string", function(V1457) { return (function(){var Ns = klTailApply(primitive["map"], klFun(function(X) { return new Trampoline(primitive["string->n"], X);}, 1), klTailApply(primitive["explode"], V1457)); return new Trampoline(primitive["compile"], klFun(function(X) { return new Trampoline(primitive["shen.<st_input>"], X);}, 1), Ns, klFun(function(X) { return new Trampoline(primitive["shen.read-error"], X);}, 1));})() ;}, 1);

defun("shen.read-error", function(V1465) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1465)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1465))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1465))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1465)))))))))) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "read error here:\n\n ", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.compress-50"], 50, klTailApply(primitive["hd"], V1465)), "\n", new Symbol("shen.a"))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "read error\n")) : (err("no cond match"))) ;}, 1);

defun("shen.compress-50", function(V1472, V1473) { return (mustBoolean(klTailApply(primitive["="], null, V1473)) === true) ? ("") : ((mustBoolean(klTailApply(primitive["="], 0, V1472)) === true) ? ("") : ((mustBoolean(klTailApply(primitive["cons?"], V1473)) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["n->string"], klTailApply(primitive["hd"], V1473)), klTailApply(primitive["shen.compress-50"], klTailApply(primitive["-"], V1472, 1), klTailApply(primitive["tl"], V1473)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.compress-50"))) : (err("no cond match"))))) ;}, 2);

defun("shen.<st_input>", function(V1475) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltlsb$gt = klTailApply(primitive["shen.<lsb>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltlsb$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput1$gt = klTailApply(primitive["shen.<st_input1>"], Parse$unshen$do$ltlsb$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput1$gt))) === true) ? ((function(){var Parse$unshen$do$ltrsb$gt = klTailApply(primitive["shen.<rsb>"], Parse$unshen$do$ltst$uninput1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrsb$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput2$gt = klTailApply(primitive["shen.<st_input2>"], Parse$unshen$do$ltrsb$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput2$gt), klTailApply(primitive["cons"], klTailApply(primitive["macroexpand"], klTailApply(primitive["shen.cons_form"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput1$gt))), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput2$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$3 = (function(){var Parse$unshen$do$ltlrb$gt = klTailApply(primitive["shen.<lrb>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltlrb$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput1$gt = klTailApply(primitive["shen.<st_input1>"], Parse$unshen$do$ltlrb$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput1$gt))) === true) ? ((function(){var Parse$unshen$do$ltrrb$gt = klTailApply(primitive["shen.<rrb>"], Parse$unshen$do$ltst$uninput1$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrrb$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput2$gt = klTailApply(primitive["shen.<st_input2>"], Parse$unshen$do$ltrrb$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput2$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput2$gt), klTailApply(primitive["shen.package-macro"], klTailApply(primitive["macroexpand"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput1$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput2$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$3, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$4 = (function(){var Parse$unshen$do$ltlcurly$gt = klTailApply(primitive["shen.<lcurly>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltlcurly$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltlcurly$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol("{"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$4, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$5 = (function(){var Parse$unshen$do$ltrcurly$gt = klTailApply(primitive["shen.<rcurly>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltrcurly$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltrcurly$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol("}"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$5, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$6 = (function(){var Parse$unshen$do$ltbar$gt = klTailApply(primitive["shen.<bar>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltbar$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltbar$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol("bar!"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$6, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$7 = (function(){var Parse$unshen$do$ltsemicolon$gt = klTailApply(primitive["shen.<semicolon>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsemicolon$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltsemicolon$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol(";"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$7, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$8 = (function(){var Parse$unshen$do$ltcolon$gt = klTailApply(primitive["shen.<colon>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcolon$gt))) === true) ? ((function(){var Parse$unshen$do$ltequal$gt = klTailApply(primitive["shen.<equal>"], Parse$unshen$do$ltcolon$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltequal$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltequal$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol(":="), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$8, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$9 = (function(){var Parse$unshen$do$ltcolon$gt = klTailApply(primitive["shen.<colon>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcolon$gt))) === true) ? ((function(){var Parse$unshen$do$ltminus$gt = klTailApply(primitive["shen.<minus>"], Parse$unshen$do$ltcolon$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltminus$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltminus$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol(":-"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$9, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$10 = (function(){var Parse$unshen$do$ltcolon$gt = klTailApply(primitive["shen.<colon>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcolon$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltcolon$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], new Symbol(":"), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$10, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$11 = (function(){var Parse$unshen$do$ltcomma$gt = klTailApply(primitive["shen.<comma>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcomma$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltcomma$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], klTailApply(primitive["intern"], ","), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$11, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$12 = (function(){var Parse$unshen$do$ltcomment$gt = klTailApply(primitive["shen.<comment>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcomment$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltcomment$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$12, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$13 = (function(){var Parse$unshen$do$ltatom$gt = klTailApply(primitive["shen.<atom>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltatom$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltatom$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["cons"], klTailApply(primitive["macroexpand"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltatom$gt)), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$13, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$14 = (function(){var Parse$unshen$do$ltwhitespaces$gt = klTailApply(primitive["shen.<whitespaces>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltwhitespaces$gt))) === true) ? ((function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], Parse$unshen$do$ltwhitespaces$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$14, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$un$lte$gt = klTailApply(primitive["<e>"], V1475); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), null)) : (new Trampoline(primitive["fail"]));})()) : (YaccParse$14);})()) : (YaccParse$13);})()) : (YaccParse$12);})()) : (YaccParse$11);})()) : (YaccParse$10);})()) : (YaccParse$9);})()) : (YaccParse$8);})()) : (YaccParse$7);})()) : (YaccParse$6);})()) : (YaccParse$5);})()) : (YaccParse$4);})()) : (YaccParse$3);})()) : (YaccParse);})() ;}, 1);

defun("shen.<lsb>", function(V1477) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1477))) && mustBoolean(klTailApply(primitive["="], 91, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1477)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1477)), klTailApply(primitive["shen.hdtl"], V1477))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<rsb>", function(V1479) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1479))) && mustBoolean(klTailApply(primitive["="], 93, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1479)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1479)), klTailApply(primitive["shen.hdtl"], V1479))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<lcurly>", function(V1481) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1481))) && mustBoolean(klTailApply(primitive["="], 123, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1481)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1481)), klTailApply(primitive["shen.hdtl"], V1481))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<rcurly>", function(V1483) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1483))) && mustBoolean(klTailApply(primitive["="], 125, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1483)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1483)), klTailApply(primitive["shen.hdtl"], V1483))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<bar>", function(V1485) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1485))) && mustBoolean(klTailApply(primitive["="], 124, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1485)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1485)), klTailApply(primitive["shen.hdtl"], V1485))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<semicolon>", function(V1487) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1487))) && mustBoolean(klTailApply(primitive["="], 59, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1487)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1487)), klTailApply(primitive["shen.hdtl"], V1487))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<colon>", function(V1489) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1489))) && mustBoolean(klTailApply(primitive["="], 58, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1489)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1489)), klTailApply(primitive["shen.hdtl"], V1489))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<comma>", function(V1491) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1491))) && mustBoolean(klTailApply(primitive["="], 44, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1491)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1491)), klTailApply(primitive["shen.hdtl"], V1491))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<equal>", function(V1493) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1493))) && mustBoolean(klTailApply(primitive["="], 61, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1493)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1493)), klTailApply(primitive["shen.hdtl"], V1493))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<minus>", function(V1495) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1495))) && mustBoolean(klTailApply(primitive["="], 45, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1495)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1495)), klTailApply(primitive["shen.hdtl"], V1495))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<lrb>", function(V1497) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1497))) && mustBoolean(klTailApply(primitive["="], 40, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1497)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1497)), klTailApply(primitive["shen.hdtl"], V1497))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<rrb>", function(V1499) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1499))) && mustBoolean(klTailApply(primitive["="], 41, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1499)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1499)), klTailApply(primitive["shen.hdtl"], V1499))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<atom>", function(V1501) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltstr$gt = klTailApply(primitive["shen.<str>"], V1501); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstr$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltstr$gt), klTailApply(primitive["shen.control-chars"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltstr$gt)))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$3 = (function(){var Parse$unshen$do$ltnumber$gt = klTailApply(primitive["shen.<number>"], V1501); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltnumber$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltnumber$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltnumber$gt))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$3, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$unshen$do$ltsym$gt = klTailApply(primitive["shen.<sym>"], V1501); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsym$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltsym$gt), (mustBoolean(klTailApply(primitive["="], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsym$gt), "<>")) === true) ? (klTailApply(primitive["cons"], new Symbol("vector"), klTailApply(primitive["cons"], 0, null))) : (klTailApply(primitive["intern"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsym$gt))))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse$3);})()) : (YaccParse);})() ;}, 1);

defun("shen.control-chars", function(V1503) { return (mustBoolean(klTailApply(primitive["="], null, V1503)) === true) ? ("") : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1503)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "c", klTailApply(primitive["hd"], V1503))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1503))) && mustBoolean(klTailApply(primitive["="], "#", klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1503)))))))))) === true) ? ((function(){var CodePoint = klTailApply(primitive["shen.code-point"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1503))); return (function(){var AfterCodePoint = klTailApply(primitive["shen.after-codepoint"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1503))); return new Trampoline(primitive["@s"], klTailApply(primitive["n->string"], klTailApply(primitive["shen.decimalise"], CodePoint)), klTailApply(primitive["shen.control-chars"], AfterCodePoint));})();})()) : ((mustBoolean(klTailApply(primitive["cons?"], V1503)) === true) ? (new Trampoline(primitive["@s"], klTailApply(primitive["hd"], V1503), klTailApply(primitive["shen.control-chars"], klTailApply(primitive["tl"], V1503)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.control-chars"))) : (err("no cond match"))))) ;}, 1);

defun("shen.code-point", function(V1507) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1507)) && mustBoolean(klTailApply(primitive["="], ";", klTailApply(primitive["hd"], V1507))))) === true) ? ("") : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1507)) && mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V1507), klTailApply(primitive["cons"], "0", klTailApply(primitive["cons"], "1", klTailApply(primitive["cons"], "2", klTailApply(primitive["cons"], "3", klTailApply(primitive["cons"], "4", klTailApply(primitive["cons"], "5", klTailApply(primitive["cons"], "6", klTailApply(primitive["cons"], "7", klTailApply(primitive["cons"], "8", klTailApply(primitive["cons"], "9", klTailApply(primitive["cons"], "0", null))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1507), klTailApply(primitive["shen.code-point"], klTailApply(primitive["tl"], V1507)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["cn"], "code point parse error ", klTailApply(primitive["shen.app"], V1507, "\n", new Symbol("shen.a"))))) : (err("no cond match")))) ;}, 1);

defun("shen.after-codepoint", function(V1513) { return (mustBoolean(klTailApply(primitive["="], null, V1513)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1513)) && mustBoolean(klTailApply(primitive["="], ";", klTailApply(primitive["hd"], V1513))))) === true) ? (new Trampoline(primitive["tl"], V1513)) : ((mustBoolean(klTailApply(primitive["cons?"], V1513)) === true) ? (new Trampoline(primitive["shen.after-codepoint"], klTailApply(primitive["tl"], V1513))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.after-codepoint"))) : (err("no cond match"))))) ;}, 1);

defun("shen.decimalise", function(V1515) { return new Trampoline(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.digits->integers"], V1515)), 0) ;}, 1);

defun("shen.digits->integers", function(V1521) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1521)) && mustBoolean(klTailApply(primitive["="], "0", klTailApply(primitive["hd"], V1521))))) === true) ? (new Trampoline(primitive["cons"], 0, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V1521)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1521)) && mustBoolean(klTailApply(primitive["="], "1", klTailApply(primitive["hd"], V1521))))) === true) ? (new Trampoline(primitive["cons"], 1, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V1521)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1521)) && mustBoolean(klTailApply(primitive["="], "2", klTailApply(primitive["hd"], V1521))))) === true) ? (new Trampoline(primitive["cons"], 2, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V1521)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1521)) && mustBoolean(klTailApply(primitive["="], "3", klTailApply(primitive["hd"], V1521))))) === true) ? (new Trampoline(primitive["cons"], 3, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V1521)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1521)) && mustBoolean(klTailApply(primitive["="], "4", klTailApply(primitive["hd"], V1521))))) === true) ? (new Trampoline(primitive["cons"], 4, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V1521)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1521)) && mustBoolean(klTailApply(primitive["="], "5", klTailApply(primitive["hd"], V1521))))) === true) ? (new Trampoline(primitive["cons"], 5, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V1521)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1521)) && mustBoolean(klTailApply(primitive["="], "6", klTailApply(primitive["hd"], V1521))))) === true) ? (new Trampoline(primitive["cons"], 6, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V1521)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1521)) && mustBoolean(klTailApply(primitive["="], "7", klTailApply(primitive["hd"], V1521))))) === true) ? (new Trampoline(primitive["cons"], 7, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V1521)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1521)) && mustBoolean(klTailApply(primitive["="], "8", klTailApply(primitive["hd"], V1521))))) === true) ? (new Trampoline(primitive["cons"], 8, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V1521)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1521)) && mustBoolean(klTailApply(primitive["="], "9", klTailApply(primitive["hd"], V1521))))) === true) ? (new Trampoline(primitive["cons"], 9, klTailApply(primitive["shen.digits->integers"], klTailApply(primitive["tl"], V1521)))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match")))))))))))) ;}, 1);

defun("shen.<sym>", function(V1523) { return (function(){var Parse$unshen$do$ltalpha$gt = klTailApply(primitive["shen.<alpha>"], V1523); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltalpha$gt))) === true) ? ((function(){var Parse$unshen$do$ltalphanums$gt = klTailApply(primitive["shen.<alphanums>"], Parse$unshen$do$ltalpha$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltalphanums$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltalphanums$gt), klTailApply(primitive["@s"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltalpha$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltalphanums$gt)))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})() ;}, 1);

defun("shen.<alphanums>", function(V1525) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltalphanum$gt = klTailApply(primitive["shen.<alphanum>"], V1525); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltalphanum$gt))) === true) ? ((function(){var Parse$unshen$do$ltalphanums$gt = klTailApply(primitive["shen.<alphanums>"], Parse$unshen$do$ltalphanum$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltalphanums$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltalphanums$gt), klTailApply(primitive["@s"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltalphanum$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltalphanums$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$un$lte$gt = klTailApply(primitive["<e>"], V1525); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), "")) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<alphanum>", function(V1527) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltalpha$gt = klTailApply(primitive["shen.<alpha>"], V1527); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltalpha$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltalpha$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltalpha$gt))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$unshen$do$ltnum$gt = klTailApply(primitive["shen.<num>"], V1527); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltnum$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltnum$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltnum$gt))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<num>", function(V1529) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1529))) === true) ? ((function(){var Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1529)); return (mustBoolean(klTailApply(primitive["shen.numbyte?"], Parse$unChar)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1529)), klTailApply(primitive["shen.hdtl"], V1529))), klTailApply(primitive["n->string"], Parse$unChar))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.numbyte?", function(V1535) { return (mustBoolean(klTailApply(primitive["="], 48, V1535)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 49, V1535)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 50, V1535)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 51, V1535)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 52, V1535)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 53, V1535)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 54, V1535)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 55, V1535)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 56, V1535)) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], 57, V1535)) === true) ? (true) : ((mustBoolean(true) === true) ? (false) : (err("no cond match")))))))))))) ;}, 1);

defun("shen.<alpha>", function(V1537) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1537))) === true) ? ((function(){var Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1537)); return (mustBoolean(klTailApply(primitive["shen.symbol-code?"], Parse$unChar)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1537)), klTailApply(primitive["shen.hdtl"], V1537))), klTailApply(primitive["n->string"], Parse$unChar))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.symbol-code?", function(V1539) { return (mustBoolean(klTailApply(primitive["="], V1539, 126)) || mustBoolean((mustBoolean((mustBoolean(klTailApply(primitive[">"], V1539, 94)) && mustBoolean(klTailApply(primitive["<"], V1539, 123)))) || mustBoolean((mustBoolean((mustBoolean(klTailApply(primitive[">"], V1539, 59)) && mustBoolean(klTailApply(primitive["<"], V1539, 91)))) || mustBoolean((mustBoolean((mustBoolean(klTailApply(primitive[">"], V1539, 41)) && mustBoolean((mustBoolean(klTailApply(primitive["<"], V1539, 58)) && mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], V1539, 44))))))) || mustBoolean((mustBoolean((mustBoolean(klTailApply(primitive[">"], V1539, 34)) && mustBoolean(klTailApply(primitive["<"], V1539, 40)))) || mustBoolean(klTailApply(primitive["="], V1539, 33))))))))))) ;}, 1);

defun("shen.<str>", function(V1541) { return (function(){var Parse$unshen$do$ltdbq$gt = klTailApply(primitive["shen.<dbq>"], V1541); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdbq$gt))) === true) ? ((function(){var Parse$unshen$do$ltstrcontents$gt = klTailApply(primitive["shen.<strcontents>"], Parse$unshen$do$ltdbq$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstrcontents$gt))) === true) ? ((function(){var Parse$unshen$do$ltdbq$gt$4 = klTailApply(primitive["shen.<dbq>"], Parse$unshen$do$ltstrcontents$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdbq$gt$4))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdbq$gt$4), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltstrcontents$gt))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})() ;}, 1);

defun("shen.<dbq>", function(V1543) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1543))) === true) ? ((function(){var Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1543)); return (mustBoolean(klTailApply(primitive["="], Parse$unChar, 34)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1543)), klTailApply(primitive["shen.hdtl"], V1543))), Parse$unChar)) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<strcontents>", function(V1545) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltstrc$gt = klTailApply(primitive["shen.<strc>"], V1545); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstrc$gt))) === true) ? ((function(){var Parse$unshen$do$ltstrcontents$gt = klTailApply(primitive["shen.<strcontents>"], Parse$unshen$do$ltstrc$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstrcontents$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltstrcontents$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltstrc$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltstrcontents$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$un$lte$gt = klTailApply(primitive["<e>"], V1545); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), null)) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<byte>", function(V1547) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1547))) === true) ? ((function(){var Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1547)); return new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1547)), klTailApply(primitive["shen.hdtl"], V1547))), klTailApply(primitive["n->string"], Parse$unChar));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<strc>", function(V1549) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1549))) === true) ? ((function(){var Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1549)); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], Parse$unChar, 34))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1549)), klTailApply(primitive["shen.hdtl"], V1549))), klTailApply(primitive["n->string"], Parse$unChar))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<number>", function(V1551) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltminus$gt = klTailApply(primitive["shen.<minus>"], V1551); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltminus$gt))) === true) ? ((function(){var Parse$unshen$do$ltnumber$gt = klTailApply(primitive["shen.<number>"], Parse$unshen$do$ltminus$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltnumber$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltnumber$gt), klTailApply(primitive["-"], 0, klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltnumber$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$3 = (function(){var Parse$unshen$do$ltplus$gt = klTailApply(primitive["shen.<plus>"], V1551); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltplus$gt))) === true) ? ((function(){var Parse$unshen$do$ltnumber$gt = klTailApply(primitive["shen.<number>"], Parse$unshen$do$ltplus$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltnumber$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltnumber$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltnumber$gt))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$3, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$4 = (function(){var Parse$unshen$do$ltpredigits$gt = klTailApply(primitive["shen.<predigits>"], V1551); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpredigits$gt))) === true) ? ((function(){var Parse$unshen$do$ltstop$gt = klTailApply(primitive["shen.<stop>"], Parse$unshen$do$ltpredigits$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstop$gt))) === true) ? ((function(){var Parse$unshen$do$ltpostdigits$gt = klTailApply(primitive["shen.<postdigits>"], Parse$unshen$do$ltstop$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpostdigits$gt))) === true) ? ((function(){var Parse$unshen$do$ltE$gt = klTailApply(primitive["shen.<E>"], Parse$unshen$do$ltpostdigits$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltE$gt))) === true) ? ((function(){var Parse$unshen$do$ltlog10$gt = klTailApply(primitive["shen.<log10>"], Parse$unshen$do$ltE$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltlog10$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltlog10$gt), klTailApply(primitive["*"], klTailApply(primitive["shen.expt"], 10, klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltlog10$gt)), klTailApply(primitive["+"], klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpredigits$gt)), 0), klTailApply(primitive["shen.post"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpostdigits$gt), 1))))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$4, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$5 = (function(){var Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], V1551); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? ((function(){var Parse$unshen$do$ltE$gt = klTailApply(primitive["shen.<E>"], Parse$unshen$do$ltdigits$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltE$gt))) === true) ? ((function(){var Parse$unshen$do$ltlog10$gt = klTailApply(primitive["shen.<log10>"], Parse$unshen$do$ltE$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltlog10$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltlog10$gt), klTailApply(primitive["*"], klTailApply(primitive["shen.expt"], 10, klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltlog10$gt)), klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt)), 0)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$5, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$6 = (function(){var Parse$unshen$do$ltpredigits$gt = klTailApply(primitive["shen.<predigits>"], V1551); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpredigits$gt))) === true) ? ((function(){var Parse$unshen$do$ltstop$gt = klTailApply(primitive["shen.<stop>"], Parse$unshen$do$ltpredigits$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltstop$gt))) === true) ? ((function(){var Parse$unshen$do$ltpostdigits$gt = klTailApply(primitive["shen.<postdigits>"], Parse$unshen$do$ltstop$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltpostdigits$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltpostdigits$gt), klTailApply(primitive["+"], klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpredigits$gt)), 0), klTailApply(primitive["shen.post"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltpostdigits$gt), 1)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$6, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], V1551); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt)), 0))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse$6);})()) : (YaccParse$5);})()) : (YaccParse$4);})()) : (YaccParse$3);})()) : (YaccParse);})() ;}, 1);

defun("shen.<E>", function(V1553) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1553))) && mustBoolean(klTailApply(primitive["="], 101, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1553)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1553)), klTailApply(primitive["shen.hdtl"], V1553))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<log10>", function(V1555) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltminus$gt = klTailApply(primitive["shen.<minus>"], V1555); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltminus$gt))) === true) ? ((function(){var Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], Parse$unshen$do$ltminus$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["-"], 0, klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt)), 0)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], V1555); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["shen.pre"], klTailApply(primitive["reverse"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt)), 0))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<plus>", function(V1557) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1557))) === true) ? ((function(){var Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1557)); return (mustBoolean(klTailApply(primitive["="], Parse$unChar, 43)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1557)), klTailApply(primitive["shen.hdtl"], V1557))), Parse$unChar)) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<stop>", function(V1559) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1559))) === true) ? ((function(){var Parse$unChar = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1559)); return (mustBoolean(klTailApply(primitive["="], Parse$unChar, 46)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1559)), klTailApply(primitive["shen.hdtl"], V1559))), Parse$unChar)) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<predigits>", function(V1561) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], V1561); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$un$lte$gt = klTailApply(primitive["<e>"], V1561); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), null)) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<postdigits>", function(V1563) { return (function(){var Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], V1563); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt))) : (new Trampoline(primitive["fail"]));})() ;}, 1);

defun("shen.<digits>", function(V1565) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltdigit$gt = klTailApply(primitive["shen.<digit>"], V1565); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigit$gt))) === true) ? ((function(){var Parse$unshen$do$ltdigits$gt = klTailApply(primitive["shen.<digits>"], Parse$unshen$do$ltdigit$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigits$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigits$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigit$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigits$gt)))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$unshen$do$ltdigit$gt = klTailApply(primitive["shen.<digit>"], V1565); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltdigit$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltdigit$gt), klTailApply(primitive["cons"], klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltdigit$gt), null))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<digit>", function(V1567) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1567))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1567)); return (mustBoolean(klTailApply(primitive["shen.numbyte?"], Parse$unX)) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1567)), klTailApply(primitive["shen.hdtl"], V1567))), klTailApply(primitive["shen.byte->digit"], Parse$unX))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.byte->digit", function(V1569) { return (mustBoolean(klTailApply(primitive["="], 48, V1569)) === true) ? (0) : ((mustBoolean(klTailApply(primitive["="], 49, V1569)) === true) ? (1) : ((mustBoolean(klTailApply(primitive["="], 50, V1569)) === true) ? (2) : ((mustBoolean(klTailApply(primitive["="], 51, V1569)) === true) ? (3) : ((mustBoolean(klTailApply(primitive["="], 52, V1569)) === true) ? (4) : ((mustBoolean(klTailApply(primitive["="], 53, V1569)) === true) ? (5) : ((mustBoolean(klTailApply(primitive["="], 54, V1569)) === true) ? (6) : ((mustBoolean(klTailApply(primitive["="], 55, V1569)) === true) ? (7) : ((mustBoolean(klTailApply(primitive["="], 56, V1569)) === true) ? (8) : ((mustBoolean(klTailApply(primitive["="], 57, V1569)) === true) ? (9) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.byte->digit"))) : (err("no cond match")))))))))))) ;}, 1);

defun("shen.pre", function(V1574, V1575) { return (mustBoolean(klTailApply(primitive["="], null, V1574)) === true) ? (0) : ((mustBoolean(klTailApply(primitive["cons?"], V1574)) === true) ? (new Trampoline(primitive["+"], klTailApply(primitive["*"], klTailApply(primitive["shen.expt"], 10, V1575), klTailApply(primitive["hd"], V1574)), klTailApply(primitive["shen.pre"], klTailApply(primitive["tl"], V1574), klTailApply(primitive["+"], V1575, 1)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.pre"))) : (err("no cond match")))) ;}, 2);

defun("shen.post", function(V1580, V1581) { return (mustBoolean(klTailApply(primitive["="], null, V1580)) === true) ? (0) : ((mustBoolean(klTailApply(primitive["cons?"], V1580)) === true) ? (new Trampoline(primitive["+"], klTailApply(primitive["*"], klTailApply(primitive["shen.expt"], 10, klTailApply(primitive["-"], 0, V1581)), klTailApply(primitive["hd"], V1580)), klTailApply(primitive["shen.post"], klTailApply(primitive["tl"], V1580), klTailApply(primitive["+"], V1581, 1)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.post"))) : (err("no cond match")))) ;}, 2);

defun("shen.expt", function(V1586, V1587) { return (mustBoolean(klTailApply(primitive["="], 0, V1587)) === true) ? (1) : ((mustBoolean(klTailApply(primitive[">"], V1587, 0)) === true) ? (new Trampoline(primitive["*"], V1586, klTailApply(primitive["shen.expt"], V1586, klTailApply(primitive["-"], V1587, 1)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["*"], 1, klTailApply(primitive["/"], klTailApply(primitive["shen.expt"], V1586, klTailApply(primitive["+"], V1587, 1)), V1586))) : (err("no cond match")))) ;}, 2);

defun("shen.<st_input1>", function(V1589) { return (function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], V1589); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt))) : (new Trampoline(primitive["fail"]));})() ;}, 1);

defun("shen.<st_input2>", function(V1591) { return (function(){var Parse$unshen$do$ltst$uninput$gt = klTailApply(primitive["shen.<st_input>"], V1591); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltst$uninput$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltst$uninput$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltst$uninput$gt))) : (new Trampoline(primitive["fail"]));})() ;}, 1);

defun("shen.<comment>", function(V1593) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltsingleline$gt = klTailApply(primitive["shen.<singleline>"], V1593); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsingleline$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltsingleline$gt), new Symbol("shen.skip"))) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$unshen$do$ltmultiline$gt = klTailApply(primitive["shen.<multiline>"], V1593); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltmultiline$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltmultiline$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<singleline>", function(V1595) { return (function(){var Parse$unshen$do$ltbackslash$gt = klTailApply(primitive["shen.<backslash>"], V1595); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltbackslash$gt))) === true) ? ((function(){var Parse$unshen$do$ltbackslash$gt$3 = klTailApply(primitive["shen.<backslash>"], Parse$unshen$do$ltbackslash$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltbackslash$gt$3))) === true) ? ((function(){var Parse$unshen$do$ltanysingle$gt = klTailApply(primitive["shen.<anysingle>"], Parse$unshen$do$ltbackslash$gt$3); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltanysingle$gt))) === true) ? ((function(){var Parse$unshen$do$ltreturn$gt = klTailApply(primitive["shen.<return>"], Parse$unshen$do$ltanysingle$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltreturn$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltreturn$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})() ;}, 1);

defun("shen.<backslash>", function(V1597) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1597))) && mustBoolean(klTailApply(primitive["="], 92, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1597)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1597)), klTailApply(primitive["shen.hdtl"], V1597))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<anysingle>", function(V1599) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltnon_return$gt = klTailApply(primitive["shen.<non-return>"], V1599); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltnon_return$gt))) === true) ? ((function(){var Parse$unshen$do$ltanysingle$gt = klTailApply(primitive["shen.<anysingle>"], Parse$unshen$do$ltnon_return$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltanysingle$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltanysingle$gt), new Symbol("shen.skip"))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$un$lte$gt = klTailApply(primitive["<e>"], V1599); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lte$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lte$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<non-return>", function(V1601) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1601))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1601)); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["element?"], Parse$unX, klTailApply(primitive["cons"], 10, klTailApply(primitive["cons"], 13, null))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1601)), klTailApply(primitive["shen.hdtl"], V1601))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<return>", function(V1603) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1603))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1603)); return (mustBoolean(klTailApply(primitive["element?"], Parse$unX, klTailApply(primitive["cons"], 10, klTailApply(primitive["cons"], 13, null)))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1603)), klTailApply(primitive["shen.hdtl"], V1603))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<multiline>", function(V1605) { return (function(){var Parse$unshen$do$ltbackslash$gt = klTailApply(primitive["shen.<backslash>"], V1605); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltbackslash$gt))) === true) ? ((function(){var Parse$unshen$do$lttimes$gt = klTailApply(primitive["shen.<times>"], Parse$unshen$do$ltbackslash$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$lttimes$gt))) === true) ? ((function(){var Parse$unshen$do$ltanymulti$gt = klTailApply(primitive["shen.<anymulti>"], Parse$unshen$do$lttimes$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltanymulti$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltanymulti$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})() ;}, 1);

defun("shen.<times>", function(V1607) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1607))) && mustBoolean(klTailApply(primitive["="], 42, klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1607)))))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1607)), klTailApply(primitive["shen.hdtl"], V1607))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.<anymulti>", function(V1609) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltcomment$gt = klTailApply(primitive["shen.<comment>"], V1609); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltcomment$gt))) === true) ? ((function(){var Parse$unshen$do$ltanymulti$gt = klTailApply(primitive["shen.<anymulti>"], Parse$unshen$do$ltcomment$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltanymulti$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltanymulti$gt), new Symbol("shen.skip"))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var YaccParse$3 = (function(){var Parse$unshen$do$lttimes$gt = klTailApply(primitive["shen.<times>"], V1609); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$lttimes$gt))) === true) ? ((function(){var Parse$unshen$do$ltbackslash$gt = klTailApply(primitive["shen.<backslash>"], Parse$unshen$do$lttimes$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltbackslash$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltbackslash$gt), new Symbol("shen.skip"))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse$3, klTailApply(primitive["fail"]))) === true) ? ((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1609))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1609)); return (function(){var Parse$unshen$do$ltanymulti$gt = klTailApply(primitive["shen.<anymulti>"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1609)), klTailApply(primitive["shen.hdtl"], V1609))); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltanymulti$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltanymulti$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})();})()) : (new Trampoline(primitive["fail"]))) : (YaccParse$3);})()) : (YaccParse);})() ;}, 1);

defun("shen.<whitespaces>", function(V1611) { return (function(){var YaccParse = (function(){var Parse$unshen$do$ltwhitespace$gt = klTailApply(primitive["shen.<whitespace>"], V1611); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltwhitespace$gt))) === true) ? ((function(){var Parse$unshen$do$ltwhitespaces$gt = klTailApply(primitive["shen.<whitespaces>"], Parse$unshen$do$ltwhitespace$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltwhitespaces$gt))) === true) ? (klTailApply(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltwhitespaces$gt), new Symbol("shen.skip"))) : (klTailApply(primitive["fail"]));})()) : (klTailApply(primitive["fail"]));})(); return (mustBoolean(klTailApply(primitive["="], YaccParse, klTailApply(primitive["fail"]))) === true) ? ((function(){var Parse$unshen$do$ltwhitespace$gt = klTailApply(primitive["shen.<whitespace>"], V1611); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltwhitespace$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$unshen$do$ltwhitespace$gt), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (YaccParse);})() ;}, 1);

defun("shen.<whitespace>", function(V1613) { return (mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1613))) === true) ? ((function(){var Parse$unX = klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1613)); return (mustBoolean((function(){var Parse$unCase = Parse$unX; return (mustBoolean(klTailApply(primitive["="], Parse$unCase, 32)) || mustBoolean((mustBoolean(klTailApply(primitive["="], Parse$unCase, 13)) || mustBoolean((mustBoolean(klTailApply(primitive["="], Parse$unCase, 10)) || mustBoolean(klTailApply(primitive["="], Parse$unCase, 9)))))));})()) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], klTailApply(primitive["shen.pair"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1613)), klTailApply(primitive["shen.hdtl"], V1613))), new Symbol("shen.skip"))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"])) ;}, 1);

defun("shen.cons_form", function(V1615) { return (mustBoolean(klTailApply(primitive["="], null, V1615)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1615)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1615))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1615)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1615))))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1615)), new Symbol("bar!"))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1615), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1615))))) : ((mustBoolean(klTailApply(primitive["cons?"], V1615)) === true) ? (new Trampoline(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1615), klTailApply(primitive["cons"], klTailApply(primitive["shen.cons_form"], klTailApply(primitive["tl"], V1615)), null)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.cons_form"))) : (err("no cond match"))))) ;}, 1);

defun("shen.package-macro", function(V1620, V1621) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1620)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("$"), klTailApply(primitive["hd"], V1620))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1620))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1620)))))))))) === true) ? (new Trampoline(primitive["append"], klTailApply(primitive["explode"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1620))), V1621)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1620)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("package"), klTailApply(primitive["hd"], V1620))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1620))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("null"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1620)))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1620)))))))))))) === true) ? (new Trampoline(primitive["append"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1620))), V1621)) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1620)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("package"), klTailApply(primitive["hd"], V1620))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1620))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1620)))))))))) === true) ? ((function(){var ListofExceptions = klTailApply(primitive["shen.eval-without-macros"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1620)))); return (function(){var External = klTailApply(primitive["shen.record-exceptions"], ListofExceptions, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1620))); return (function(){var PackageNameDot = klTailApply(primitive["intern"], klTailApply(primitive["cn"], klTailApply(primitive["str"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1620))), ".")); return (function(){var ExpPackageNameDot = klTailApply(primitive["explode"], PackageNameDot); return (function(){var Packaged = klTailApply(primitive["shen.packageh"], PackageNameDot, ListofExceptions, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1620))), ExpPackageNameDot); return (function(){var Internal = klTailApply(primitive["shen.record-internal"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1620)), klTailApply(primitive["shen.internal-symbols"], ExpPackageNameDot, Packaged)); return new Trampoline(primitive["append"], Packaged, V1621);})();})();})();})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], V1620, V1621)) : (err("no cond match"))))) ;}, 2);

defun("shen.record-exceptions", function(V1624, V1625) { return (function(){var CurrExceptions = klTailApply(primitive["get/or"], V1625, new Symbol("shen.external-symbols"), klFun(function() { return null}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))); return (function(){var AllExceptions = klTailApply(primitive["union"], V1624, CurrExceptions); return new Trampoline(primitive["put"], V1625, new Symbol("shen.external-symbols"), AllExceptions, klTailApply(primitive["value"], new Symbol("*property-vector*")));})();})() ;}, 2);

defun("shen.record-internal", function(V1628, V1629) { return new Trampoline(primitive["put"], V1628, new Symbol("shen.internal-symbols"), klTailApply(primitive["union"], V1629, klTailApply(primitive["get/or"], V1628, new Symbol("shen.internal-symbols"), klFun(function() { return null}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*")))), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 2);

defun("shen.internal-symbols", function(V1640, V1641) { return (mustBoolean((mustBoolean(klTailApply(primitive["symbol?"], V1641)) && mustBoolean(klTailApply(primitive["shen.prefix?"], V1640, klTailApply(primitive["explode"], V1641))))) === true) ? (new Trampoline(primitive["cons"], V1641, null)) : ((mustBoolean(klTailApply(primitive["cons?"], V1641)) === true) ? (new Trampoline(primitive["union"], klTailApply(primitive["shen.internal-symbols"], V1640, klTailApply(primitive["hd"], V1641)), klTailApply(primitive["shen.internal-symbols"], V1640, klTailApply(primitive["tl"], V1641)))) : ((mustBoolean(true) === true) ? (null) : (err("no cond match")))) ;}, 2);

defun("shen.packageh", function(V1658, V1659, V1660, V1661) { return (mustBoolean(klTailApply(primitive["cons?"], V1660)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["shen.packageh"], V1658, V1659, klTailApply(primitive["hd"], V1660), V1661), klTailApply(primitive["shen.packageh"], V1658, V1659, klTailApply(primitive["tl"], V1660), V1661))) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.sysfunc?"], V1660)) || mustBoolean((mustBoolean(klTailApply(primitive["variable?"], V1660)) || mustBoolean(klTailApply(primitive["element?"], V1660, V1659)))))) === true) ? (V1660) : ((mustBoolean((mustBoolean(klTailApply(primitive["symbol?"], V1660)) && mustBoolean((function(){var ExplodeX = klTailApply(primitive["explode"], V1660); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["shen.prefix?"], klTailApply(primitive["cons"], "s", klTailApply(primitive["cons"], "h", klTailApply(primitive["cons"], "e", klTailApply(primitive["cons"], "n", klTailApply(primitive["cons"], ".", null))))), ExplodeX))) && mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["shen.prefix?"], V1661, ExplodeX))));})()))) === true) ? (new Trampoline(primitive["concat"], V1658, V1660)) : ((mustBoolean(true) === true) ? (V1660) : (err("no cond match"))))) ;}, 4);

defun("shen.f_error", function(V1663) { return (function(){klTailApply(primitive["shen.prhush"], klTailApply(primitive["cn"], "partial function ", klTailApply(primitive["shen.app"], V1663, ";\n", new Symbol("shen.a"))), klTailApply(primitive["stoutput"])); return (function(){(mustBoolean((mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["shen.tracked?"], V1663))) && mustBoolean(klTailApply(primitive["y-or-n?"], klTailApply(primitive["cn"], "track ", klTailApply(primitive["shen.app"], V1663, "? ", new Symbol("shen.a"))))))) === true) ? (klTailApply(primitive["shen.track-function"], klTailApply(primitive["ps"], V1663))) : (new Symbol("shen.ok")); return new Trampoline(primitive["simple-error"], "aborted");})();})() ;}, 1);

defun("shen.tracked?", function(V1665) { return new Trampoline(primitive["element?"], V1665, klTailApply(primitive["value"], new Symbol("shen.*tracking*"))) ;}, 1);

defun("track", function(V1667) { return (function(){var Source = klTailApply(primitive["ps"], V1667); return new Trampoline(primitive["shen.track-function"], Source);})() ;}, 1);

defun("shen.track-function", function(V1669) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1669)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defun"), klTailApply(primitive["hd"], V1669))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1669))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1669)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1669))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1669)))))))))))))))) === true) ? ((function(){var KL = klTailApply(primitive["cons"], new Symbol("defun"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1669)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1669))), klTailApply(primitive["cons"], klTailApply(primitive["shen.insert-tracking-code"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1669)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1669))), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1669))))), null)))); return (function(){var Ob = klTailApply(primitive["eval-kl"], KL); return (function(){var Tr = klTailApply(primitive["set"], new Symbol("shen.*tracking*"), klTailApply(primitive["cons"], Ob, klTailApply(primitive["value"], new Symbol("shen.*tracking*")))); return Ob;})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.track-function"))) : (err("no cond match"))) ;}, 1);

defun("shen.insert-tracking-code", function(V1673, V1674, V1675) { return new Trampoline(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("set"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("+"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), null)), klTailApply(primitive["cons"], 1, null))), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.input-track"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), null)), klTailApply(primitive["cons"], V1673, klTailApply(primitive["cons"], klTailApply(primitive["shen.cons_form"], V1674), null)))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.terpri-or-read-char"), null), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], V1675, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.output-track"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), null)), klTailApply(primitive["cons"], V1673, klTailApply(primitive["cons"], new Symbol("Result"), null)))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("set"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("-"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("shen.*call*"), null)), klTailApply(primitive["cons"], 1, null))), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.terpri-or-read-char"), null), klTailApply(primitive["cons"], new Symbol("Result"), null))), null))), null))), null)))), null))), null))), null))) ;}, 3);

defun("step", function(V1681) { return (mustBoolean(klTailApply(primitive["="], new Symbol("+"), V1681)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*step*"), true)) : ((mustBoolean(klTailApply(primitive["="], new Symbol("-"), V1681)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*step*"), false)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "step expects a + or a -.\n")) : (err("no cond match")))) ;}, 1);

defun("spy", function(V1687) { return (mustBoolean(klTailApply(primitive["="], new Symbol("+"), V1687)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*spy*"), true)) : ((mustBoolean(klTailApply(primitive["="], new Symbol("-"), V1687)) === true) ? (new Trampoline(primitive["set"], new Symbol("shen.*spy*"), false)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "spy expects a + or a -.\n")) : (err("no cond match")))) ;}, 1);

defun("shen.terpri-or-read-char", function() { return (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*step*"))) === true) ? (new Trampoline(primitive["shen.check-byte"], klTailApply(primitive["read-byte"], klTailApply(primitive["value"], new Symbol("*stinput*"))))) : (new Trampoline(primitive["nl"], 1)) ;}, 0);

defun("shen.check-byte", function(V1693) { return (mustBoolean(klTailApply(primitive["="], V1693, klTailApply(primitive["shen.hat"]))) === true) ? (new Trampoline(primitive["simple-error"], "aborted")) : ((mustBoolean(true) === true) ? (true) : (err("no cond match"))) ;}, 1);

defun("shen.input-track", function(V1697, V1698, V1699) { return (function(){klTailApply(primitive["shen.prhush"], klTailApply(primitive["cn"], "\n", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.spaces"], V1697), klTailApply(primitive["cn"], "<", klTailApply(primitive["shen.app"], V1697, klTailApply(primitive["cn"], "> Inputs to ", klTailApply(primitive["shen.app"], V1698, klTailApply(primitive["cn"], " \n", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.spaces"], V1697), "", new Symbol("shen.a"))), new Symbol("shen.a"))), new Symbol("shen.a"))), new Symbol("shen.a"))), klTailApply(primitive["stoutput"])); return new Trampoline(primitive["shen.recursively-print"], V1699);})() ;}, 3);

defun("shen.recursively-print", function(V1701) { return (mustBoolean(klTailApply(primitive["="], null, V1701)) === true) ? (new Trampoline(primitive["shen.prhush"], " ==>", klTailApply(primitive["stoutput"]))) : ((mustBoolean(klTailApply(primitive["cons?"], V1701)) === true) ? ((function(){klTailApply(primitive["print"], klTailApply(primitive["hd"], V1701)); return (function(){klTailApply(primitive["shen.prhush"], ", ", klTailApply(primitive["stoutput"])); return new Trampoline(primitive["shen.recursively-print"], klTailApply(primitive["tl"], V1701));})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.recursively-print"))) : (err("no cond match")))) ;}, 1);

defun("shen.spaces", function(V1703) { return (mustBoolean(klTailApply(primitive["="], 0, V1703)) === true) ? ("") : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cn"], " ", klTailApply(primitive["shen.spaces"], klTailApply(primitive["-"], V1703, 1)))) : (err("no cond match"))) ;}, 1);

defun("shen.output-track", function(V1707, V1708, V1709) { return new Trampoline(primitive["shen.prhush"], klTailApply(primitive["cn"], "\n", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.spaces"], V1707), klTailApply(primitive["cn"], "<", klTailApply(primitive["shen.app"], V1707, klTailApply(primitive["cn"], "> Output from ", klTailApply(primitive["shen.app"], V1708, klTailApply(primitive["cn"], " \n", klTailApply(primitive["shen.app"], klTailApply(primitive["shen.spaces"], V1707), klTailApply(primitive["cn"], "==> ", klTailApply(primitive["shen.app"], V1709, "", new Symbol("shen.s"))), new Symbol("shen.a"))), new Symbol("shen.a"))), new Symbol("shen.a"))), new Symbol("shen.a"))), klTailApply(primitive["stoutput"])) ;}, 3);

defun("untrack", function(V1711) { return (function(){var Tracking = klTailApply(primitive["value"], new Symbol("shen.*tracking*")); return (function(){var Tracking$3 = klTailApply(primitive["set"], new Symbol("shen.*tracking*"), klTailApply(primitive["remove"], V1711, Tracking)); return new Trampoline(primitive["eval"], klTailApply(primitive["ps"], V1711));})();})() ;}, 1);

defun("profile", function(V1713) { return new Trampoline(primitive["shen.profile-help"], klTailApply(primitive["ps"], V1713)) ;}, 1);

defun("shen.profile-help", function(V1719) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1719)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defun"), klTailApply(primitive["hd"], V1719))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1719))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1719)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1719))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1719)))))))))))))))) === true) ? ((function(){var G = klTailApply(primitive["gensym"], new Symbol("shen.f")); return (function(){var Profile = klTailApply(primitive["cons"], new Symbol("defun"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1719)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1719))), klTailApply(primitive["cons"], klTailApply(primitive["shen.profile-func"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1719)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1719))), klTailApply(primitive["cons"], G, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1719))))), null)))); return (function(){var Def = klTailApply(primitive["cons"], new Symbol("defun"), klTailApply(primitive["cons"], G, klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1719))), klTailApply(primitive["cons"], klTailApply(primitive["subst"], G, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1719)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1719))))), null)))); return (function(){var CompileProfile = klTailApply(primitive["shen.eval-without-macros"], Profile); return (function(){var CompileG = klTailApply(primitive["shen.eval-without-macros"], Def); return new Trampoline(primitive["hd"], klTailApply(primitive["tl"], V1719));})();})();})();})();})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["simple-error"], "Cannot profile.\n")) : (err("no cond match"))) ;}, 1);

defun("unprofile", function(V1721) { return new Trampoline(primitive["untrack"], V1721) ;}, 1);

defun("shen.profile-func", function(V1725, V1726, V1727) { return new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Start"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], new Symbol("run"), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], V1727, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Finish"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("-"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], new Symbol("run"), null)), klTailApply(primitive["cons"], new Symbol("Start"), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Record"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.put-profile"), klTailApply(primitive["cons"], V1725, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("+"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.get-profile"), klTailApply(primitive["cons"], V1725, null)), klTailApply(primitive["cons"], new Symbol("Finish"), null))), null))), klTailApply(primitive["cons"], new Symbol("Result"), null)))), null)))), null)))), null)))) ;}, 3);

defun("profile-results", function(V1729) { return (function(){var Results = klTailApply(primitive["shen.get-profile"], V1729); return (function(){var Initialise = klTailApply(primitive["shen.put-profile"], V1729, 0); return new Trampoline(primitive["@p"], V1729, Results);})();})() ;}, 1);

defun("shen.get-profile", function(V1731) { return new Trampoline(primitive["get/or"], V1731, new Symbol("profile"), klFun(function() { return 0}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);

defun("shen.put-profile", function(V1734, V1735) { return new Trampoline(primitive["put"], V1734, new Symbol("profile"), V1735, klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 2);

defun("load", function(V1737) { return (function(){var Load = (function(){var Start = klTailApply(primitive["get-time"], new Symbol("run")); return (function(){var Result = klTailApply(primitive["shen.load-help"], klTailApply(primitive["value"], new Symbol("shen.*tc*")), klTailApply(primitive["read-file"], V1737)); return (function(){var Finish = klTailApply(primitive["get-time"], new Symbol("run")); return (function(){var Time = klTailApply(primitive["-"], Finish, Start); return (function(){var Message = klTailApply(primitive["shen.prhush"], klTailApply(primitive["cn"], "\nrun time: ", klTailApply(primitive["cn"], klTailApply(primitive["str"], Time), " secs\n")), klTailApply(primitive["stoutput"])); return Result;})();})();})();})();})(); return (function(){var Infs = (mustBoolean(klTailApply(primitive["value"], new Symbol("shen.*tc*"))) === true) ? (klTailApply(primitive["shen.prhush"], klTailApply(primitive["cn"], "\ntypechecked in ", klTailApply(primitive["shen.app"], klTailApply(primitive["inferences"]), " inferences\n", new Symbol("shen.a"))), klTailApply(primitive["stoutput"]))) : (new Symbol("shen.skip")); return new Symbol("loaded");})();})() ;}, 1);

defun("shen.load-help", function(V1744, V1745) { return (mustBoolean(klTailApply(primitive["="], false, V1744)) === true) ? (new Trampoline(primitive["for-each"], klFun(function(X) { return new Trampoline(primitive["shen.prhush"], klTailApply(primitive["shen.app"], klTailApply(primitive["shen.eval-without-macros"], X), "\n", new Symbol("shen.s")), klTailApply(primitive["stoutput"]));}, 1), V1745)) : ((mustBoolean(true) === true) ? ((function(){var RemoveSynonyms = klTailApply(primitive["mapcan"], klFun(function(X) { return new Trampoline(primitive["shen.remove-synonyms"], X);}, 1), V1745); return (function(){var Table = klTailApply(primitive["mapcan"], klFun(function(X) { return new Trampoline(primitive["shen.typetable"], X);}, 1), RemoveSynonyms); return (function(){var Assume = klTailApply(primitive["for-each"], klFun(function(X) { return new Trampoline(primitive["shen.assumetype"], X);}, 1), Table); return (function(){ try { return klTailApply(primitive["for-each"], klFun(function(X) { return new Trampoline(primitive["shen.typecheck-and-load"], X);}, 1), RemoveSynonyms);} catch (err) { return klTailApply(klFun(function(E) { return new Trampoline(primitive["shen.unwind-types"], E, Table);}, 1), err);} })();})();})();})()) : (err("no cond match"))) ;}, 2);

defun("shen.remove-synonyms", function(V1747) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1747)) && mustBoolean(klTailApply(primitive["="], new Symbol("shen.synonyms-help"), klTailApply(primitive["hd"], V1747))))) === true) ? ((function(){klTailApply(primitive["eval"], V1747); return null;})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], V1747, null)) : (err("no cond match"))) ;}, 1);

defun("shen.typecheck-and-load", function(V1749) { return (function(){klTailApply(primitive["nl"], 1); return new Trampoline(primitive["shen.typecheck-and-evaluate"], V1749, klTailApply(primitive["gensym"], new Symbol("A")));})() ;}, 1);

defun("shen.typetable", function(V1755) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1755)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("define"), klTailApply(primitive["hd"], V1755))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1755))))))) === true) ? ((function(){var Sig = klTailApply(primitive["compile"], klFun(function(Y) { return new Trampoline(primitive["shen.<sig+rest>"], Y);}, 1), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1755)), klFun(function(E) { return new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1755)), " lacks a proper signature.\n", new Symbol("shen.a")));}, 1)); return new Trampoline(primitive["cons"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1755)), Sig), null);})()) : ((mustBoolean(true) === true) ? (null) : (err("no cond match"))) ;}, 1);

defun("shen.assumetype", function(V1757) { return (mustBoolean(klTailApply(primitive["cons?"], V1757)) === true) ? (new Trampoline(primitive["declare"], klTailApply(primitive["hd"], V1757), klTailApply(primitive["tl"], V1757))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.assumetype"))) : (err("no cond match"))) ;}, 1);

defun("shen.unwind-types", function(V1764, V1765) { return (mustBoolean(klTailApply(primitive["="], null, V1765)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["error-to-string"], V1764))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1765)) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1765))))) === true) ? ((function(){klTailApply(primitive["shen.remtype"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1765))); return new Trampoline(primitive["shen.unwind-types"], V1764, klTailApply(primitive["tl"], V1765));})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.unwind-types"))) : (err("no cond match")))) ;}, 2);

defun("shen.remtype", function(V1767) { return new Trampoline(primitive["set"], new Symbol("shen.*signedfuncs*"), klTailApply(primitive["shen.removetype"], V1767, klTailApply(primitive["value"], new Symbol("shen.*signedfuncs*")))) ;}, 1);

defun("shen.removetype", function(V1775, V1776) { return (mustBoolean(klTailApply(primitive["="], null, V1776)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1776)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1776))) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1776)), V1775)))))) === true) ? (new Trampoline(primitive["shen.removetype"], klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1776)), klTailApply(primitive["tl"], V1776))) : ((mustBoolean(klTailApply(primitive["cons?"], V1776)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1776), klTailApply(primitive["shen.removetype"], V1775, klTailApply(primitive["tl"], V1776)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.removetype"))) : (err("no cond match"))))) ;}, 2);

defun("shen.<sig+rest>", function(V1778) { return (function(){var Parse$unshen$do$ltsignature$gt = klTailApply(primitive["shen.<signature>"], V1778); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$unshen$do$ltsignature$gt))) === true) ? ((function(){var Parse$un$lt$ex$gt = klTailApply(primitive["<!>"], Parse$unshen$do$ltsignature$gt); return (mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["="], klTailApply(primitive["fail"]), Parse$un$lt$ex$gt))) === true) ? (new Trampoline(primitive["shen.pair"], klTailApply(primitive["hd"], Parse$un$lt$ex$gt), klTailApply(primitive["shen.hdtl"], Parse$unshen$do$ltsignature$gt))) : (new Trampoline(primitive["fail"]));})()) : (new Trampoline(primitive["fail"]));})() ;}, 1);

defun("pr", function(V1781, V1782) { return (function(){ try { return klTailApply(primitive["shen.prh"], V1781, V1782, 0);} catch (err) { return klTailApply(klFun(function(E) { return V1781;}, 1), err);} })() ;}, 2);

defun("shen.prh", function(V1786, V1787, V1788) { return new Trampoline(primitive["shen.prh"], V1786, V1787, klTailApply(primitive["shen.write-char-and-inc"], V1786, V1787, V1788)) ;}, 3);

defun("shen.write-char-and-inc", function(V1792, V1793, V1794) { return (function(){klTailApply(primitive["write-byte"], klTailApply(primitive["string->n"], klTailApply(primitive["pos"], V1792, V1794)), V1793); return new Trampoline(primitive["+"], V1794, 1);})() ;}, 3);

defun("print", function(V1796) { return (function(){var String = klTailApply(primitive["shen.insert"], V1796, "~S"); return (function(){var Print = klTailApply(primitive["shen.prhush"], String, klTailApply(primitive["stoutput"])); return V1796;})();})() ;}, 1);

defun("shen.prhush", function(V1799, V1800) { return (mustBoolean(klTailApply(primitive["value"], new Symbol("*hush*"))) === true) ? (V1799) : (new Trampoline(primitive["pr"], V1799, V1800)) ;}, 2);

defun("shen.mkstr", function(V1803, V1804) { return (mustBoolean(klTailApply(primitive["string?"], V1803)) === true) ? (new Trampoline(primitive["shen.mkstr-l"], klTailApply(primitive["shen.proc-nl"], V1803), V1804)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.mkstr-r"], klTailApply(primitive["cons"], new Symbol("shen.proc-nl"), klTailApply(primitive["cons"], V1803, null)), V1804)) : (err("no cond match"))) ;}, 2);

defun("shen.mkstr-l", function(V1807, V1808) { return (mustBoolean(klTailApply(primitive["="], null, V1808)) === true) ? (V1807) : ((mustBoolean(klTailApply(primitive["cons?"], V1808)) === true) ? (new Trampoline(primitive["shen.mkstr-l"], klTailApply(primitive["shen.insert-l"], klTailApply(primitive["hd"], V1808), V1807), klTailApply(primitive["tl"], V1808))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.mkstr-l"))) : (err("no cond match")))) ;}, 2);

defun("shen.insert-l", function(V1813, V1814) { return (mustBoolean(klTailApply(primitive["="], "", V1814)) === true) ? ("") : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V1814)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V1814, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V1814))) && mustBoolean(klTailApply(primitive["="], "A", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V1814), 0))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.app"), klTailApply(primitive["cons"], V1813, klTailApply(primitive["cons"], klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V1814)), klTailApply(primitive["cons"], new Symbol("shen.a"), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V1814)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V1814, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V1814))) && mustBoolean(klTailApply(primitive["="], "R", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V1814), 0))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.app"), klTailApply(primitive["cons"], V1813, klTailApply(primitive["cons"], klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V1814)), klTailApply(primitive["cons"], new Symbol("shen.r"), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V1814)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V1814, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V1814))) && mustBoolean(klTailApply(primitive["="], "S", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V1814), 0))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.app"), klTailApply(primitive["cons"], V1813, klTailApply(primitive["cons"], klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V1814)), klTailApply(primitive["cons"], new Symbol("shen.s"), null))))) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V1814)) === true) ? (new Trampoline(primitive["shen.factor-cn"], klTailApply(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], klTailApply(primitive["pos"], V1814, 0), klTailApply(primitive["cons"], klTailApply(primitive["shen.insert-l"], V1813, klTailApply(primitive["tlstr"], V1814)), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1814)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cn"), klTailApply(primitive["hd"], V1814))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1814))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1814)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1814))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1814)), klTailApply(primitive["cons"], klTailApply(primitive["shen.insert-l"], V1813, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1814)))), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1814)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("shen.app"), klTailApply(primitive["hd"], V1814))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1814))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1814)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1814))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1814)))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.app"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1814)), klTailApply(primitive["cons"], klTailApply(primitive["shen.insert-l"], V1813, klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1814)))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1814))))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.insert-l"))) : (err("no cond match"))))))))) ;}, 2);

defun("shen.factor-cn", function(V1816) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1816)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cn"), klTailApply(primitive["hd"], V1816))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1816))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1816)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1816))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cn"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1816)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1816)))))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1816))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1816)))))))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1816))))) && mustBoolean((mustBoolean(klTailApply(primitive["string?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1816)))) && mustBoolean(klTailApply(primitive["string?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1816))))))))))))))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], klTailApply(primitive["cn"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1816)), klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1816)))))), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1816)))))))) : ((mustBoolean(true) === true) ? (V1816) : (err("no cond match"))) ;}, 1);

defun("shen.proc-nl", function(V1818) { return (mustBoolean(klTailApply(primitive["="], "", V1818)) === true) ? ("") : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V1818)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V1818, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V1818))) && mustBoolean(klTailApply(primitive["="], "%", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V1818), 0))))))))) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["n->string"], 10), klTailApply(primitive["shen.proc-nl"], klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V1818))))) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V1818)) === true) ? (new Trampoline(primitive["cn"], klTailApply(primitive["pos"], V1818, 0), klTailApply(primitive["shen.proc-nl"], klTailApply(primitive["tlstr"], V1818)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.proc-nl"))) : (err("no cond match"))))) ;}, 1);

defun("shen.mkstr-r", function(V1821, V1822) { return (mustBoolean(klTailApply(primitive["="], null, V1822)) === true) ? (V1821) : ((mustBoolean(klTailApply(primitive["cons?"], V1822)) === true) ? (new Trampoline(primitive["shen.mkstr-r"], klTailApply(primitive["cons"], new Symbol("shen.insert"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1822), klTailApply(primitive["cons"], V1821, null))), klTailApply(primitive["tl"], V1822))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.mkstr-r"))) : (err("no cond match")))) ;}, 2);

defun("shen.insert", function(V1825, V1826) { return new Trampoline(primitive["shen.insert-h"], V1825, V1826, "") ;}, 2);

defun("shen.insert-h", function(V1832, V1833, V1834) { return (mustBoolean(klTailApply(primitive["="], "", V1833)) === true) ? (V1834) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V1833)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V1833, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V1833))) && mustBoolean(klTailApply(primitive["="], "A", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V1833), 0))))))))) === true) ? (new Trampoline(primitive["cn"], V1834, klTailApply(primitive["shen.app"], V1832, klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V1833)), new Symbol("shen.a")))) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V1833)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V1833, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V1833))) && mustBoolean(klTailApply(primitive["="], "R", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V1833), 0))))))))) === true) ? (new Trampoline(primitive["cn"], V1834, klTailApply(primitive["shen.app"], V1832, klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V1833)), new Symbol("shen.r")))) : ((mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], V1833)) && mustBoolean((mustBoolean(klTailApply(primitive["="], "~", klTailApply(primitive["pos"], V1833, 0))) && mustBoolean((mustBoolean(klTailApply(primitive["shen.+string?"], klTailApply(primitive["tlstr"], V1833))) && mustBoolean(klTailApply(primitive["="], "S", klTailApply(primitive["pos"], klTailApply(primitive["tlstr"], V1833), 0))))))))) === true) ? (new Trampoline(primitive["cn"], V1834, klTailApply(primitive["shen.app"], V1832, klTailApply(primitive["tlstr"], klTailApply(primitive["tlstr"], V1833)), new Symbol("shen.s")))) : ((mustBoolean(klTailApply(primitive["shen.+string?"], V1833)) === true) ? (new Trampoline(primitive["shen.insert-h"], V1832, klTailApply(primitive["tlstr"], V1833), klTailApply(primitive["cn"], V1834, klTailApply(primitive["pos"], V1833, 0)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.insert-h"))) : (err("no cond match"))))))) ;}, 3);

defun("shen.app", function(V1838, V1839, V1840) { return new Trampoline(primitive["cn"], klTailApply(primitive["shen.arg->str"], V1838, V1840), V1839) ;}, 3);

defun("shen.arg->str", function(V1848, V1849) { return (mustBoolean(klTailApply(primitive["="], V1848, klTailApply(primitive["fail"]))) === true) ? ("...") : ((mustBoolean(klTailApply(primitive["shen.list?"], V1848)) === true) ? (new Trampoline(primitive["shen.list->str"], V1848, V1849)) : ((mustBoolean(klTailApply(primitive["string?"], V1848)) === true) ? (new Trampoline(primitive["shen.str->str"], V1848, V1849)) : ((mustBoolean(klTailApply(primitive["absvector?"], V1848)) === true) ? (new Trampoline(primitive["shen.vector->str"], V1848, V1849)) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.atom->str"], V1848)) : (err("no cond match")))))) ;}, 2);

defun("shen.list->str", function(V1852, V1853) { return (mustBoolean(klTailApply(primitive["="], new Symbol("shen.r"), V1853)) === true) ? (new Trampoline(primitive["@s"], "(", klTailApply(primitive["@s"], klTailApply(primitive["shen.iter-list"], V1852, new Symbol("shen.r"), klTailApply(primitive["shen.maxseq"])), ")"))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["@s"], "[", klTailApply(primitive["@s"], klTailApply(primitive["shen.iter-list"], V1852, V1853, klTailApply(primitive["shen.maxseq"])), "]"))) : (err("no cond match"))) ;}, 2);

defun("shen.maxseq", function() { return new Trampoline(primitive["value"], new Symbol("*maximum-print-sequence-size*")) ;}, 0);

defun("shen.iter-list", function(V1867, V1868, V1869) { return (mustBoolean(klTailApply(primitive["="], null, V1867)) === true) ? ("") : ((mustBoolean(klTailApply(primitive["="], 0, V1869)) === true) ? ("... etc") : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1867)) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1867))))) === true) ? (new Trampoline(primitive["shen.arg->str"], klTailApply(primitive["hd"], V1867), V1868)) : ((mustBoolean(klTailApply(primitive["cons?"], V1867)) === true) ? (new Trampoline(primitive["@s"], klTailApply(primitive["shen.arg->str"], klTailApply(primitive["hd"], V1867), V1868), klTailApply(primitive["@s"], " ", klTailApply(primitive["shen.iter-list"], klTailApply(primitive["tl"], V1867), V1868, klTailApply(primitive["-"], V1869, 1))))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["@s"], "|", klTailApply(primitive["@s"], " ", klTailApply(primitive["shen.arg->str"], V1867, V1868)))) : (err("no cond match")))))) ;}, 3);

defun("shen.str->str", function(V1876, V1877) { return (mustBoolean(klTailApply(primitive["="], new Symbol("shen.a"), V1877)) === true) ? (V1876) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["@s"], klTailApply(primitive["n->string"], 34), klTailApply(primitive["@s"], V1876, klTailApply(primitive["n->string"], 34)))) : (err("no cond match"))) ;}, 2);

defun("shen.vector->str", function(V1880, V1881) { return (mustBoolean(klTailApply(primitive["shen.print-vector?"], V1880)) === true) ? (new Trampoline(klTailApply(primitive["function"], klTailApply(primitive["<-address"], V1880, 0)), V1880)) : ((mustBoolean(klTailApply(primitive["vector?"], V1880)) === true) ? (new Trampoline(primitive["@s"], "<", klTailApply(primitive["@s"], klTailApply(primitive["shen.iter-vector"], V1880, 1, V1881, klTailApply(primitive["shen.maxseq"])), ">"))) : (new Trampoline(primitive["@s"], "<", klTailApply(primitive["@s"], "<", klTailApply(primitive["@s"], klTailApply(primitive["shen.iter-vector"], V1880, 0, V1881, klTailApply(primitive["shen.maxseq"])), ">>"))))) ;}, 2);

defun("shen.print-vector?", function(V1883) { return (function(){var Zero = klTailApply(primitive["<-address"], V1883, 0); return (mustBoolean(klTailApply(primitive["="], Zero, new Symbol("shen.tuple"))) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], Zero, new Symbol("shen.pvar"))) === true) ? (true) : ((mustBoolean(klTailApply(primitive["="], Zero, new Symbol("shen.dictionary"))) === true) ? (true) : ((mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["number?"], Zero))) === true) ? (new Trampoline(primitive["shen.fbound?"], Zero)) : (false))));})() ;}, 1);

defun("shen.fbound?", function(V1885) { return (function(){ try { return (function(){klTailApply(primitive["shen.lookup-func"], V1885); return true;})();} catch (err) { return klTailApply(klFun(function(E) { return false;}, 1), err);} })() ;}, 1);

defun("shen.tuple", function(V1887) { return new Trampoline(primitive["cn"], "(@p ", klTailApply(primitive["shen.app"], klTailApply(primitive["<-address"], V1887, 1), klTailApply(primitive["cn"], " ", klTailApply(primitive["shen.app"], klTailApply(primitive["<-address"], V1887, 2), ")", new Symbol("shen.s"))), new Symbol("shen.s"))) ;}, 1);

defun("shen.dictionary", function(V1889) { return "(dict ...)" ;}, 1);

defun("shen.iter-vector", function(V1900, V1901, V1902, V1903) { return (mustBoolean(klTailApply(primitive["="], 0, V1903)) === true) ? ("... etc") : ((mustBoolean(true) === true) ? ((function(){var Item = klTailApply(primitive["<-address/or"], V1900, V1901, klFun(function() { return new Symbol("shen.out-of-bounds")}, 0)); return (function(){var Next = klTailApply(primitive["<-address/or"], V1900, klTailApply(primitive["+"], V1901, 1), klFun(function() { return new Symbol("shen.out-of-bounds")}, 0)); return (mustBoolean(klTailApply(primitive["="], Item, new Symbol("shen.out-of-bounds"))) === true) ? ("") : ((mustBoolean(klTailApply(primitive["="], Next, new Symbol("shen.out-of-bounds"))) === true) ? (new Trampoline(primitive["shen.arg->str"], Item, V1902)) : (new Trampoline(primitive["@s"], klTailApply(primitive["shen.arg->str"], Item, V1902), klTailApply(primitive["@s"], " ", klTailApply(primitive["shen.iter-vector"], V1900, klTailApply(primitive["+"], V1901, 1), V1902, klTailApply(primitive["-"], V1903, 1))))));})();})()) : (err("no cond match"))) ;}, 4);

defun("shen.atom->str", function(V1905) { return (function(){ try { return klTailApply(primitive["str"], V1905);} catch (err) { return klTailApply(klFun(function(E) { return new Trampoline(primitive["shen.funexstring"]);}, 1), err);} })() ;}, 1);

defun("shen.funexstring", function() { return new Trampoline(primitive["@s"], "", klTailApply(primitive["@s"], "f", klTailApply(primitive["@s"], "u", klTailApply(primitive["@s"], "n", klTailApply(primitive["@s"], "e", klTailApply(primitive["@s"], klTailApply(primitive["shen.arg->str"], klTailApply(primitive["gensym"], klTailApply(primitive["intern"], "x")), new Symbol("shen.a")), "")))))) ;}, 0);

defun("shen.list?", function(V1907) { return (mustBoolean(klTailApply(primitive["empty?"], V1907)) || mustBoolean(klTailApply(primitive["cons?"], V1907))) ;}, 1);

defun("macroexpand", function(V1909) { return (function(){var Y = klTailApply(primitive["shen.compose"], klTailApply(primitive["value"], new Symbol("*macros*")), V1909); return (mustBoolean(klTailApply(primitive["="], V1909, Y)) === true) ? (V1909) : (new Trampoline(primitive["shen.walk"], klFun(function(Z) { return new Trampoline(primitive["macroexpand"], Z);}, 1), Y));})() ;}, 1);

defun("shen.error-macro", function(V1911) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1911)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("error"), klTailApply(primitive["hd"], V1911))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1911))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("simple-error"), klTailApply(primitive["cons"], klTailApply(primitive["shen.mkstr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1911)), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1911))), null))) : ((mustBoolean(true) === true) ? (V1911) : (err("no cond match"))) ;}, 1);

defun("shen.output-macro", function(V1913) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1913)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("output"), klTailApply(primitive["hd"], V1913))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1913))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.prhush"), klTailApply(primitive["cons"], klTailApply(primitive["shen.mkstr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1913)), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1913))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stoutput"), null), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1913)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("pr"), klTailApply(primitive["hd"], V1913))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1913))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1913)))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("pr"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1913)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stoutput"), null), null)))) : ((mustBoolean(true) === true) ? (V1913) : (err("no cond match")))) ;}, 1);

defun("shen.make-string-macro", function(V1915) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1915)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("make-string"), klTailApply(primitive["hd"], V1915))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1915))))))) === true) ? (new Trampoline(primitive["shen.mkstr"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1915)), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1915)))) : ((mustBoolean(true) === true) ? (V1915) : (err("no cond match"))) ;}, 1);

defun("shen.input-macro", function(V1917) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1917)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("lineread"), klTailApply(primitive["hd"], V1917))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1917))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("lineread"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1917)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("input"), klTailApply(primitive["hd"], V1917))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1917))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("input"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1917)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("read"), klTailApply(primitive["hd"], V1917))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1917))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("read"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1917)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("input+"), klTailApply(primitive["hd"], V1917))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1917))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1917)))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("input+"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1917)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1917)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("read-byte"), klTailApply(primitive["hd"], V1917))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1917))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("read-byte"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1917)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("read-char-code"), klTailApply(primitive["hd"], V1917))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1917))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("read-char-code"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stinput"), null), null))) : ((mustBoolean(true) === true) ? (V1917) : (err("no cond match")))))))) ;}, 1);

defun("shen.compose", function(V1920, V1921) { return (mustBoolean(klTailApply(primitive["="], null, V1920)) === true) ? (V1921) : ((mustBoolean(klTailApply(primitive["cons?"], V1920)) === true) ? (new Trampoline(primitive["shen.compose"], klTailApply(primitive["tl"], V1920), klTailApply(klTailApply(primitive["hd"], V1920), V1921))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.compose"))) : (err("no cond match")))) ;}, 2);

defun("shen.compile-macro", function(V1923) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1923)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("compile"), klTailApply(primitive["hd"], V1923))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1923))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1923)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1923))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("compile"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1923)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1923))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], new Symbol("E"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], new Symbol("E"), null)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("error"), klTailApply(primitive["cons"], "parse error here: ~S~%", klTailApply(primitive["cons"], new Symbol("E"), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("error"), klTailApply(primitive["cons"], "parse error~%", null)), null)))), null))), null))))) : ((mustBoolean(true) === true) ? (V1923) : (err("no cond match"))) ;}, 1);

defun("shen.prolog-macro", function(V1925) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1925)) && mustBoolean(klTailApply(primitive["="], new Symbol("prolog?"), klTailApply(primitive["hd"], V1925))))) === true) ? ((function(){var F = klTailApply(primitive["gensym"], new Symbol("shen.f")); return (function(){var Receive = klTailApply(primitive["shen.receive-terms"], klTailApply(primitive["tl"], V1925)); return (function(){var PrologDef = klTailApply(primitive["eval"], klTailApply(primitive["append"], klTailApply(primitive["cons"], new Symbol("defprolog"), klTailApply(primitive["cons"], F, null)), klTailApply(primitive["append"], Receive, klTailApply(primitive["append"], klTailApply(primitive["cons"], new Symbol("<--"), null), klTailApply(primitive["append"], klTailApply(primitive["shen.pass-literals"], klTailApply(primitive["tl"], V1925)), klTailApply(primitive["cons"], new Symbol(";"), null)))))); return (function(){var Query = klTailApply(primitive["cons"], F, klTailApply(primitive["append"], Receive, klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.start-new-prolog-process"), null), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("freeze"), klTailApply(primitive["cons"], true, null)), null)))); return Query;})();})();})();})()) : ((mustBoolean(true) === true) ? (V1925) : (err("no cond match"))) ;}, 1);

defun("shen.receive-terms", function(V1931) { return (mustBoolean(klTailApply(primitive["="], null, V1931)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1931)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1931))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("receive"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1931)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1931)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1931))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1931))), klTailApply(primitive["shen.receive-terms"], klTailApply(primitive["tl"], V1931)))) : ((mustBoolean(klTailApply(primitive["cons?"], V1931)) === true) ? (new Trampoline(primitive["shen.receive-terms"], klTailApply(primitive["tl"], V1931))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.receive-terms"))) : (err("no cond match"))))) ;}, 1);

defun("shen.pass-literals", function(V1935) { return (mustBoolean(klTailApply(primitive["="], null, V1935)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1935)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["hd"], V1935))) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("receive"), klTailApply(primitive["hd"], klTailApply(primitive["hd"], V1935)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1935)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["hd"], V1935))))))))))))) === true) ? (new Trampoline(primitive["shen.pass-literals"], klTailApply(primitive["tl"], V1935))) : ((mustBoolean(klTailApply(primitive["cons?"], V1935)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1935), klTailApply(primitive["shen.pass-literals"], klTailApply(primitive["tl"], V1935)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.pass-literals"))) : (err("no cond match"))))) ;}, 1);

defun("shen.defprolog-macro", function(V1937) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1937)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("defprolog"), klTailApply(primitive["hd"], V1937))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1937))))))) === true) ? (new Trampoline(primitive["compile"], klFun(function(Y) { return new Trampoline(primitive["shen.<defprolog>"], Y);}, 1), klTailApply(primitive["tl"], V1937), klFun(function(Y) { return new Trampoline(primitive["shen.prolog-error"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1937)), Y);}, 1))) : ((mustBoolean(true) === true) ? (V1937) : (err("no cond match"))) ;}, 1);

defun("shen.datatype-macro", function(V1939) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1939)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("datatype"), klTailApply(primitive["hd"], V1939))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1939))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.process-datatype"), klTailApply(primitive["cons"], klTailApply(primitive["shen.intern-type"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1939))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("compile"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], new Symbol("X"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.<datatype-rules>"), klTailApply(primitive["cons"], new Symbol("X"), null)), null))), klTailApply(primitive["cons"], klTailApply(primitive["shen.rcons_form"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1939))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("function"), klTailApply(primitive["cons"], new Symbol("shen.datatype-error"), null)), null)))), null)))) : ((mustBoolean(true) === true) ? (V1939) : (err("no cond match"))) ;}, 1);

defun("shen.intern-type", function(V1941) { return new Trampoline(primitive["intern"], klTailApply(primitive["cn"], "type#", klTailApply(primitive["str"], V1941))) ;}, 1);

defun("shen.@s-macro", function(V1943) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1943)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("@s"), klTailApply(primitive["hd"], V1943))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1943))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1943)))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1943))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("@s"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1943)), klTailApply(primitive["cons"], klTailApply(primitive["shen.@s-macro"], klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1943)))), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1943)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("@s"), klTailApply(primitive["hd"], V1943))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1943))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1943)))) && mustBoolean((mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1943))))) && mustBoolean(klTailApply(primitive["string?"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1943)))))))))))))) === true) ? ((function(){var E = klTailApply(primitive["explode"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1943))); return (mustBoolean(klTailApply(primitive[">"], klTailApply(primitive["length"], E), 1)) === true) ? (new Trampoline(primitive["shen.@s-macro"], klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["append"], E, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1943)))))) : (V1943);})()) : ((mustBoolean(true) === true) ? (V1943) : (err("no cond match")))) ;}, 1);

defun("shen.synonyms-macro", function(V1945) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1945)) && mustBoolean(klTailApply(primitive["="], new Symbol("synonyms"), klTailApply(primitive["hd"], V1945))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("shen.synonyms-help"), klTailApply(primitive["cons"], klTailApply(primitive["shen.rcons_form"], klTailApply(primitive["shen.curry-synonyms"], klTailApply(primitive["tl"], V1945))), null))) : ((mustBoolean(true) === true) ? (V1945) : (err("no cond match"))) ;}, 1);

defun("shen.curry-synonyms", function(V1947) { return new Trampoline(primitive["map"], klFun(function(X) { return new Trampoline(primitive["shen.curry-type"], X);}, 1), V1947) ;}, 1);

defun("shen.nl-macro", function(V1949) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1949)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("nl"), klTailApply(primitive["hd"], V1949))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], V1949))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("nl"), klTailApply(primitive["cons"], 1, null))) : ((mustBoolean(true) === true) ? (V1949) : (err("no cond match"))) ;}, 1);

defun("shen.assoc-macro", function(V1951) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1951)) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1951))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1951)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1951))))) && mustBoolean(klTailApply(primitive["element?"], klTailApply(primitive["hd"], V1951), klTailApply(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], new Symbol("@v"), klTailApply(primitive["cons"], new Symbol("append"), klTailApply(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], new Symbol("or"), klTailApply(primitive["cons"], new Symbol("+"), klTailApply(primitive["cons"], new Symbol("*"), klTailApply(primitive["cons"], new Symbol("do"), null)))))))))))))))))) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1951), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1951)), klTailApply(primitive["cons"], klTailApply(primitive["shen.assoc-macro"], klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1951), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1951)))), null)))) : ((mustBoolean(true) === true) ? (V1951) : (err("no cond match"))) ;}, 1);

defun("shen.let-macro", function(V1953) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1953)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("let"), klTailApply(primitive["hd"], V1953))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1953))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1953)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1953))))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1953)))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1953)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1953))), klTailApply(primitive["cons"], klTailApply(primitive["shen.let-macro"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1953))))), null))))) : ((mustBoolean(true) === true) ? (V1953) : (err("no cond match"))) ;}, 1);

defun("shen.abs-macro", function(V1955) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1955)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], V1955))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1955))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1955)))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1955))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1955)), klTailApply(primitive["cons"], klTailApply(primitive["shen.abs-macro"], klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1955)))), null)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1955)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("/."), klTailApply(primitive["hd"], V1955))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1955))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1955)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1955))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["tl"], V1955))) : ((mustBoolean(true) === true) ? (V1955) : (err("no cond match")))) ;}, 1);

defun("shen.cases-macro", function(V1959) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1959)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cases"), klTailApply(primitive["hd"], V1959))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1959))) && mustBoolean((mustBoolean(klTailApply(primitive["="], true, klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1959)))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1959)))))))))))) === true) ? (new Trampoline(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1959)))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1959)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cases"), klTailApply(primitive["hd"], V1959))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1959))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1959)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1959))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1959)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1959))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("simple-error"), klTailApply(primitive["cons"], "error: cases exhausted", null)), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1959)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cases"), klTailApply(primitive["hd"], V1959))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1959))) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1959)))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1959)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1959))), klTailApply(primitive["cons"], klTailApply(primitive["shen.cases-macro"], klTailApply(primitive["cons"], new Symbol("cases"), klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1959))))), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1959)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("cases"), klTailApply(primitive["hd"], V1959))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1959))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1959)))))))))) === true) ? (new Trampoline(primitive["simple-error"], "error: odd number of case elements\n")) : ((mustBoolean(true) === true) ? (V1959) : (err("no cond match")))))) ;}, 1);

defun("shen.timer-macro", function(V1961) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1961)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("time"), klTailApply(primitive["hd"], V1961))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1961))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1961)))))))))) === true) ? (new Trampoline(primitive["shen.let-macro"], klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("Start"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], new Symbol("run"), null)), klTailApply(primitive["cons"], new Symbol("Result"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1961)), klTailApply(primitive["cons"], new Symbol("Finish"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], new Symbol("run"), null)), klTailApply(primitive["cons"], new Symbol("Time"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("-"), klTailApply(primitive["cons"], new Symbol("Finish"), klTailApply(primitive["cons"], new Symbol("Start"), null))), klTailApply(primitive["cons"], new Symbol("Message"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.prhush"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], "\nrun time: ", klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("str"), klTailApply(primitive["cons"], new Symbol("Time"), null)), klTailApply(primitive["cons"], " secs\n", null))), null))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("stoutput"), null), null))), klTailApply(primitive["cons"], new Symbol("Result"), null)))))))))))))) : ((mustBoolean(true) === true) ? (V1961) : (err("no cond match"))) ;}, 1);

defun("shen.tuple-up", function(V1963) { return (mustBoolean(klTailApply(primitive["cons?"], V1963)) === true) ? (new Trampoline(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], V1963), klTailApply(primitive["cons"], klTailApply(primitive["shen.tuple-up"], klTailApply(primitive["tl"], V1963)), null)))) : ((mustBoolean(true) === true) ? (V1963) : (err("no cond match"))) ;}, 1);

defun("shen.put/get-macro", function(V1965) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1965)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("put"), klTailApply(primitive["hd"], V1965))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1965))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965)))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("put"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1965)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965))), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965)))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("*property-vector*"), null)), null)))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1965)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("get"), klTailApply(primitive["hd"], V1965))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1965))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("get"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1965)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("*property-vector*"), null)), null))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1965)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("get/or"), klTailApply(primitive["hd"], V1965))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1965))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965)))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965))))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965)))))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("get/or"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1965)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965))), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965)))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("*property-vector*"), null)), null)))))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1965)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("unput"), klTailApply(primitive["hd"], V1965))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1965))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965)))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965))))))))))))) === true) ? (new Trampoline(primitive["cons"], new Symbol("unput"), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1965)), klTailApply(primitive["cons"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1965))), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("*property-vector*"), null)), null))))) : ((mustBoolean(true) === true) ? (V1965) : (err("no cond match")))))) ;}, 1);

defun("shen.function-macro", function(V1967) { return (mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1967)) && mustBoolean((mustBoolean(klTailApply(primitive["="], new Symbol("function"), klTailApply(primitive["hd"], V1967))) && mustBoolean((mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1967))) && mustBoolean(klTailApply(primitive["="], null, klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1967)))))))))) === true) ? (new Trampoline(primitive["shen.function-abstraction"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1967)), klTailApply(primitive["arity"], klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1967))))) : ((mustBoolean(true) === true) ? (V1967) : (err("no cond match"))) ;}, 1);

defun("shen.function-abstraction", function(V1970, V1971) { return (mustBoolean(klTailApply(primitive["="], 0, V1971)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], V1970, " has no lambda form\n", new Symbol("shen.a")))) : ((mustBoolean(klTailApply(primitive["="], -1, V1971)) === true) ? (new Trampoline(primitive["cons"], new Symbol("function"), klTailApply(primitive["cons"], V1970, null))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.function-abstraction-help"], V1970, V1971, null)) : (err("no cond match")))) ;}, 2);

defun("shen.function-abstraction-help", function(V1975, V1976, V1977) { return (mustBoolean(klTailApply(primitive["="], 0, V1976)) === true) ? (new Trampoline(primitive["cons"], V1975, V1977)) : ((mustBoolean(true) === true) ? ((function(){var X = klTailApply(primitive["gensym"], new Symbol("V")); return new Trampoline(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], X, klTailApply(primitive["cons"], klTailApply(primitive["shen.function-abstraction-help"], V1975, klTailApply(primitive["-"], V1976, 1), klTailApply(primitive["append"], V1977, klTailApply(primitive["cons"], X, null))), null)));})()) : (err("no cond match"))) ;}, 3);

defun("undefmacro", function(V1979) { return (function(){var MacroReg = klTailApply(primitive["value"], new Symbol("shen.*macroreg*")); return (function(){var Pos = klTailApply(primitive["shen.findpos"], V1979, MacroReg); return (function(){var Remove1 = klTailApply(primitive["set"], new Symbol("shen.*macroreg*"), klTailApply(primitive["remove"], V1979, MacroReg)); return (function(){var Remove2 = klTailApply(primitive["set"], new Symbol("*macros*"), klTailApply(primitive["shen.remove-nth"], Pos, klTailApply(primitive["value"], new Symbol("*macros*")))); return V1979;})();})();})();})() ;}, 1);

defun("shen.findpos", function(V1989, V1990) { return (mustBoolean(klTailApply(primitive["="], null, V1990)) === true) ? (new Trampoline(primitive["simple-error"], klTailApply(primitive["shen.app"], V1989, " is not a macro\n", new Symbol("shen.a")))) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1990)) && mustBoolean(klTailApply(primitive["="], klTailApply(primitive["hd"], V1990), V1989)))) === true) ? (1) : ((mustBoolean(klTailApply(primitive["cons?"], V1990)) === true) ? (new Trampoline(primitive["+"], 1, klTailApply(primitive["shen.findpos"], V1989, klTailApply(primitive["tl"], V1990)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.findpos"))) : (err("no cond match"))))) ;}, 2);

defun("shen.remove-nth", function(V1995, V1996) { return (mustBoolean((mustBoolean(klTailApply(primitive["="], 1, V1995)) && mustBoolean(klTailApply(primitive["cons?"], V1996)))) === true) ? (new Trampoline(primitive["tl"], V1996)) : ((mustBoolean(klTailApply(primitive["cons?"], V1996)) === true) ? (new Trampoline(primitive["cons"], klTailApply(primitive["hd"], V1996), klTailApply(primitive["shen.remove-nth"], klTailApply(primitive["-"], V1995, 1), klTailApply(primitive["tl"], V1996)))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.remove-nth"))) : (err("no cond match")))) ;}, 2);

defun("shen.initialise_arity_table", function(V1998) { return (mustBoolean(klTailApply(primitive["="], null, V1998)) === true) ? (null) : ((mustBoolean((mustBoolean(klTailApply(primitive["cons?"], V1998)) && mustBoolean(klTailApply(primitive["cons?"], klTailApply(primitive["tl"], V1998))))) === true) ? ((function(){var DecArity = klTailApply(primitive["put"], klTailApply(primitive["hd"], V1998), new Symbol("arity"), klTailApply(primitive["hd"], klTailApply(primitive["tl"], V1998)), klTailApply(primitive["value"], new Symbol("*property-vector*"))); return new Trampoline(primitive["shen.initialise_arity_table"], klTailApply(primitive["tl"], klTailApply(primitive["tl"], V1998)));})()) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.initialise_arity_table"))) : (err("no cond match")))) ;}, 1);

defun("arity", function(V2000) { return new Trampoline(primitive["get/or"], V2000, new Symbol("arity"), klFun(function() { return -1}, 0), klTailApply(primitive["value"], new Symbol("*property-vector*"))) ;}, 1);

defun("systemf", function(V2002) { return (function(){var Shen = klTailApply(primitive["intern"], "shen"); return (function(){var External = klTailApply(primitive["get"], Shen, new Symbol("shen.external-symbols"), klTailApply(primitive["value"], new Symbol("*property-vector*"))); return (function(){var Place = klTailApply(primitive["put"], Shen, new Symbol("shen.external-symbols"), klTailApply(primitive["adjoin"], V2002, External), klTailApply(primitive["value"], new Symbol("*property-vector*"))); return V2002;})();})();})() ;}, 1);

defun("adjoin", function(V2005, V2006) { return (mustBoolean(klTailApply(primitive["element?"], V2005, V2006)) === true) ? (V2006) : (new Trampoline(primitive["cons"], V2005, V2006)) ;}, 2);

defun("shen.lambda-form-entry", function(V2008) { return (mustBoolean(klTailApply(primitive["="], new Symbol("package"), V2008)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["="], new Symbol("receive"), V2008)) === true) ? (null) : ((mustBoolean(true) === true) ? ((function(){var ArityF = klTailApply(primitive["arity"], V2008); return (mustBoolean(klTailApply(primitive["="], ArityF, -1)) === true) ? (null) : ((mustBoolean(klTailApply(primitive["="], ArityF, 0)) === true) ? (null) : (new Trampoline(primitive["cons"], klTailApply(primitive["cons"], V2008, klTailApply(primitive["eval-kl"], klTailApply(primitive["shen.lambda-form"], V2008, ArityF))), null)));})()) : (err("no cond match")))) ;}, 1);

defun("shen.lambda-form", function(V2011, V2012) { return (mustBoolean(klTailApply(primitive["="], 0, V2012)) === true) ? (V2011) : ((mustBoolean(true) === true) ? ((function(){var X = klTailApply(primitive["gensym"], new Symbol("V")); return new Trampoline(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], X, klTailApply(primitive["cons"], klTailApply(primitive["shen.lambda-form"], klTailApply(primitive["shen.add-end"], V2011, X), klTailApply(primitive["-"], V2012, 1)), null)));})()) : (err("no cond match"))) ;}, 2);

defun("shen.add-end", function(V2015, V2016) { return (mustBoolean(klTailApply(primitive["cons?"], V2015)) === true) ? (new Trampoline(primitive["append"], V2015, klTailApply(primitive["cons"], V2016, null))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["cons"], V2015, klTailApply(primitive["cons"], V2016, null))) : (err("no cond match"))) ;}, 2);

defun("shen.set-lambda-form-entry", function(V2018) { return (mustBoolean(klTailApply(primitive["cons?"], V2018)) === true) ? (new Trampoline(primitive["put"], klTailApply(primitive["hd"], V2018), new Symbol("shen.lambda-form"), klTailApply(primitive["tl"], V2018), klTailApply(primitive["value"], new Symbol("*property-vector*")))) : ((mustBoolean(true) === true) ? (new Trampoline(primitive["shen.f_error"], new Symbol("shen.set-lambda-form-entry"))) : (err("no cond match"))) ;}, 1);

defun("specialise", function(V2020) { return (function(){klTailApply(primitive["set"], new Symbol("shen.*special*"), klTailApply(primitive["cons"], V2020, klTailApply(primitive["value"], new Symbol("shen.*special*")))); return V2020;})() ;}, 1);

defun("unspecialise", function(V2022) { return (function(){klTailApply(primitive["set"], new Symbol("shen.*special*"), klTailApply(primitive["remove"], V2022, klTailApply(primitive["value"], new Symbol("shen.*special*")))); return V2022;})() ;}, 1);

klTailApply(primitive["set"], new Symbol("shen.*continue-repl-loop*"), true);

klTailApply(primitive["set"], new Symbol("shen.*history*"), null);

klTailApply(primitive["set"], new Symbol("shen.*step*"), false);

klTailApply(primitive["set"], new Symbol("shen.*installing-kl*"), false);

klTailApply(primitive["set"], new Symbol("shen.*history*"), null);

klTailApply(primitive["set"], new Symbol("shen.*tc*"), false);

klTailApply(primitive["set"], new Symbol("*property-vector*"), klTailApply(primitive["dict"], 20000));

klTailApply(primitive["set"], new Symbol("shen.*process-counter*"), 0);

klTailApply(primitive["set"], new Symbol("shen.*varcounter*"), klTailApply(primitive["vector"], 1000));

klTailApply(primitive["set"], new Symbol("shen.*prologvectors*"), klTailApply(primitive["vector"], 1000));

klTailApply(primitive["set"], new Symbol("shen.*demodulation-function*"), klFun(function(X) { return X;}, 1));

klTailApply(primitive["set"], new Symbol("shen.*macroreg*"), klTailApply(primitive["cons"], new Symbol("shen.timer-macro"), klTailApply(primitive["cons"], new Symbol("shen.cases-macro"), klTailApply(primitive["cons"], new Symbol("shen.abs-macro"), klTailApply(primitive["cons"], new Symbol("shen.put/get-macro"), klTailApply(primitive["cons"], new Symbol("shen.compile-macro"), klTailApply(primitive["cons"], new Symbol("shen.datatype-macro"), klTailApply(primitive["cons"], new Symbol("shen.let-macro"), klTailApply(primitive["cons"], new Symbol("shen.assoc-macro"), klTailApply(primitive["cons"], new Symbol("shen.make-string-macro"), klTailApply(primitive["cons"], new Symbol("shen.output-macro"), klTailApply(primitive["cons"], new Symbol("shen.input-macro"), klTailApply(primitive["cons"], new Symbol("shen.error-macro"), klTailApply(primitive["cons"], new Symbol("shen.prolog-macro"), klTailApply(primitive["cons"], new Symbol("shen.synonyms-macro"), klTailApply(primitive["cons"], new Symbol("shen.nl-macro"), klTailApply(primitive["cons"], new Symbol("shen.@s-macro"), klTailApply(primitive["cons"], new Symbol("shen.defprolog-macro"), klTailApply(primitive["cons"], new Symbol("shen.function-macro"), null)))))))))))))))))));

klTailApply(primitive["set"], new Symbol("*macros*"), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.timer-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.cases-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.abs-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.put/get-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.compile-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.datatype-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.let-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.assoc-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.make-string-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.output-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.input-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.error-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.prolog-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.synonyms-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.nl-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.@s-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.defprolog-macro"], X);}, 1), klTailApply(primitive["cons"], klFun(function(X) { return new Trampoline(primitive["shen.function-macro"], X);}, 1), null)))))))))))))))))));

klTailApply(primitive["set"], new Symbol("shen.*gensym*"), 0);

klTailApply(primitive["set"], new Symbol("shen.*tracking*"), null);

klTailApply(primitive["set"], new Symbol("shen.*alphabet*"), klTailApply(primitive["cons"], new Symbol("A"), klTailApply(primitive["cons"], new Symbol("B"), klTailApply(primitive["cons"], new Symbol("C"), klTailApply(primitive["cons"], new Symbol("D"), klTailApply(primitive["cons"], new Symbol("E"), klTailApply(primitive["cons"], new Symbol("F"), klTailApply(primitive["cons"], new Symbol("G"), klTailApply(primitive["cons"], new Symbol("H"), klTailApply(primitive["cons"], new Symbol("I"), klTailApply(primitive["cons"], new Symbol("J"), klTailApply(primitive["cons"], new Symbol("K"), klTailApply(primitive["cons"], new Symbol("L"), klTailApply(primitive["cons"], new Symbol("M"), klTailApply(primitive["cons"], new Symbol("N"), klTailApply(primitive["cons"], new Symbol("O"), klTailApply(primitive["cons"], new Symbol("P"), klTailApply(primitive["cons"], new Symbol("Q"), klTailApply(primitive["cons"], new Symbol("R"), klTailApply(primitive["cons"], new Symbol("S"), klTailApply(primitive["cons"], new Symbol("T"), klTailApply(primitive["cons"], new Symbol("U"), klTailApply(primitive["cons"], new Symbol("V"), klTailApply(primitive["cons"], new Symbol("W"), klTailApply(primitive["cons"], new Symbol("X"), klTailApply(primitive["cons"], new Symbol("Y"), klTailApply(primitive["cons"], new Symbol("Z"), null)))))))))))))))))))))))))));

klTailApply(primitive["set"], new Symbol("shen.*special*"), klTailApply(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["cons"], new Symbol("@v"), klTailApply(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], new Symbol("set"), klTailApply(primitive["cons"], new Symbol("open"), null))))))))));

klTailApply(primitive["set"], new Symbol("shen.*extraspecial*"), klTailApply(primitive["cons"], new Symbol("define"), klTailApply(primitive["cons"], new Symbol("shen.process-datatype"), klTailApply(primitive["cons"], new Symbol("input+"), klTailApply(primitive["cons"], new Symbol("defcc"), klTailApply(primitive["cons"], new Symbol("shen.read+"), klTailApply(primitive["cons"], new Symbol("defmacro"), null)))))));

klTailApply(primitive["set"], new Symbol("shen.*spy*"), false);

klTailApply(primitive["set"], new Symbol("shen.*datatypes*"), null);

klTailApply(primitive["set"], new Symbol("shen.*alldatatypes*"), null);

klTailApply(primitive["set"], new Symbol("shen.*shen-type-theory-enabled?*"), true);

klTailApply(primitive["set"], new Symbol("shen.*synonyms*"), null);

klTailApply(primitive["set"], new Symbol("shen.*system*"), null);

klTailApply(primitive["set"], new Symbol("shen.*signedfuncs*"), null);

klTailApply(primitive["set"], new Symbol("shen.*maxcomplexity*"), 128);

klTailApply(primitive["set"], new Symbol("shen.*occurs*"), true);

klTailApply(primitive["set"], new Symbol("shen.*maxinferences*"), 1000000);

klTailApply(primitive["set"], new Symbol("*maximum-print-sequence-size*"), 20);

klTailApply(primitive["set"], new Symbol("shen.*catch*"), 0);

klTailApply(primitive["set"], new Symbol("shen.*call*"), 0);

klTailApply(primitive["set"], new Symbol("shen.*infs*"), 0);

klTailApply(primitive["set"], new Symbol("*hush*"), false);

klTailApply(primitive["set"], new Symbol("shen.*optimise*"), false);

klTailApply(primitive["set"], new Symbol("*version*"), "Shen 20.1");

(mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["bound?"], new Symbol("*home-directory*")))) === true) ? (klTailApply(primitive["set"], new Symbol("*home-directory*"), "")) : (new Symbol("shen.skip"));

(mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["bound?"], new Symbol("*sterror*")))) === true) ? (klTailApply(primitive["set"], new Symbol("*sterror*"), klTailApply(primitive["value"], new Symbol("*stoutput*")))) : (new Symbol("shen.skip"));

(mustBoolean(klTailApply(primitive["not"], klTailApply(primitive["bound?"], new Symbol("*argv*")))) === true) ? (klTailApply(primitive["set"], new Symbol("*argv*"), klTailApply(primitive["cons"], "shen", null))) : (new Symbol("shen.skip"));

klTailApply(primitive["shen.initialise_arity_table"], klTailApply(primitive["cons"], new Symbol("abort"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("absvector?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("absvector"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("adjoin"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("append"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("arity"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("assoc"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("boolean?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("bound?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("cd"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("close"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("compile"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("concat"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("declare"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("destroy"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("difference"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("element?"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("empty?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("enable-type-theory"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("error-to-string"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("shen.interror"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("eval"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("eval-kl"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("exit"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("explode"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("external"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("fail-if"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("fail"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("fix"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("fold-left"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("fold-right"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("filter"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("for-each"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("findall"), klTailApply(primitive["cons"], 5, klTailApply(primitive["cons"], new Symbol("freeze"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("fst"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("gensym"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("get"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("get/or"), klTailApply(primitive["cons"], 4, klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("address->"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("<-address"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("<-address/or"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("<-vector"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("<-vector/or"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol(">"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol(">="), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("hash"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("hdv"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("hdstr"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("head"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("integer?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("intern"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("identical"), klTailApply(primitive["cons"], 4, klTailApply(primitive["cons"], new Symbol("inferences"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("input"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("input+"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("implementation"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("intersection"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("internal"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("it"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("kill"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("language"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("length"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("limit"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("lineread"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("load"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("<"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("<="), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("vector"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("macroexpand"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("map"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("mapcan"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("maxinferences"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("nl"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("not"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("nth"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("n->string"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("number?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("occurs-check"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("occurrences"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("occurs-check"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("open"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("optimise"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("or"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("os"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("package"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("package?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("port"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("porters"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("pos"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("print"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("profile"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("profile-results"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("pr"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("ps"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("preclude"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("preclude-all-but"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("protect"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("address->"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("put"), klTailApply(primitive["cons"], 4, klTailApply(primitive["cons"], new Symbol("shen.reassemble"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("read-file-as-string"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-file"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-file-as-charlist"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-file-as-bytelist"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-byte"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-from-string"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("read-char-code"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("receive"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("release"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("remove"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("shen.require"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("reverse"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("set"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("simple-error"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("snd"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("specialise"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("spy"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("step"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("stinput"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("stoutput"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("sterror"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("string->n"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("string->symbol"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("string?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("str"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("subst"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("sum"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("symbol?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("systemf"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("tail"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("tc"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("tc?"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("thaw"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("tlstr"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("track"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("trap-error"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("tuple?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("return"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("undefmacro"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("unput"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("unprofile"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("unify"), klTailApply(primitive["cons"], 4, klTailApply(primitive["cons"], new Symbol("unify!"), klTailApply(primitive["cons"], 4, klTailApply(primitive["cons"], new Symbol("union"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("untrack"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("unspecialise"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("undefmacro"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("vector"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("vector?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("vector->"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("value/or"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("variable?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("version"), klTailApply(primitive["cons"], 0, klTailApply(primitive["cons"], new Symbol("write-byte"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("write-to-file"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("y-or-n?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("+"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("*"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("/"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("-"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("=="), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("<e>"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("<!>"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("@v"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("preclude"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("include"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("preclude-all-but"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("include-all-but"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("dict"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("dict?"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("dict-count"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("dict->"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("<-dict/or"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("<-dict"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("dict-rm"), klTailApply(primitive["cons"], 2, klTailApply(primitive["cons"], new Symbol("dict-fold"), klTailApply(primitive["cons"], 3, klTailApply(primitive["cons"], new Symbol("dict-keys"), klTailApply(primitive["cons"], 1, klTailApply(primitive["cons"], new Symbol("dict-values"), klTailApply(primitive["cons"], 1, null)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));

klTailApply(primitive["put"], klTailApply(primitive["intern"], "shen"), new Symbol("shen.external-symbols"), klTailApply(primitive["cons"], new Symbol("!"), klTailApply(primitive["cons"], new Symbol("}"), klTailApply(primitive["cons"], new Symbol("{"), klTailApply(primitive["cons"], new Symbol("-->"), klTailApply(primitive["cons"], new Symbol("<--"), klTailApply(primitive["cons"], new Symbol("&&"), klTailApply(primitive["cons"], new Symbol(":"), klTailApply(primitive["cons"], new Symbol(";"), klTailApply(primitive["cons"], new Symbol(":-"), klTailApply(primitive["cons"], new Symbol(":="), klTailApply(primitive["cons"], new Symbol("_"), klTailApply(primitive["cons"], new Symbol("*language*"), klTailApply(primitive["cons"], new Symbol("*implementation*"), klTailApply(primitive["cons"], new Symbol("*stinput*"), klTailApply(primitive["cons"], new Symbol("*stoutput*"), klTailApply(primitive["cons"], new Symbol("*sterror*"), klTailApply(primitive["cons"], new Symbol("*home-directory*"), klTailApply(primitive["cons"], new Symbol("*version*"), klTailApply(primitive["cons"], new Symbol("*argv*"), klTailApply(primitive["cons"], new Symbol("*maximum-print-sequence-size*"), klTailApply(primitive["cons"], new Symbol("*macros*"), klTailApply(primitive["cons"], new Symbol("*os*"), klTailApply(primitive["cons"], new Symbol("*release*"), klTailApply(primitive["cons"], new Symbol("*property-vector*"), klTailApply(primitive["cons"], new Symbol("*port*"), klTailApply(primitive["cons"], new Symbol("*porters*"), klTailApply(primitive["cons"], new Symbol("*hush*"), klTailApply(primitive["cons"], new Symbol("@v"), klTailApply(primitive["cons"], new Symbol("@p"), klTailApply(primitive["cons"], new Symbol("@s"), klTailApply(primitive["cons"], new Symbol("<-"), klTailApply(primitive["cons"], new Symbol("->"), klTailApply(primitive["cons"], new Symbol("<e>"), klTailApply(primitive["cons"], new Symbol("<!>"), klTailApply(primitive["cons"], new Symbol("=="), klTailApply(primitive["cons"], new Symbol("="), klTailApply(primitive["cons"], new Symbol(">="), klTailApply(primitive["cons"], new Symbol(">"), klTailApply(primitive["cons"], new Symbol("/."), klTailApply(primitive["cons"], new Symbol("=!"), klTailApply(primitive["cons"], new Symbol("$"), klTailApply(primitive["cons"], new Symbol("-"), klTailApply(primitive["cons"], new Symbol("/"), klTailApply(primitive["cons"], new Symbol("*"), klTailApply(primitive["cons"], new Symbol("+"), klTailApply(primitive["cons"], new Symbol("<="), klTailApply(primitive["cons"], new Symbol("<"), klTailApply(primitive["cons"], new Symbol(">>"), klTailApply(primitive["cons"], klTailApply(primitive["vector"], 0), klTailApply(primitive["cons"], new Symbol("y-or-n?"), klTailApply(primitive["cons"], new Symbol("write-to-file"), klTailApply(primitive["cons"], new Symbol("write-byte"), klTailApply(primitive["cons"], new Symbol("where"), klTailApply(primitive["cons"], new Symbol("when"), klTailApply(primitive["cons"], new Symbol("warn"), klTailApply(primitive["cons"], new Symbol("version"), klTailApply(primitive["cons"], new Symbol("verified"), klTailApply(primitive["cons"], new Symbol("variable?"), klTailApply(primitive["cons"], new Symbol("value"), klTailApply(primitive["cons"], new Symbol("value/or"), klTailApply(primitive["cons"], new Symbol("vector->"), klTailApply(primitive["cons"], new Symbol("<-vector"), klTailApply(primitive["cons"], new Symbol("<-vector/or"), klTailApply(primitive["cons"], new Symbol("vector"), klTailApply(primitive["cons"], new Symbol("vector?"), klTailApply(primitive["cons"], new Symbol("unspecialise"), klTailApply(primitive["cons"], new Symbol("untrack"), klTailApply(primitive["cons"], new Symbol("unit"), klTailApply(primitive["cons"], new Symbol("shen.unix"), klTailApply(primitive["cons"], new Symbol("union"), klTailApply(primitive["cons"], new Symbol("unify"), klTailApply(primitive["cons"], new Symbol("unify!"), klTailApply(primitive["cons"], new Symbol("unput"), klTailApply(primitive["cons"], new Symbol("unprofile"), klTailApply(primitive["cons"], new Symbol("undefmacro"), klTailApply(primitive["cons"], new Symbol("return"), klTailApply(primitive["cons"], new Symbol("type"), klTailApply(primitive["cons"], new Symbol("tuple?"), klTailApply(primitive["cons"], true, klTailApply(primitive["cons"], new Symbol("trap-error"), klTailApply(primitive["cons"], new Symbol("track"), klTailApply(primitive["cons"], new Symbol("time"), klTailApply(primitive["cons"], new Symbol("thaw"), klTailApply(primitive["cons"], new Symbol("tc?"), klTailApply(primitive["cons"], new Symbol("tc"), klTailApply(primitive["cons"], new Symbol("tl"), klTailApply(primitive["cons"], new Symbol("tlstr"), klTailApply(primitive["cons"], new Symbol("tlv"), klTailApply(primitive["cons"], new Symbol("tail"), klTailApply(primitive["cons"], new Symbol("systemf"), klTailApply(primitive["cons"], new Symbol("synonyms"), klTailApply(primitive["cons"], new Symbol("symbol"), klTailApply(primitive["cons"], new Symbol("symbol?"), klTailApply(primitive["cons"], new Symbol("string->symbol"), klTailApply(primitive["cons"], new Symbol("sum"), klTailApply(primitive["cons"], new Symbol("subst"), klTailApply(primitive["cons"], new Symbol("string?"), klTailApply(primitive["cons"], new Symbol("string->n"), klTailApply(primitive["cons"], new Symbol("stream"), klTailApply(primitive["cons"], new Symbol("string"), klTailApply(primitive["cons"], new Symbol("stinput"), klTailApply(primitive["cons"], new Symbol("sterror"), klTailApply(primitive["cons"], new Symbol("stoutput"), klTailApply(primitive["cons"], new Symbol("step"), klTailApply(primitive["cons"], new Symbol("spy"), klTailApply(primitive["cons"], new Symbol("specialise"), klTailApply(primitive["cons"], new Symbol("snd"), klTailApply(primitive["cons"], new Symbol("simple-error"), klTailApply(primitive["cons"], new Symbol("set"), klTailApply(primitive["cons"], new Symbol("save"), klTailApply(primitive["cons"], new Symbol("str"), klTailApply(primitive["cons"], new Symbol("run"), klTailApply(primitive["cons"], new Symbol("reverse"), klTailApply(primitive["cons"], new Symbol("remove"), klTailApply(primitive["cons"], new Symbol("release"), klTailApply(primitive["cons"], new Symbol("read"), klTailApply(primitive["cons"], new Symbol("receive"), klTailApply(primitive["cons"], new Symbol("read-file"), klTailApply(primitive["cons"], new Symbol("read-file-as-bytelist"), klTailApply(primitive["cons"], new Symbol("read-file-as-string"), klTailApply(primitive["cons"], new Symbol("read-byte"), klTailApply(primitive["cons"], new Symbol("read-file-as-charlist"), klTailApply(primitive["cons"], new Symbol("read-char-code"), klTailApply(primitive["cons"], new Symbol("read-from-string"), klTailApply(primitive["cons"], new Symbol("package?"), klTailApply(primitive["cons"], new Symbol("put"), klTailApply(primitive["cons"], new Symbol("preclude"), klTailApply(primitive["cons"], new Symbol("preclude-all-but"), klTailApply(primitive["cons"], new Symbol("ps"), klTailApply(primitive["cons"], new Symbol("prolog?"), klTailApply(primitive["cons"], new Symbol("protect"), klTailApply(primitive["cons"], new Symbol("profile-results"), klTailApply(primitive["cons"], new Symbol("profile"), klTailApply(primitive["cons"], new Symbol("print"), klTailApply(primitive["cons"], new Symbol("pr"), klTailApply(primitive["cons"], new Symbol("pos"), klTailApply(primitive["cons"], new Symbol("porters"), klTailApply(primitive["cons"], new Symbol("port"), klTailApply(primitive["cons"], new Symbol("package"), klTailApply(primitive["cons"], new Symbol("output"), klTailApply(primitive["cons"], new Symbol("out"), klTailApply(primitive["cons"], new Symbol("os"), klTailApply(primitive["cons"], new Symbol("or"), klTailApply(primitive["cons"], new Symbol("optimise"), klTailApply(primitive["cons"], new Symbol("open"), klTailApply(primitive["cons"], new Symbol("occurrences"), klTailApply(primitive["cons"], new Symbol("occurs-check"), klTailApply(primitive["cons"], new Symbol("n->string"), klTailApply(primitive["cons"], new Symbol("number?"), klTailApply(primitive["cons"], new Symbol("number"), klTailApply(primitive["cons"], new Symbol("null"), klTailApply(primitive["cons"], new Symbol("nth"), klTailApply(primitive["cons"], new Symbol("not"), klTailApply(primitive["cons"], new Symbol("nl"), klTailApply(primitive["cons"], new Symbol("mode"), klTailApply(primitive["cons"], new Symbol("macroexpand"), klTailApply(primitive["cons"], new Symbol("maxinferences"), klTailApply(primitive["cons"], new Symbol("mapcan"), klTailApply(primitive["cons"], new Symbol("map"), klTailApply(primitive["cons"], new Symbol("make-string"), klTailApply(primitive["cons"], new Symbol("load"), klTailApply(primitive["cons"], new Symbol("loaded"), klTailApply(primitive["cons"], new Symbol("list"), klTailApply(primitive["cons"], new Symbol("lineread"), klTailApply(primitive["cons"], new Symbol("limit"), klTailApply(primitive["cons"], new Symbol("length"), klTailApply(primitive["cons"], new Symbol("let"), klTailApply(primitive["cons"], new Symbol("lazy"), klTailApply(primitive["cons"], new Symbol("lambda"), klTailApply(primitive["cons"], new Symbol("language"), klTailApply(primitive["cons"], new Symbol("kill"), klTailApply(primitive["cons"], new Symbol("is"), klTailApply(primitive["cons"], new Symbol("intersection"), klTailApply(primitive["cons"], new Symbol("inferences"), klTailApply(primitive["cons"], new Symbol("intern"), klTailApply(primitive["cons"], new Symbol("integer?"), klTailApply(primitive["cons"], new Symbol("input"), klTailApply(primitive["cons"], new Symbol("input+"), klTailApply(primitive["cons"], new Symbol("include"), klTailApply(primitive["cons"], new Symbol("include-all-but"), klTailApply(primitive["cons"], new Symbol("it"), klTailApply(primitive["cons"], new Symbol("in"), klTailApply(primitive["cons"], new Symbol("internal"), klTailApply(primitive["cons"], new Symbol("implementation"), klTailApply(primitive["cons"], new Symbol("if"), klTailApply(primitive["cons"], new Symbol("identical"), klTailApply(primitive["cons"], new Symbol("head"), klTailApply(primitive["cons"], new Symbol("hd"), klTailApply(primitive["cons"], new Symbol("hdv"), klTailApply(primitive["cons"], new Symbol("hdstr"), klTailApply(primitive["cons"], new Symbol("hash"), klTailApply(primitive["cons"], new Symbol("get"), klTailApply(primitive["cons"], new Symbol("get/or"), klTailApply(primitive["cons"], new Symbol("get-time"), klTailApply(primitive["cons"], new Symbol("gensym"), klTailApply(primitive["cons"], new Symbol("function"), klTailApply(primitive["cons"], new Symbol("fst"), klTailApply(primitive["cons"], new Symbol("freeze"), klTailApply(primitive["cons"], new Symbol("fix"), klTailApply(primitive["cons"], new Symbol("file"), klTailApply(primitive["cons"], new Symbol("fail"), klTailApply(primitive["cons"], new Symbol("fail-if"), klTailApply(primitive["cons"], new Symbol("fwhen"), klTailApply(primitive["cons"], new Symbol("findall"), klTailApply(primitive["cons"], new Symbol("for-each"), klTailApply(primitive["cons"], new Symbol("fold-right"), klTailApply(primitive["cons"], new Symbol("fold-left"), klTailApply(primitive["cons"], new Symbol("filter"), klTailApply(primitive["cons"], false, klTailApply(primitive["cons"], new Symbol("enable-type-theory"), klTailApply(primitive["cons"], new Symbol("explode"), klTailApply(primitive["cons"], new Symbol("external"), klTailApply(primitive["cons"], new Symbol("exception"), klTailApply(primitive["cons"], new Symbol("eval-kl"), klTailApply(primitive["cons"], new Symbol("eval"), klTailApply(primitive["cons"], new Symbol("error-to-string"), klTailApply(primitive["cons"], new Symbol("error"), klTailApply(primitive["cons"], new Symbol("empty?"), klTailApply(primitive["cons"], new Symbol("exit"), klTailApply(primitive["cons"], new Symbol("element?"), klTailApply(primitive["cons"], new Symbol("do"), klTailApply(primitive["cons"], new Symbol("difference"), klTailApply(primitive["cons"], new Symbol("destroy"), klTailApply(primitive["cons"], new Symbol("defun"), klTailApply(primitive["cons"], new Symbol("define"), klTailApply(primitive["cons"], new Symbol("defmacro"), klTailApply(primitive["cons"], new Symbol("defcc"), klTailApply(primitive["cons"], new Symbol("defprolog"), klTailApply(primitive["cons"], new Symbol("declare"), klTailApply(primitive["cons"], new Symbol("datatype"), klTailApply(primitive["cons"], new Symbol("cut"), klTailApply(primitive["cons"], new Symbol("cn"), klTailApply(primitive["cons"], new Symbol("cons?"), klTailApply(primitive["cons"], new Symbol("cons"), klTailApply(primitive["cons"], new Symbol("cond"), klTailApply(primitive["cons"], new Symbol("concat"), klTailApply(primitive["cons"], new Symbol("compile"), klTailApply(primitive["cons"], new Symbol("cd"), klTailApply(primitive["cons"], new Symbol("cases"), klTailApply(primitive["cons"], new Symbol("call"), klTailApply(primitive["cons"], new Symbol("close"), klTailApply(primitive["cons"], new Symbol("bind"), klTailApply(primitive["cons"], new Symbol("bound?"), klTailApply(primitive["cons"], new Symbol("boolean?"), klTailApply(primitive["cons"], new Symbol("boolean"), klTailApply(primitive["cons"], new Symbol("bar!"), klTailApply(primitive["cons"], new Symbol("assoc"), klTailApply(primitive["cons"], new Symbol("arity"), klTailApply(primitive["cons"], new Symbol("abort"), klTailApply(primitive["cons"], new Symbol("append"), klTailApply(primitive["cons"], new Symbol("and"), klTailApply(primitive["cons"], new Symbol("adjoin"), klTailApply(primitive["cons"], new Symbol("<-address"), klTailApply(primitive["cons"], new Symbol("<-address/or"), klTailApply(primitive["cons"], new Symbol("address->"), klTailApply(primitive["cons"], new Symbol("absvector?"), klTailApply(primitive["cons"], new Symbol("absvector"), klTailApply(primitive["cons"], new Symbol("dict"), klTailApply(primitive["cons"], new Symbol("dict?"), klTailApply(primitive["cons"], new Symbol("dict-count"), klTailApply(primitive["cons"], new Symbol("dict->"), klTailApply(primitive["cons"], new Symbol("<-dict/or"), klTailApply(primitive["cons"], new Symbol("<-dict"), klTailApply(primitive["cons"], new Symbol("dict-rm"), klTailApply(primitive["cons"], new Symbol("dict-fold"), klTailApply(primitive["cons"], new Symbol("dict-keys"), klTailApply(primitive["cons"], new Symbol("dict-values"), klTailApply(primitive["cons"], new Symbol("shen.native"), klTailApply(primitive["cons"], new Symbol("shen.load-plugin"), null))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), klTailApply(primitive["value"], new Symbol("*property-vector*")));

klTailApply(primitive["for-each"], klFun(function(Entry) { return new Trampoline(primitive["shen.set-lambda-form-entry"], Entry);}, 1), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.datatype-error"), klFun(function(X) { return new Trampoline(primitive["shen.datatype-error"], X);}, 1)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.tuple"), klFun(function(X) { return new Trampoline(primitive["shen.tuple"], X);}, 1)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.pvar"), klFun(function(X) { return new Trampoline(primitive["shen.pvar"], X);}, 1)), klTailApply(primitive["cons"], klTailApply(primitive["cons"], new Symbol("shen.dictionary"), klFun(function(X) { return new Trampoline(primitive["shen.dictionary"], X);}, 1)), klTailApply(primitive["mapcan"], klFun(function(X) { return new Trampoline(primitive["shen.lambda-form-entry"], X);}, 1), klTailApply(primitive["external"], klTailApply(primitive["intern"], "shen"))))))));

module.exports = {call: kl.call,api: {defun: kl.defun, hd : kl.hd, tl: kl.tl, cons: kl.cons, eq: kl.eq, intern: kl.intern}}
