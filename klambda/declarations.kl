(set shen.*installing-kl* false)

(set shen.*history* ())

(set shen.*tc* false)

(set *property-vector* (dict 20000))

(set shen.*process-counter* 0)

(set shen.*varcounter* (vector 1000))

(set shen.*prologvectors* (vector 1000))

(set shen.*demodulation-function* (lambda X X))

(set shen.*macroreg* (cons shen.timer-macro (cons shen.cases-macro (cons shen.abs-macro (cons shen.put/get-macro (cons shen.compile-macro (cons shen.datatype-macro (cons shen.let-macro (cons shen.assoc-macro (cons shen.make-string-macro (cons shen.output-macro (cons shen.input-macro (cons shen.error-macro (cons shen.prolog-macro (cons shen.synonyms-macro (cons shen.nl-macro (cons shen.@s-macro (cons shen.defprolog-macro (cons shen.function-macro ())))))))))))))))))))

(set *macros* (cons (lambda X (shen.timer-macro X)) (cons (lambda X (shen.cases-macro X)) (cons (lambda X (shen.abs-macro X)) (cons (lambda X (shen.put/get-macro X)) (cons (lambda X (shen.compile-macro X)) (cons (lambda X (shen.datatype-macro X)) (cons (lambda X (shen.let-macro X)) (cons (lambda X (shen.assoc-macro X)) (cons (lambda X (shen.make-string-macro X)) (cons (lambda X (shen.output-macro X)) (cons (lambda X (shen.input-macro X)) (cons (lambda X (shen.error-macro X)) (cons (lambda X (shen.prolog-macro X)) (cons (lambda X (shen.synonyms-macro X)) (cons (lambda X (shen.nl-macro X)) (cons (lambda X (shen.@s-macro X)) (cons (lambda X (shen.defprolog-macro X)) (cons (lambda X (shen.function-macro X)) ())))))))))))))))))))

(set shen.*gensym* 0)

(set shen.*tracking* ())

(set shen.*alphabet* (cons A (cons B (cons C (cons D (cons E (cons F (cons G (cons H (cons I (cons J (cons K (cons L (cons M (cons N (cons O (cons P (cons Q (cons R (cons S (cons T (cons U (cons V (cons W (cons X (cons Y (cons Z ())))))))))))))))))))))))))))

(set shen.*special* (cons @p (cons @s (cons @v (cons cons (cons lambda (cons let (cons where (cons set (cons open ()))))))))))

(set shen.*extraspecial* (cons define (cons shen.process-datatype (cons input+ (cons defcc (cons shen.read+ (cons defmacro ())))))))

(set shen.*spy* false)

(set shen.*datatypes* ())

(set shen.*alldatatypes* ())

(set shen.*shen-type-theory-enabled?* true)

(set shen.*synonyms* ())

(set shen.*system* ())

(set shen.*signedfuncs* ())

(set shen.*maxcomplexity* 128)

(set shen.*occurs* true)

(set shen.*maxinferences* 1000000)

(set *maximum-print-sequence-size* 20)

(set shen.*catch* 0)

(set shen.*call* 0)

(set shen.*infs* 0)

(set *hush* false)

(set shen.*optimise* false)

(set *version* "Shen 20.1")

(if (not (bound? *home-directory*)) (set *home-directory* "") shen.skip)

(if (not (bound? *sterror*)) (set *sterror* (value *stoutput*)) shen.skip)

(if (not (bound? *argv*)) (set *argv* (cons "shen" ())) shen.skip)

(defun shen.initialise_arity_table (V1998) (cond ((= () V1998) ()) ((and (cons? V1998) (cons? (tl V1998))) (let DecArity (put (hd V1998) arity (hd (tl V1998)) (value *property-vector*)) (shen.initialise_arity_table (tl (tl V1998))))) (true (shen.f_error shen.initialise_arity_table))))

(defun arity (V2000) (get/or V2000 arity (freeze -1) (value *property-vector*)))

(shen.initialise_arity_table (cons abort (cons 0 (cons absvector? (cons 1 (cons absvector (cons 1 (cons adjoin (cons 2 (cons and (cons 2 (cons append (cons 2 (cons arity (cons 1 (cons assoc (cons 2 (cons boolean? (cons 1 (cons bound? (cons 1 (cons cd (cons 1 (cons close (cons 1 (cons compile (cons 3 (cons concat (cons 2 (cons cons (cons 2 (cons cons? (cons 1 (cons cn (cons 2 (cons declare (cons 2 (cons destroy (cons 1 (cons difference (cons 2 (cons do (cons 2 (cons element? (cons 2 (cons empty? (cons 1 (cons enable-type-theory (cons 1 (cons error-to-string (cons 1 (cons shen.interror (cons 2 (cons eval (cons 1 (cons eval-kl (cons 1 (cons exit (cons 1 (cons explode (cons 1 (cons external (cons 1 (cons fail-if (cons 2 (cons fail (cons 0 (cons fix (cons 2 (cons fold-left (cons 3 (cons fold-right (cons 3 (cons filter (cons 2 (cons for-each (cons 2 (cons findall (cons 5 (cons freeze (cons 1 (cons fst (cons 1 (cons gensym (cons 1 (cons get (cons 3 (cons get/or (cons 4 (cons get-time (cons 1 (cons address-> (cons 3 (cons <-address (cons 2 (cons <-address/or (cons 3 (cons <-vector (cons 2 (cons <-vector/or (cons 3 (cons > (cons 2 (cons >= (cons 2 (cons = (cons 2 (cons hash (cons 2 (cons hd (cons 1 (cons hdv (cons 1 (cons hdstr (cons 1 (cons head (cons 1 (cons if (cons 3 (cons integer? (cons 1 (cons intern (cons 1 (cons identical (cons 4 (cons inferences (cons 0 (cons input (cons 1 (cons input+ (cons 2 (cons implementation (cons 0 (cons intersection (cons 2 (cons internal (cons 1 (cons it (cons 0 (cons kill (cons 0 (cons language (cons 0 (cons length (cons 1 (cons limit (cons 1 (cons lineread (cons 1 (cons load (cons 1 (cons < (cons 2 (cons <= (cons 2 (cons vector (cons 1 (cons macroexpand (cons 1 (cons map (cons 2 (cons mapcan (cons 2 (cons maxinferences (cons 1 (cons nl (cons 1 (cons not (cons 1 (cons nth (cons 2 (cons n->string (cons 1 (cons number? (cons 1 (cons occurs-check (cons 1 (cons occurrences (cons 2 (cons occurs-check (cons 1 (cons open (cons 2 (cons optimise (cons 1 (cons or (cons 2 (cons os (cons 0 (cons package (cons 3 (cons package? (cons 1 (cons port (cons 0 (cons porters (cons 0 (cons pos (cons 2 (cons print (cons 1 (cons profile (cons 1 (cons profile-results (cons 1 (cons pr (cons 2 (cons ps (cons 1 (cons preclude (cons 1 (cons preclude-all-but (cons 1 (cons protect (cons 1 (cons address-> (cons 3 (cons put (cons 4 (cons shen.reassemble (cons 2 (cons read-file-as-string (cons 1 (cons read-file (cons 1 (cons read-file-as-charlist (cons 1 (cons read-file-as-bytelist (cons 1 (cons read (cons 1 (cons read-byte (cons 1 (cons read-from-string (cons 1 (cons read-char-code (cons 1 (cons receive (cons 1 (cons release (cons 0 (cons remove (cons 2 (cons shen.require (cons 3 (cons reverse (cons 1 (cons set (cons 2 (cons simple-error (cons 1 (cons snd (cons 1 (cons specialise (cons 1 (cons spy (cons 1 (cons step (cons 1 (cons stinput (cons 0 (cons stoutput (cons 0 (cons sterror (cons 0 (cons string->n (cons 1 (cons string->symbol (cons 1 (cons string? (cons 1 (cons str (cons 1 (cons subst (cons 3 (cons sum (cons 1 (cons symbol? (cons 1 (cons systemf (cons 1 (cons tail (cons 1 (cons tl (cons 1 (cons tc (cons 1 (cons tc? (cons 0 (cons thaw (cons 1 (cons tlstr (cons 1 (cons track (cons 1 (cons trap-error (cons 2 (cons tuple? (cons 1 (cons type (cons 2 (cons return (cons 3 (cons undefmacro (cons 1 (cons unput (cons 3 (cons unprofile (cons 1 (cons unify (cons 4 (cons unify! (cons 4 (cons union (cons 2 (cons untrack (cons 1 (cons unspecialise (cons 1 (cons undefmacro (cons 1 (cons vector (cons 1 (cons vector? (cons 1 (cons vector-> (cons 3 (cons value (cons 1 (cons value/or (cons 2 (cons variable? (cons 1 (cons version (cons 0 (cons write-byte (cons 2 (cons write-to-file (cons 2 (cons y-or-n? (cons 1 (cons + (cons 2 (cons * (cons 2 (cons / (cons 2 (cons - (cons 2 (cons == (cons 2 (cons <e> (cons 1 (cons <!> (cons 1 (cons @p (cons 2 (cons @v (cons 2 (cons @s (cons 2 (cons preclude (cons 1 (cons include (cons 1 (cons preclude-all-but (cons 1 (cons include-all-but (cons 1 (cons dict (cons 1 (cons dict? (cons 1 (cons dict-count (cons 1 (cons dict-> (cons 3 (cons <-dict/or (cons 3 (cons <-dict (cons 2 (cons dict-rm (cons 2 (cons dict-fold (cons 3 (cons dict-keys (cons 1 (cons dict-values (cons 1 ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun systemf (V2002) (let Shen (intern "shen") (let External (get Shen shen.external-symbols (value *property-vector*)) (let Place (put Shen shen.external-symbols (adjoin V2002 External) (value *property-vector*)) V2002))))

(defun adjoin (V2005 V2006) (if (element? V2005 V2006) V2006 (cons V2005 V2006)))

(put (intern "shen") shen.external-symbols (cons ! (cons } (cons { (cons --> (cons <-- (cons && (cons : (cons ; (cons :- (cons := (cons _ (cons *language* (cons *implementation* (cons *stinput* (cons *stoutput* (cons *sterror* (cons *home-directory* (cons *version* (cons *argv* (cons *maximum-print-sequence-size* (cons *macros* (cons *os* (cons *release* (cons *property-vector* (cons *port* (cons *porters* (cons *hush* (cons @v (cons @p (cons @s (cons <- (cons -> (cons <e> (cons <!> (cons == (cons = (cons >= (cons > (cons /. (cons =! (cons $ (cons - (cons / (cons * (cons + (cons <= (cons < (cons >> (cons (vector 0) (cons y-or-n? (cons write-to-file (cons write-byte (cons where (cons when (cons warn (cons version (cons verified (cons variable? (cons value (cons value/or (cons vector-> (cons <-vector (cons <-vector/or (cons vector (cons vector? (cons unspecialise (cons untrack (cons unit (cons shen.unix (cons union (cons unify (cons unify! (cons unput (cons unprofile (cons undefmacro (cons return (cons type (cons tuple? (cons true (cons trap-error (cons track (cons time (cons thaw (cons tc? (cons tc (cons tl (cons tlstr (cons tlv (cons tail (cons systemf (cons synonyms (cons symbol (cons symbol? (cons string->symbol (cons sum (cons subst (cons string? (cons string->n (cons stream (cons string (cons stinput (cons sterror (cons stoutput (cons step (cons spy (cons specialise (cons snd (cons simple-error (cons set (cons save (cons str (cons run (cons reverse (cons remove (cons release (cons read (cons receive (cons read-file (cons read-file-as-bytelist (cons read-file-as-string (cons read-byte (cons read-file-as-charlist (cons read-char-code (cons read-from-string (cons package? (cons put (cons preclude (cons preclude-all-but (cons ps (cons prolog? (cons protect (cons profile-results (cons profile (cons print (cons pr (cons pos (cons porters (cons port (cons package (cons output (cons out (cons os (cons or (cons optimise (cons open (cons occurrences (cons occurs-check (cons n->string (cons number? (cons number (cons null (cons nth (cons not (cons nl (cons mode (cons macroexpand (cons maxinferences (cons mapcan (cons map (cons make-string (cons load (cons loaded (cons list (cons lineread (cons limit (cons length (cons let (cons lazy (cons lambda (cons language (cons kill (cons is (cons intersection (cons inferences (cons intern (cons integer? (cons input (cons input+ (cons include (cons include-all-but (cons it (cons in (cons internal (cons implementation (cons if (cons identical (cons head (cons hd (cons hdv (cons hdstr (cons hash (cons get (cons get/or (cons get-time (cons gensym (cons function (cons fst (cons freeze (cons fix (cons file (cons fail (cons fail-if (cons fwhen (cons findall (cons for-each (cons fold-right (cons fold-left (cons filter (cons false (cons enable-type-theory (cons explode (cons external (cons exception (cons eval-kl (cons eval (cons error-to-string (cons error (cons empty? (cons exit (cons element? (cons do (cons difference (cons destroy (cons defun (cons define (cons defmacro (cons defcc (cons defprolog (cons declare (cons datatype (cons cut (cons cn (cons cons? (cons cons (cons cond (cons concat (cons compile (cons cd (cons cases (cons call (cons close (cons bind (cons bound? (cons boolean? (cons boolean (cons bar! (cons assoc (cons arity (cons abort (cons append (cons and (cons adjoin (cons <-address (cons <-address/or (cons address-> (cons absvector? (cons absvector (cons dict (cons dict? (cons dict-count (cons dict-> (cons <-dict/or (cons <-dict (cons dict-rm (cons dict-fold (cons dict-keys (cons dict-values (cons shen.native (cons shen.load-plugin ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (value *property-vector*))

(defun shen.lambda-form-entry (V2008) (cond ((= package V2008) ()) ((= receive V2008) ()) (true (let ArityF (arity V2008) (if (= ArityF -1) () (if (= ArityF 0) () (cons (cons V2008 (eval-kl (shen.lambda-form V2008 ArityF))) ())))))))

(defun shen.lambda-form (V2011 V2012) (cond ((= 0 V2012) V2011) (true (let X (gensym V) (cons lambda (cons X (cons (shen.lambda-form (shen.add-end V2011 X) (- V2012 1)) ())))))))

(defun shen.add-end (V2015 V2016) (cond ((cons? V2015) (append V2015 (cons V2016 ()))) (true (cons V2015 (cons V2016 ())))))

(defun shen.set-lambda-form-entry (V2018) (cond ((cons? V2018) (put (hd V2018) shen.lambda-form (tl V2018) (value *property-vector*))) (true (shen.f_error shen.set-lambda-form-entry))))

(for-each (lambda Entry (shen.set-lambda-form-entry Entry)) (cons (cons shen.datatype-error (lambda X (shen.datatype-error X))) (cons (cons shen.tuple (lambda X (shen.tuple X))) (cons (cons shen.pvar (lambda X (shen.pvar X))) (cons (cons shen.dictionary (lambda X (shen.dictionary X))) (mapcan (lambda X (shen.lambda-form-entry X)) (external (intern "shen"))))))))

(defun specialise (V2020) (do (set shen.*special* (cons V2020 (value shen.*special*))) V2020))

(defun unspecialise (V2022) (do (set shen.*special* (remove V2022 (value shen.*special*))) V2022))

