(defun read-char-code (V1392) (read-byte V1392))

(defun read-file-as-bytelist (V1394) (shen.read-file-as-Xlist V1394 (lambda S (read-byte S))))

(defun shen.read-file-as-Xlist (V1397 V1398) (let Stream (open V1397 in) (let X (V1398 Stream) (let Xs (shen.read-file-as-Xlist-help Stream V1398 X ()) (let Close (close Stream) (reverse Xs))))))

(defun shen.read-file-as-Xlist-help (V1403 V1404 V1405 V1406) (cond ((= -1 V1405) V1406) (true (shen.read-file-as-Xlist-help V1403 V1404 (V1404 V1403) (cons V1405 V1406)))))

(defun read-file-as-string (V1408) (let Stream (open V1408 in) (shen.rfas-h Stream (read-char-code Stream) "")))

(defun shen.rfas-h (V1412 V1413 V1414) (cond ((= -1 V1413) (do (close V1412) V1414)) (true (shen.rfas-h V1412 (read-char-code V1412) (cn V1414 (n->string V1413))))))

(defun input (V1416) (eval-kl (read V1416)))

(defun input+ (V1419 V1420) (let Mono? (shen.monotype V1419) (let Input (read V1420) (if (= false (shen.typecheck Input (shen.demodulate V1419))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V1419 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V1422) (cond ((cons? V1422) (map (lambda Z (shen.monotype Z)) V1422)) (true (if (variable? V1422) (simple-error (cn "input+ expects a monotype: not " (shen.app V1422 "
" shen.a))) V1422))))

(defun read (V1424) (hd (shen.read-loop V1424 (read-char-code V1424) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V1432 V1433 V1434) (cond ((= 94 V1433) (simple-error "read aborted")) ((= -1 V1433) (if (empty? V1434) (simple-error "error: empty stream") (compile (lambda X (shen.<st_input> X)) V1434 (lambda E E)))) ((shen.terminator? V1433) (let AllChars (append V1434 (cons V1433 ())) (let It (shen.record-it AllChars) (let Read (compile (lambda X (shen.<st_input> X)) AllChars (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V1432 (read-char-code V1432) AllChars) Read))))) (true (shen.read-loop V1432 (read-char-code V1432) (append V1434 (cons V1433 ()))))))

(defun shen.terminator? (V1436) (element? V1436 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V1438) (shen.lineread-loop (read-char-code V1438) () V1438))

(defun shen.lineread-loop (V1443 V1444 V1445) (cond ((= -1 V1443) (if (empty? V1444) (simple-error "empty stream") (compile (lambda X (shen.<st_input> X)) V1444 (lambda E E)))) ((= V1443 (shen.hat)) (simple-error "line read aborted")) ((element? V1443 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V1444 (lambda E shen.nextline)) (let It (shen.record-it V1444) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (read-char-code V1445) (append V1444 (cons V1443 ())) V1445) Line)))) (true (shen.lineread-loop (read-char-code V1445) (append V1444 (cons V1443 ())) V1445))))

(defun shen.record-it (V1447) (let TrimLeft (shen.trim-whitespace V1447) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V1449) (cond ((and (cons? V1449) (element? (hd V1449) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V1449))) (true V1449)))

(defun shen.record-it-h (V1451) (do (set shen.*it* (shen.cn-all (map (lambda X (n->string X)) V1451))) V1451))

(defun shen.cn-all (V1453) (cond ((= () V1453) "") ((cons? V1453) (cn (hd V1453) (shen.cn-all (tl V1453)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V1455) (let Charlist (read-file-as-charlist V1455) (compile (lambda X (shen.<st_input> X)) Charlist (lambda X (shen.read-error X)))))

(defun read-from-string (V1457) (let Ns (map (lambda X (string->n X)) (explode V1457)) (compile (lambda X (shen.<st_input> X)) Ns (lambda X (shen.read-error X)))))

(defun shen.read-error (V1465) (cond ((and (cons? V1465) (and (cons? (hd V1465)) (and (cons? (tl V1465)) (= () (tl (tl V1465)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V1465)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V1472 V1473) (cond ((= () V1473) "") ((= 0 V1472) "") ((cons? V1473) (cn (n->string (hd V1473)) (shen.compress-50 (- V1472 1) (tl V1473)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V1475) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V1475) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V1475) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V1475) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V1475) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V1475) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V1475) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1475) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1475) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1475) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V1475) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V1475) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V1475) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V1475) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1475) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V1477) (if (and (cons? (hd V1477)) (= 91 (hd (hd V1477)))) (shen.pair (hd (shen.pair (tl (hd V1477)) (shen.hdtl V1477))) shen.skip) (fail)))

(defun shen.<rsb> (V1479) (if (and (cons? (hd V1479)) (= 93 (hd (hd V1479)))) (shen.pair (hd (shen.pair (tl (hd V1479)) (shen.hdtl V1479))) shen.skip) (fail)))

(defun shen.<lcurly> (V1481) (if (and (cons? (hd V1481)) (= 123 (hd (hd V1481)))) (shen.pair (hd (shen.pair (tl (hd V1481)) (shen.hdtl V1481))) shen.skip) (fail)))

(defun shen.<rcurly> (V1483) (if (and (cons? (hd V1483)) (= 125 (hd (hd V1483)))) (shen.pair (hd (shen.pair (tl (hd V1483)) (shen.hdtl V1483))) shen.skip) (fail)))

(defun shen.<bar> (V1485) (if (and (cons? (hd V1485)) (= 124 (hd (hd V1485)))) (shen.pair (hd (shen.pair (tl (hd V1485)) (shen.hdtl V1485))) shen.skip) (fail)))

(defun shen.<semicolon> (V1487) (if (and (cons? (hd V1487)) (= 59 (hd (hd V1487)))) (shen.pair (hd (shen.pair (tl (hd V1487)) (shen.hdtl V1487))) shen.skip) (fail)))

(defun shen.<colon> (V1489) (if (and (cons? (hd V1489)) (= 58 (hd (hd V1489)))) (shen.pair (hd (shen.pair (tl (hd V1489)) (shen.hdtl V1489))) shen.skip) (fail)))

(defun shen.<comma> (V1491) (if (and (cons? (hd V1491)) (= 44 (hd (hd V1491)))) (shen.pair (hd (shen.pair (tl (hd V1491)) (shen.hdtl V1491))) shen.skip) (fail)))

(defun shen.<equal> (V1493) (if (and (cons? (hd V1493)) (= 61 (hd (hd V1493)))) (shen.pair (hd (shen.pair (tl (hd V1493)) (shen.hdtl V1493))) shen.skip) (fail)))

(defun shen.<minus> (V1495) (if (and (cons? (hd V1495)) (= 45 (hd (hd V1495)))) (shen.pair (hd (shen.pair (tl (hd V1495)) (shen.hdtl V1495))) shen.skip) (fail)))

(defun shen.<lrb> (V1497) (if (and (cons? (hd V1497)) (= 40 (hd (hd V1497)))) (shen.pair (hd (shen.pair (tl (hd V1497)) (shen.hdtl V1497))) shen.skip) (fail)))

(defun shen.<rrb> (V1499) (if (and (cons? (hd V1499)) (= 41 (hd (hd V1499)))) (shen.pair (hd (shen.pair (tl (hd V1499)) (shen.hdtl V1499))) shen.skip) (fail)))

(defun shen.<atom> (V1501) (let YaccParse (let Parse_shen.<str> (shen.<str> V1501) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V1501) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V1501) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V1503) (cond ((= () V1503) "") ((and (cons? V1503) (and (= "c" (hd V1503)) (and (cons? (tl V1503)) (= "#" (hd (tl V1503)))))) (let CodePoint (shen.code-point (tl (tl V1503))) (let AfterCodePoint (shen.after-codepoint (tl (tl V1503))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V1503) (@s (hd V1503) (shen.control-chars (tl V1503)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V1507) (cond ((and (cons? V1507) (= ";" (hd V1507))) "") ((and (cons? V1507) (element? (hd V1507) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V1507) (shen.code-point (tl V1507)))) (true (simple-error (cn "code point parse error " (shen.app V1507 "
" shen.a))))))

(defun shen.after-codepoint (V1513) (cond ((= () V1513) ()) ((and (cons? V1513) (= ";" (hd V1513))) (tl V1513)) ((cons? V1513) (shen.after-codepoint (tl V1513))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V1515) (shen.pre (reverse (shen.digits->integers V1515)) 0))

(defun shen.digits->integers (V1521) (cond ((and (cons? V1521) (= "0" (hd V1521))) (cons 0 (shen.digits->integers (tl V1521)))) ((and (cons? V1521) (= "1" (hd V1521))) (cons 1 (shen.digits->integers (tl V1521)))) ((and (cons? V1521) (= "2" (hd V1521))) (cons 2 (shen.digits->integers (tl V1521)))) ((and (cons? V1521) (= "3" (hd V1521))) (cons 3 (shen.digits->integers (tl V1521)))) ((and (cons? V1521) (= "4" (hd V1521))) (cons 4 (shen.digits->integers (tl V1521)))) ((and (cons? V1521) (= "5" (hd V1521))) (cons 5 (shen.digits->integers (tl V1521)))) ((and (cons? V1521) (= "6" (hd V1521))) (cons 6 (shen.digits->integers (tl V1521)))) ((and (cons? V1521) (= "7" (hd V1521))) (cons 7 (shen.digits->integers (tl V1521)))) ((and (cons? V1521) (= "8" (hd V1521))) (cons 8 (shen.digits->integers (tl V1521)))) ((and (cons? V1521) (= "9" (hd V1521))) (cons 9 (shen.digits->integers (tl V1521)))) (true ())))

(defun shen.<sym> (V1523) (let Parse_shen.<alpha> (shen.<alpha> V1523) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V1525) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V1525) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1525) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V1527) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V1527) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V1527) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V1529) (if (cons? (hd V1529)) (let Parse_Char (hd (hd V1529)) (if (shen.numbyte? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V1529)) (shen.hdtl V1529))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.numbyte? (V1535) (cond ((= 48 V1535) true) ((= 49 V1535) true) ((= 50 V1535) true) ((= 51 V1535) true) ((= 52 V1535) true) ((= 53 V1535) true) ((= 54 V1535) true) ((= 55 V1535) true) ((= 56 V1535) true) ((= 57 V1535) true) (true false)))

(defun shen.<alpha> (V1537) (if (cons? (hd V1537)) (let Parse_Char (hd (hd V1537)) (if (shen.symbol-code? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V1537)) (shen.hdtl V1537))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.symbol-code? (V1539) (or (= V1539 126) (or (and (> V1539 94) (< V1539 123)) (or (and (> V1539 59) (< V1539 91)) (or (and (> V1539 41) (and (< V1539 58) (not (= V1539 44)))) (or (and (> V1539 34) (< V1539 40)) (= V1539 33)))))))

(defun shen.<str> (V1541) (let Parse_shen.<dbq> (shen.<dbq> V1541) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V1543) (if (cons? (hd V1543)) (let Parse_Char (hd (hd V1543)) (if (= Parse_Char 34) (shen.pair (hd (shen.pair (tl (hd V1543)) (shen.hdtl V1543))) Parse_Char) (fail))) (fail)))

(defun shen.<strcontents> (V1545) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V1545) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1545) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V1547) (if (cons? (hd V1547)) (let Parse_Char (hd (hd V1547)) (shen.pair (hd (shen.pair (tl (hd V1547)) (shen.hdtl V1547))) (n->string Parse_Char))) (fail)))

(defun shen.<strc> (V1549) (if (cons? (hd V1549)) (let Parse_Char (hd (hd V1549)) (if (not (= Parse_Char 34)) (shen.pair (hd (shen.pair (tl (hd V1549)) (shen.hdtl V1549))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.<number> (V1551) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V1551) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V1551) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V1551) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V1551) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V1551) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V1551) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V1553) (if (and (cons? (hd V1553)) (= 101 (hd (hd V1553)))) (shen.pair (hd (shen.pair (tl (hd V1553)) (shen.hdtl V1553))) shen.skip) (fail)))

(defun shen.<log10> (V1555) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V1555) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V1555) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V1557) (if (cons? (hd V1557)) (let Parse_Char (hd (hd V1557)) (if (= Parse_Char 43) (shen.pair (hd (shen.pair (tl (hd V1557)) (shen.hdtl V1557))) Parse_Char) (fail))) (fail)))

(defun shen.<stop> (V1559) (if (cons? (hd V1559)) (let Parse_Char (hd (hd V1559)) (if (= Parse_Char 46) (shen.pair (hd (shen.pair (tl (hd V1559)) (shen.hdtl V1559))) Parse_Char) (fail))) (fail)))

(defun shen.<predigits> (V1561) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V1561) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1561) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V1563) (let Parse_shen.<digits> (shen.<digits> V1563) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V1565) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V1565) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V1565) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V1567) (if (cons? (hd V1567)) (let Parse_X (hd (hd V1567)) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1567)) (shen.hdtl V1567))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V1569) (cond ((= 48 V1569) 0) ((= 49 V1569) 1) ((= 50 V1569) 2) ((= 51 V1569) 3) ((= 52 V1569) 4) ((= 53 V1569) 5) ((= 54 V1569) 6) ((= 55 V1569) 7) ((= 56 V1569) 8) ((= 57 V1569) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V1574 V1575) (cond ((= () V1574) 0) ((cons? V1574) (+ (* (shen.expt 10 V1575) (hd V1574)) (shen.pre (tl V1574) (+ V1575 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V1580 V1581) (cond ((= () V1580) 0) ((cons? V1580) (+ (* (shen.expt 10 (- 0 V1581)) (hd V1580)) (shen.post (tl V1580) (+ V1581 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V1586 V1587) (cond ((= 0 V1587) 1) ((> V1587 0) (* V1586 (shen.expt V1586 (- V1587 1)))) (true (* 1 (/ (shen.expt V1586 (+ V1587 1)) V1586)))))

(defun shen.<st_input1> (V1589) (let Parse_shen.<st_input> (shen.<st_input> V1589) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V1591) (let Parse_shen.<st_input> (shen.<st_input> V1591) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V1593) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V1593) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V1593) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V1595) (let Parse_shen.<backslash> (shen.<backslash> V1595) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V1597) (if (and (cons? (hd V1597)) (= 92 (hd (hd V1597)))) (shen.pair (hd (shen.pair (tl (hd V1597)) (shen.hdtl V1597))) shen.skip) (fail)))

(defun shen.<anysingle> (V1599) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V1599) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1599) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V1601) (if (cons? (hd V1601)) (let Parse_X (hd (hd V1601)) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (tl (hd V1601)) (shen.hdtl V1601))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V1603) (if (cons? (hd V1603)) (let Parse_X (hd (hd V1603)) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (tl (hd V1603)) (shen.hdtl V1603))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V1605) (let Parse_shen.<backslash> (shen.<backslash> V1605) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V1607) (if (and (cons? (hd V1607)) (= 42 (hd (hd V1607)))) (shen.pair (hd (shen.pair (tl (hd V1607)) (shen.hdtl V1607))) shen.skip) (fail)))

(defun shen.<anymulti> (V1609) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V1609) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V1609) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V1609)) (let Parse_X (hd (hd V1609)) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (tl (hd V1609)) (shen.hdtl V1609))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V1611) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V1611) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V1611) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V1613) (if (cons? (hd V1613)) (let Parse_X (hd (hd V1613)) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (tl (hd V1613)) (shen.hdtl V1613))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V1615) (cond ((= () V1615) ()) ((and (cons? V1615) (and (cons? (tl V1615)) (and (cons? (tl (tl V1615))) (and (= () (tl (tl (tl V1615)))) (= (hd (tl V1615)) bar!))))) (cons cons (cons (hd V1615) (tl (tl V1615))))) ((cons? V1615) (cons cons (cons (hd V1615) (cons (shen.cons_form (tl V1615)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V1620 V1621) (cond ((and (cons? V1620) (and (= $ (hd V1620)) (and (cons? (tl V1620)) (= () (tl (tl V1620)))))) (append (explode (hd (tl V1620))) V1621)) ((and (cons? V1620) (and (= package (hd V1620)) (and (cons? (tl V1620)) (and (= null (hd (tl V1620))) (cons? (tl (tl V1620))))))) (append (tl (tl (tl V1620))) V1621)) ((and (cons? V1620) (and (= package (hd V1620)) (and (cons? (tl V1620)) (cons? (tl (tl V1620)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V1620)))) (let External (shen.record-exceptions ListofExceptions (hd (tl V1620))) (let PackageNameDot (intern (cn (str (hd (tl V1620))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (let Packaged (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V1620))) ExpPackageNameDot) (let Internal (shen.record-internal (hd (tl V1620)) (shen.internal-symbols ExpPackageNameDot Packaged)) (append Packaged V1621)))))))) (true (cons V1620 V1621))))

(defun shen.record-exceptions (V1624 V1625) (let CurrExceptions (get/or V1625 shen.external-symbols (freeze ()) (value *property-vector*)) (let AllExceptions (union V1624 CurrExceptions) (put V1625 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.record-internal (V1628 V1629) (put V1628 shen.internal-symbols (union V1629 (get/or V1628 shen.internal-symbols (freeze ()) (value *property-vector*))) (value *property-vector*)))

(defun shen.internal-symbols (V1640 V1641) (cond ((and (symbol? V1641) (shen.prefix? V1640 (explode V1641))) (cons V1641 ())) ((cons? V1641) (union (shen.internal-symbols V1640 (hd V1641)) (shen.internal-symbols V1640 (tl V1641)))) (true ())))

(defun shen.packageh (V1658 V1659 V1660 V1661) (cond ((cons? V1660) (cons (shen.packageh V1658 V1659 (hd V1660) V1661) (shen.packageh V1658 V1659 (tl V1660) V1661))) ((or (shen.sysfunc? V1660) (or (variable? V1660) (element? V1660 V1659))) V1660) ((and (symbol? V1660) (let ExplodeX (explode V1660) (and (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) ExplodeX)) (not (shen.prefix? V1661 ExplodeX))))) (concat V1658 V1660)) (true V1660)))

