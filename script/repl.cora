(define safe-read-sexp
  Str -> (trap-error
                   [ok (read-from-string Str)]
                   (/. E more)))

(define sexp-to-kl
  X -> [ok (shen.elim-def (shen.proc-input+ X))])

(define eval-kl-print
  KL -> (trap-error
          (let Res (eval-kl KL)
               _ (console-log (shen.insert Res "~S"))
               [ok ""])
          (/. X
             (do (console-log (error-to-string X)) err))))

(define fmap
  [F | More] [ok Data]  -> (fmap More (F Data))
  [] [ok _]  -> true
  _ more -> false
  _ Other -> true)

(define handle-sexp-list
  SS -> (let Eval (fmap [(function sexp-to-kl) (function eval-kl-print)])
             (fold-left (/. _ Eval) more (map (/. X [ok X]) SS))))

(define handle
  Str -> (fmap [(function safe-read-sexp)
                (function handle-sexp-list)]
                [ok Str]))