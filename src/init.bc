(((const null?) (push) (make-closure 1 0 ((local-ref 0) (push) (const ()) (push) (primitive =) (exit))) (push) (primitive set) (exit)) ((const cadr) (push) (make-closure 1 0 ((local-ref 0) (push) (primitive cdr) (push) (primitive car) (exit))) (push) (primitive set) (exit)) ((const caar) (push) (make-closure 1 0 ((local-ref 0) (push) (primitive car) (push) (primitive car) (exit))) (push) (primitive set) (exit)) ((const cdar) (push) (make-closure 1 0 ((local-ref 0) (push) (primitive car) (push) (primitive cdr) (exit))) (push) (primitive set) (exit)) ((const cddr) (push) (make-closure 1 0 ((local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (exit))) (push) (primitive set) (exit)) ((const caddr) (push) (make-closure 1 0 ((local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (exit))) (push) (primitive set) (exit)) ((const cadddr) (push) (make-closure 1 0 ((local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (exit))) (push) (primitive set) (exit)) ((const cdddr) (push) (make-closure 1 0 ((local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (exit))) (push) (primitive set) (exit)) ((const rcons) (push) (make-closure 1 0 ((local-ref 0) (push) (primitive cons?) (if ((const cons) (push) (local-ref 0) (push) (primitive car) (push) (global-ref rcons) (push) (local-ref 0) (push) (primitive cdr) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((const ()) (exit))))) (push) (primitive set) (exit)) ((const pair?) (push) (make-closure 1 0 ((local-ref 0) (push) (primitive cons?) (exit))) (push) (primitive set) (exit)) ((const cora/init.reverse-h) (push) (make-closure 2 0 ((local-ref 1) (push) (primitive cons?) (if ((global-ref cora/init.reverse-h) (push) (local-ref 1) (push) (primitive car) (push) (local-ref 0) (push) (primitive cons) (push) (local-ref 1) (push) (primitive cdr) (push) (tailcall 3)) ((local-ref 0) (exit))))) (push) (primitive set) (exit)) ((const reverse) (push) (global-ref cora/init.reverse-h) (push) (const ()) (push) (call 2) (push) (primitive set) (exit)) ((const map-h) (push) (make-closure 3 0 ((local-ref 2) (push) (primitive cons?) (if ((global-ref map-h) (push) (local-ref 1) (push) (local-ref 2) (push) (primitive car) (push) (call 2) (push) (local-ref 0) (push) (primitive cons) (push) (local-ref 1) (push) (local-ref 2) (push) (primitive cdr) (push) (tailcall 4)) ((global-ref reverse) (push) (local-ref 0) (push) (tailcall 2))))) (push) (primitive set) (exit)) ((const map) (push) (make-closure 2 0 ((global-ref map-h) (push) (const ()) (push) (local-ref 0) (push) (local-ref 1) (push) (tailcall 4))) (push) (primitive set) (exit)) ((const *macros*) (push) (const ()) (push) (primitive set) (exit)) ((const *protect-symbol*) (push) (const protect) (push) (primitive gensym) (push) (primitive set) (exit)) ((const cora/init.protect) (push) (make-closure 1 0 ((global-ref *protect-symbol*) (push) (local-ref 0) (push) (primitive cons) (exit))) (push) (primitive set) (exit)) ((const cora/init.add-to-*macros*) (push) (make-closure 2 0 ((const *macros*) (push) (local-ref 0) (push) (local-ref 1) (push) (primitive cons) (push) (global-ref *macros*) (push) (primitive cons) (push) (primitive set) (exit))) (push) (primitive set) (exit)) ((const cora/init.macroexpand1-h) (push) (make-closure 2 0 ((const ()) (push) (local-ref 1) (push) (primitive =) (if ((local-ref 0) (exit)) ((local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (make-closure 1 5 ((closure-ref 4) (push) (primitive cons?) (if ((closure-ref 4) (push) (primitive car) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((const true) (if ((local-ref 0) (push) (primitive cdr) (push) (closure-ref 4) (push) (tailcall 2)) ((global-ref cora/init.macroexpand1-h) (push) (closure-ref 4) (push) (closure-ref 0) (push) (primitive cdr) (push) (tailcall 3)))) ((const false) (if ((local-ref 0) (push) (primitive cdr) (push) (closure-ref 4) (push) (tailcall 2)) ((global-ref cora/init.macroexpand1-h) (push) (closure-ref 4) (push) (closure-ref 0) (push) (primitive cdr) (push) (tailcall 3)))))) ((const false) (if ((local-ref 0) (push) (primitive cdr) (push) (closure-ref 4) (push) (tailcall 2)) ((global-ref cora/init.macroexpand1-h) (push) (closure-ref 4) (push) (closure-ref 0) (push) (primitive cdr) (push) (tailcall 3))))))) (push) (local-ref 1) (push) (primitive car) (push) (tailcall 2))))) (push) (primitive set) (exit)) ((const cora/init.macroexpand1) (push) (make-closure 1 0 ((global-ref cora/init.macroexpand1-h) (push) (local-ref 0) (push) (global-ref *macros*) (push) (tailcall 3))) (push) (primitive set) (exit)) ((const cora/init.macroexpand-boot) (push) (make-closure 1 0 ((local-ref 0) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive car) (push) (global-ref *protect-symbol*) (push) (primitive =) (if ((local-ref 0) (push) (primitive cdr) (exit)) ((local-ref 0) (push) (primitive car) (push) (const lambda) (push) (primitive =) (if ((const lambda) (push) (global-ref cadr) (push) (local-ref 0) (push) (call 2) (push) (global-ref cora/init.macroexpand-boot) (push) (global-ref caddr) (push) (local-ref 0) (push) (call 2) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 0) (push) (primitive car) (push) (const quote) (push) (primitive =) (if ((local-ref 0) (exit)) ((local-ref 0) (push) (make-closure 1 1 ((local-ref 0) (push) (closure-ref 0) (push) (primitive =) (if ((global-ref map) (push) (global-ref cora/init.macroexpand-boot) (push) (local-ref 0) (push) (tailcall 3)) ((global-ref cora/init.macroexpand-boot) (push) (local-ref 0) (push) (tailcall 2))))) (push) (global-ref cora/init.macroexpand1) (push) (local-ref 0) (push) (call 2) (push) (tailcall 2)))))))) ((local-ref 0) (exit))))) (push) (primitive set) (exit)) ((const macroexpand) (push) (global-ref cora/init.macroexpand-boot) (push) (primitive set) (exit)) ((const defmacro-macro) (push) (make-closure 1 0 ((const cora/init.add-to-*macros*) (push) (const quote) (push) (global-ref cadr) (push) (local-ref 0) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (const lambda) (push) (global-ref caddr) (push) (local-ref 0) (push) (call 2) (push) (global-ref cdddr) (push) (local-ref 0) (push) (call 2) (push) (primitive cons) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit))) (push) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (push) (const defmacro) (push) (global-ref defmacro-macro) (push) (tailcall 3)) ((global-ref cora/init.add-to-*macros*) (push) (const list) (push) (make-closure 1 0 ((global-ref rcons) (push) (local-ref 0) (push) (primitive cdr) (push) (tailcall 2))) (push) (tailcall 3)) ((global-ref cora/init.add-to-*macros*) (push) (const defun) (push) (make-closure 1 0 ((const set) (push) (const quote) (push) (global-ref cadr) (push) (local-ref 0) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (const lambda) (push) (global-ref caddr) (push) (local-ref 0) (push) (call 2) (push) (global-ref cadddr) (push) (local-ref 0) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit))) (push) (tailcall 3)) ((const elem?) (push) (make-closure 2 0 ((local-ref 1) (push) (primitive cons?) (if ((local-ref 1) (push) (primitive car) (push) (local-ref 0) (push) (primitive =) (if ((const true) (exit)) ((global-ref elem?) (push) (local-ref 0) (push) (local-ref 1) (push) (primitive cdr) (push) (tailcall 3)))) ((const false) (exit))))) (push) (primitive set) (exit)) ((const atom?) (push) (make-closure 1 0 ((local-ref 0) (push) (primitive cons?) (push) (primitive not) (exit))) (push) (primitive set) (exit)) ((const cora/init.rewrite-let) (push) (make-closure 1 0 ((global-ref null?) (push) (local-ref 0) (push) (primitive cdr) (push) (call 2) (if ((local-ref 0) (push) (primitive car) (exit)) ((const let) (push) (local-ref 0) (push) (primitive car) (push) (global-ref cadr) (push) (local-ref 0) (push) (call 2) (push) (global-ref cora/init.rewrite-let) (push) (global-ref cddr) (push) (local-ref 0) (push) (call 2) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit))))) (push) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (push) (const let) (push) (make-closure 1 0 ((global-ref cora/init.rewrite-let) (push) (local-ref 0) (push) (primitive cdr) (push) (tailcall 2))) (push) (tailcall 3)) ((global-ref cora/init.add-to-*macros*) (push) (const cond) (push) (make-closure 1 0 ((reserve-locals 1) (const ()) (push) (local-ref 0) (push) (primitive cdr) (push) (primitive =) (if ((const error) (push) (const "no cond match") (push) (const ()) (push) (primitive cons) (push) (primitive cons) (exit)) ((global-ref cadr) (push) (local-ref 0) (push) (call 2) (local-set 1) (const if) (push) (local-ref 1) (push) (primitive car) (push) (global-ref cadr) (push) (local-ref 1) (push) (call 2) (push) (const cond) (push) (global-ref cddr) (push) (local-ref 0) (push) (call 2) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit))))) (push) (tailcall 3)) ((const cora/init.rewrite-or) (push) (make-closure 1 0 ((reserve-locals 1) (local-ref 0) (push) (const ()) (push) (primitive =) (if ((const false) (exit)) ((local-ref 0) (push) (primitive car) (push) (const true) (push) (primitive =) (if ((const true) (exit)) ((global-ref cora/init.rewrite-or) (push) (local-ref 0) (push) (primitive cdr) (push) (call 2) (local-set 1) (local-ref 1) (push) (const true) (push) (primitive =) (if ((const true) (exit)) ((const if) (push) (local-ref 0) (push) (primitive car) (push) (const true) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit))))))))) (push) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (push) (const or) (push) (make-closure 1 0 ((global-ref cora/init.rewrite-or) (push) (local-ref 0) (push) (primitive cdr) (push) (tailcall 2))) (push) (tailcall 3)) ((const cora/init.rewrite-and) (push) (make-closure 1 0 ((reserve-locals 1) (const ()) (push) (local-ref 0) (push) (primitive =) (if ((const true) (exit)) ((local-ref 0) (push) (primitive car) (push) (const false) (push) (primitive =) (if ((const false) (exit)) ((global-ref cora/init.rewrite-and) (push) (local-ref 0) (push) (primitive cdr) (push) (call 2) (local-set 1) (local-ref 1) (push) (const false) (push) (primitive =) (if ((const false) (exit)) ((const if) (push) (local-ref 0) (push) (primitive car) (push) (local-ref 1) (push) (const false) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit))))))))) (push) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (push) (const and) (push) (make-closure 1 0 ((global-ref cora/init.rewrite-and) (push) (local-ref 0) (push) (primitive cdr) (push) (tailcall 2))) (push) (tailcall 3)) ((const boolean?) (push) (make-closure 1 0 ((local-ref 0) (push) (const true) (push) (primitive =) (if ((const true) (exit)) ((local-ref 0) (push) (const false) (push) (primitive =) (if ((const true) (exit)) ((const false) (exit))))))) (push) (primitive set) (exit)) ((const cora/init.rcons1) (push) (make-closure 1 0 ((global-ref null?) (push) (local-ref 0) (push) (primitive cdr) (push) (call 2) (if ((local-ref 0) (push) (primitive car) (exit)) ((const cons) (push) (local-ref 0) (push) (primitive car) (push) (global-ref cora/init.rcons1) (push) (local-ref 0) (push) (primitive cdr) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit))))) (push) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (push) (const list-rest) (push) (make-closure 1 0 ((global-ref cora/init.rcons1) (push) (local-ref 0) (push) (primitive cdr) (push) (tailcall 2))) (push) (tailcall 3)) ((const cora/init.match-cons-expander) (push) (make-closure 4 0 ((reserve-locals 4) (global-ref cadr) (push) (local-ref 0) (push) (call 2) (local-set 4) (global-ref caddr) (push) (local-ref 0) (push) (call 2) (local-set 5) (local-ref 1) (push) (primitive cons?) (if ((local-ref 1) (push) (primitive car) (push) (const cons) (push) (primitive =) (if ((const true) (if ((global-ref cadr) (push) (local-ref 1) (push) (call 2) (local-set 6) (global-ref caddr) (push) (local-ref 1) (push) (call 2) (local-set 7) (global-ref cora/init.match1) (push) (local-ref 4) (push) (local-ref 6) (push) (global-ref cora/init.match1) (push) (local-ref 5) (push) (local-ref 7) (push) (local-ref 2) (push) (local-ref 3) (push) (call 5) (push) (local-ref 3) (push) (tailcall 5)) ((const if) (push) (const cons?) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (global-ref cora/init.match1) (push) (local-ref 4) (push) (const car) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (global-ref cora/init.match1) (push) (local-ref 5) (push) (const cdr) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 2) (push) (local-ref 3) (push) (call 5) (push) (local-ref 3) (push) (call 5) (push) (local-ref 3) (push) (const ()) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)))) ((const false) (if ((global-ref cadr) (push) (local-ref 1) (push) (call 2) (local-set 6) (global-ref caddr) (push) (local-ref 1) (push) (call 2) (local-set 7) (global-ref cora/init.match1) (push) (local-ref 4) (push) (local-ref 6) (push) (global-ref cora/init.match1) (push) (local-ref 5) (push) (local-ref 7) (push) (local-ref 2) (push) (local-ref 3) (push) (call 5) (push) (local-ref 3) (push) (tailcall 5)) ((const if) (push) (const cons?) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (global-ref cora/init.match1) (push) (local-ref 4) (push) (const car) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (global-ref cora/init.match1) (push) (local-ref 5) (push) (const cdr) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 2) (push) (local-ref 3) (push) (call 5) (push) (local-ref 3) (push) (call 5) (push) (local-ref 3) (push) (const ()) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)))))) ((const false) (if ((global-ref cadr) (push) (local-ref 1) (push) (call 2) (local-set 6) (global-ref caddr) (push) (local-ref 1) (push) (call 2) (local-set 7) (global-ref cora/init.match1) (push) (local-ref 4) (push) (local-ref 6) (push) (global-ref cora/init.match1) (push) (local-ref 5) (push) (local-ref 7) (push) (local-ref 2) (push) (local-ref 3) (push) (call 5) (push) (local-ref 3) (push) (tailcall 5)) ((const if) (push) (const cons?) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (global-ref cora/init.match1) (push) (local-ref 4) (push) (const car) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (global-ref cora/init.match1) (push) (local-ref 5) (push) (const cdr) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 2) (push) (local-ref 3) (push) (call 5) (push) (local-ref 3) (push) (call 5) (push) (local-ref 3) (push) (const ()) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit))))))) (push) (primitive set) (exit)) ((const cora/init.match1) (push) (make-closure 4 0 ((reserve-locals 1) (make-closure 1 0 ((global-ref atom?) (push) (local-ref 0) (push) (call 2) (if ((local-ref 0) (push) (primitive symbol?) (push) (primitive not) (if ((const true) (exit)) ((const false) (exit)))) ((const false) (exit))))) (local-set 4) (local-ref 4) (push) (local-ref 0) (push) (call 2) (if ((local-ref 0) (push) (local-ref 1) (push) (primitive =) (if ((local-ref 2) (exit)) ((const if) (push) (const =) (push) (local-ref 0) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 2) (push) (local-ref 3) (push) (const ()) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)))) ((local-ref 0) (push) (primitive symbol?) (if ((const let) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((global-ref pair?) (push) (local-ref 0) (push) (call 2) (if ((local-ref 0) (push) (primitive car) (push) (const quote) (push) (primitive =) (if ((const if) (push) (const =) (push) (local-ref 0) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 2) (push) (local-ref 3) (push) (const ()) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 0) (push) (primitive car) (push) (const cons) (push) (primitive =) (if ((global-ref cora/init.match-cons-expander) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (tailcall 5)) ((global-ref error) (push) (const "no cond match") (push) (tailcall 2)))))) ((global-ref error) (push) (global-ref str) (push) (const "match fail ") (push) (local-ref 0) (push) (call 3) (push) (tailcall 2))))))))) (push) (primitive set) (exit)) ((const cora/init.extract-rule-action) (push) (make-closure 2 0 ((reserve-locals 1) (local-ref 0) (push) (primitive cdr) (push) (primitive car) (local-set 2) (global-ref pair?) (push) (local-ref 2) (push) (call 2) (if ((local-ref 2) (push) (primitive car) (push) (const where) (push) (primitive =) (if ((const true) (if ((const if) (push) (global-ref cadr) (push) (local-ref 2) (push) (call 2) (push) (global-ref caddr) (push) (local-ref 2) (push) (call 2) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 2) (exit)))) ((const false) (if ((const if) (push) (global-ref cadr) (push) (local-ref 2) (push) (call 2) (push) (global-ref caddr) (push) (local-ref 2) (push) (call 2) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 2) (exit)))))) ((const false) (if ((const if) (push) (global-ref cadr) (push) (local-ref 2) (push) (call 2) (push) (global-ref caddr) (push) (local-ref 2) (push) (call 2) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 2) (exit))))))) (push) (primitive set) (exit)) ((const cora/init.match-helper) (push) (make-closure 2 0 ((reserve-locals 5) (global-ref null?) (push) (local-ref 1) (push) (call 2) (if ((const error) (push) (const "no match-help found!") (push) (const ()) (push) (primitive cons) (push) (primitive cons) (exit)) ((global-ref pair?) (push) (local-ref 1) (push) (call 2) (if ((global-ref pair?) (push) (local-ref 1) (push) (primitive cdr) (push) (call 2) (if ((const true) (if ((local-ref 1) (push) (primitive car) (local-set 2) (const cc) (push) (primitive gensym) (local-set 3) (global-ref cora/init.extract-rule-action) (push) (local-ref 1) (push) (local-ref 3) (push) (call 3) (local-set 4) (global-ref cora/init.match1) (push) (global-ref macroexpand) (push) (local-ref 2) (push) (call 2) (push) (local-ref 0) (push) (local-ref 4) (push) (local-ref 3) (push) (call 5) (local-set 5) (global-ref cora/init.match-helper) (push) (local-ref 0) (push) (local-ref 1) (push) (primitive cdr) (push) (primitive cdr) (push) (call 3) (local-set 6) (const let) (push) (local-ref 3) (push) (const lambda) (push) (const ()) (push) (local-ref 6) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 5) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((global-ref error) (push) (const "no cond match") (push) (tailcall 2)))) ((const false) (if ((local-ref 1) (push) (primitive car) (local-set 2) (const cc) (push) (primitive gensym) (local-set 3) (global-ref cora/init.extract-rule-action) (push) (local-ref 1) (push) (local-ref 3) (push) (call 3) (local-set 4) (global-ref cora/init.match1) (push) (global-ref macroexpand) (push) (local-ref 2) (push) (call 2) (push) (local-ref 0) (push) (local-ref 4) (push) (local-ref 3) (push) (call 5) (local-set 5) (global-ref cora/init.match-helper) (push) (local-ref 0) (push) (local-ref 1) (push) (primitive cdr) (push) (primitive cdr) (push) (call 3) (local-set 6) (const let) (push) (local-ref 3) (push) (const lambda) (push) (const ()) (push) (local-ref 6) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 5) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((global-ref error) (push) (const "no cond match") (push) (tailcall 2)))))) ((const false) (if ((local-ref 1) (push) (primitive car) (local-set 2) (const cc) (push) (primitive gensym) (local-set 3) (global-ref cora/init.extract-rule-action) (push) (local-ref 1) (push) (local-ref 3) (push) (call 3) (local-set 4) (global-ref cora/init.match1) (push) (global-ref macroexpand) (push) (local-ref 2) (push) (call 2) (push) (local-ref 0) (push) (local-ref 4) (push) (local-ref 3) (push) (call 5) (local-set 5) (global-ref cora/init.match-helper) (push) (local-ref 0) (push) (local-ref 1) (push) (primitive cdr) (push) (primitive cdr) (push) (call 3) (local-set 6) (const let) (push) (local-ref 3) (push) (const lambda) (push) (const ()) (push) (local-ref 6) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 5) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((global-ref error) (push) (const "no cond match") (push) (tailcall 2))))))))) (push) (primitive set) (exit)) ((const cora/init.rewrite-match) (push) (make-closure 1 0 ((reserve-locals 3) (global-ref macroexpand) (push) (global-ref cadr) (push) (local-ref 0) (push) (call 2) (push) (call 2) (local-set 1) (global-ref cddr) (push) (local-ref 0) (push) (call 2) (local-set 2) (local-ref 1) (push) (primitive cons?) (if ((const cons) (push) (local-ref 1) (push) (primitive car) (push) (primitive =) (push) (primitive not) (if ((const true) (if ((const val) (push) (primitive gensym) (local-set 3) (const let) (push) (local-ref 3) (push) (local-ref 1) (push) (global-ref cora/init.match-helper) (push) (local-ref 3) (push) (local-ref 2) (push) (call 3) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((global-ref cora/init.match-helper) (push) (local-ref 1) (push) (local-ref 2) (push) (tailcall 3)))) ((const false) (if ((const val) (push) (primitive gensym) (local-set 3) (const let) (push) (local-ref 3) (push) (local-ref 1) (push) (global-ref cora/init.match-helper) (push) (local-ref 3) (push) (local-ref 2) (push) (call 3) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((global-ref cora/init.match-helper) (push) (local-ref 1) (push) (local-ref 2) (push) (tailcall 3)))))) ((const false) (if ((const val) (push) (primitive gensym) (local-set 3) (const let) (push) (local-ref 3) (push) (local-ref 1) (push) (global-ref cora/init.match-helper) (push) (local-ref 3) (push) (local-ref 2) (push) (call 3) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((global-ref cora/init.match-helper) (push) (local-ref 1) (push) (local-ref 2) (push) (tailcall 3))))))) (push) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (push) (const match) (push) (make-closure 1 0 ((global-ref cora/init.rewrite-match) (push) (local-ref 0) (push) (tailcall 2))) (push) (tailcall 3)) ((const cora/init.extract-rules1) (push) (make-closure 3 0 ((reserve-locals 1) (local-ref 2) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 2) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 2) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (make-closure 0 23 ((reserve-locals 5) (closure-ref 18) (push) (closure-ref 19) (push) (closure-ref 22) (push) (closure-ref 22) (push) (closure-ref 22) (push) (closure-ref 22) (push) (closure-ref 22) (push) (closure-ref 18) (push) (closure-ref 19) (push) (closure-ref 22) (push) (closure-ref 22) (push) (closure-ref 22) (push) (make-closure 0 12 ((reserve-locals 4) (closure-ref 7) (push) (closure-ref 8) (push) (closure-ref 11) (push) (closure-ref 11) (push) (closure-ref 11) (push) (make-closure 0 5 ((reserve-locals 3) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 4) (push) (primitive cons?) (if ((closure-ref 4) (push) (primitive car) (local-set 1) (closure-ref 4) (push) (primitive cdr) (local-set 2) (global-ref cora/init.extract-rules1) (push) (local-ref 2) (push) (local-ref 1) (push) (closure-ref 1) (push) (primitive cons) (push) (closure-ref 0) (push) (tailcall 4)) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 11) (push) (primitive cons?) (if ((const =>) (push) (closure-ref 11) (push) (primitive car) (push) (primitive =) (if ((closure-ref 11) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 11) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 11) (push) (primitive cdr) (push) (primitive cdr) (local-set 2) (const list) (push) (global-ref reverse) (push) (closure-ref 8) (push) (call 2) (push) (primitive cons) (local-set 3) (global-ref cora/init.extract-rules1) (push) (local-ref 2) (push) (const ()) (push) (local-ref 1) (push) (local-ref 3) (push) (closure-ref 7) (push) (primitive cons) (push) (primitive cons) (push) (tailcall 4)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 22) (push) (primitive cons?) (if ((const =>) (push) (closure-ref 22) (push) (primitive car) (push) (primitive =) (if ((closure-ref 22) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 22) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 22) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((const where) (push) (closure-ref 22) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (push) (primitive =) (if ((closure-ref 22) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 22) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 2) (closure-ref 22) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (local-set 3) (const list) (push) (global-ref reverse) (push) (closure-ref 19) (push) (call 2) (push) (primitive cons) (local-set 4) (global-ref cora/init.extract-rules1) (push) (local-ref 3) (push) (const ()) (push) (const where) (push) (local-ref 2) (push) (local-ref 1) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 4) (push) (closure-ref 18) (push) (primitive cons) (push) (primitive cons) (push) (tailcall 4)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 3) (const ()) (push) (local-ref 0) (push) (primitive =) (if ((global-ref reverse) (push) (local-ref 2) (push) (tailcall 2)) ((local-ref 3) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/init.extract-rules) (push) (make-closure 1 0 ((global-ref cora/init.extract-rules1) (push) (local-ref 0) (push) (const ()) (push) (const ()) (push) (tailcall 4))) (push) (primitive set) (exit)) ((const cora/init.rules-patterns) (push) (make-closure 2 0 ((global-ref null?) (push) (local-ref 1) (push) (call 2) (if ((global-ref reverse) (push) (local-ref 0) (push) (tailcall 2)) ((global-ref cora/init.rules-patterns) (push) (local-ref 1) (push) (primitive car) (push) (local-ref 0) (push) (primitive cons) (push) (global-ref cddr) (push) (local-ref 1) (push) (call 2) (push) (tailcall 3))))) (push) (primitive set) (exit)) ((const cora/init.length-h) (push) (make-closure 2 0 ((local-ref 1) (push) (const ()) (push) (primitive =) (if ((local-ref 0) (exit)) ((global-ref cora/init.length-h) (push) (local-ref 0) (push) (const 1) (push) (primitive +) (push) (local-ref 1) (push) (primitive cdr) (push) (tailcall 3))))) (push) (primitive set) (exit)) ((const length) (push) (make-closure 1 0 ((global-ref cora/init.length-h) (push) (const 0) (push) (local-ref 0) (push) (tailcall 3))) (push) (primitive set) (exit)) ((const cora/init.filter-h) (push) (make-closure 3 0 ((local-ref 2) (push) (primitive cons?) (if ((local-ref 1) (push) (local-ref 2) (push) (primitive car) (push) (call 2) (if ((global-ref cora/init.filter-h) (push) (local-ref 2) (push) (primitive car) (push) (local-ref 0) (push) (primitive cons) (push) (local-ref 1) (push) (local-ref 2) (push) (primitive cdr) (push) (tailcall 4)) ((global-ref cora/init.filter-h) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 2) (push) (primitive cdr) (push) (tailcall 4)))) ((global-ref reverse) (push) (local-ref 0) (push) (tailcall 2))))) (push) (primitive set) (exit)) ((const filter) (push) (make-closure 2 0 ((global-ref cora/init.filter-h) (push) (const ()) (push) (local-ref 0) (push) (local-ref 1) (push) (tailcall 4))) (push) (primitive set) (exit)) ((const append) (push) (make-closure 2 0 ((local-ref 0) (push) (const ()) (push) (primitive =) (if ((local-ref 1) (exit)) ((local-ref 0) (push) (primitive car) (push) (global-ref append) (push) (local-ref 0) (push) (primitive cdr) (push) (local-ref 1) (push) (call 3) (push) (primitive cons) (exit))))) (push) (primitive set) (exit)) ((const cora/init.rules-arg-count) (push) (make-closure 1 0 ((reserve-locals 5) (global-ref cora/init.rules-patterns) (push) (const ()) (push) (local-ref 0) (push) (call 3) (local-set 1) (make-closure 1 0 ((global-ref length) (push) (local-ref 0) (push) (primitive cdr) (push) (tailcall 2))) (local-set 2) (global-ref map) (push) (local-ref 2) (push) (local-ref 1) (push) (call 3) (local-set 3) (local-ref 3) (push) (primitive car) (local-set 4) (local-ref 4) (push) (make-closure 1 1 ((closure-ref 0) (push) (local-ref 0) (push) (primitive =) (push) (primitive not) (exit))) (local-set 5) (global-ref null?) (push) (global-ref filter) (push) (local-ref 5) (push) (local-ref 3) (push) (primitive cdr) (push) (call 3) (push) (call 2) (push) (primitive not) (if ((global-ref error) (push) (const "inconsistent func rule args count") (push) (tailcall 2)) ((local-ref 4) (exit))))) (push) (primitive set) (exit)) ((const cora/init.gen-parameters) (push) (make-closure 1 0 ((local-ref 0) (push) (const 0) (push) (primitive =) (if ((const ()) (exit)) ((const p) (push) (primitive gensym) (push) (global-ref cora/init.gen-parameters) (push) (local-ref 0) (push) (const 1) (push) (primitive -) (push) (call 2) (push) (primitive cons) (exit))))) (push) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (push) (const func) (push) (make-closure 1 0 ((reserve-locals 3) (global-ref cora/init.extract-rules) (push) (global-ref cddr) (push) (local-ref 0) (push) (call 2) (push) (call 2) (local-set 1) (global-ref cora/init.rules-arg-count) (push) (local-ref 1) (push) (call 2) (local-set 2) (global-ref cora/init.gen-parameters) (push) (local-ref 2) (push) (call 2) (local-set 3) (const defun) (push) (global-ref cadr) (push) (local-ref 0) (push) (call 2) (push) (local-ref 3) (push) (const match) (push) (const list) (push) (local-ref 3) (push) (primitive cons) (push) (local-ref 1) (push) (primitive cons) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit))) (push) (tailcall 3)) ((const cora/init.propagate-boolean0) (push) (make-closure 1 0 ((reserve-locals 3) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (make-closure 0 74 ((reserve-locals 3) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (make-closure 0 63 ((reserve-locals 3) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (closure-ref 62) (push) (make-closure 0 52 ((reserve-locals 1) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (make-closure 0 45 ((reserve-locals 1) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (closure-ref 44) (push) (make-closure 0 40 ((reserve-locals 3) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (closure-ref 39) (push) (make-closure 0 29 ((reserve-locals 1) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (closure-ref 28) (push) (make-closure 0 24 ((reserve-locals 1) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (closure-ref 23) (push) (make-closure 0 19 ((reserve-locals 3) (closure-ref 18) (push) (closure-ref 18) (push) (closure-ref 18) (push) (closure-ref 18) (push) (closure-ref 18) (push) (closure-ref 18) (push) (closure-ref 18) (push) (closure-ref 18) (push) (closure-ref 18) (push) (closure-ref 18) (push) (make-closure 0 10 ((reserve-locals 3) (closure-ref 9) (push) (make-closure 0 1 ((reserve-locals 2) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 0) (local-set 1) (local-ref 1) (exit))) (local-set 0) (closure-ref 9) (push) (primitive cons?) (if ((const if) (push) (closure-ref 9) (push) (primitive car) (push) (primitive =) (if ((closure-ref 9) (push) (primitive cdr) (push) (primitive cons?) (if ((const false) (push) (closure-ref 9) (push) (primitive cdr) (push) (primitive car) (push) (primitive =) (if ((closure-ref 9) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 9) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 9) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 9) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 2) (const ()) (push) (closure-ref 9) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((local-ref 2) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 18) (push) (primitive cons?) (if ((const if) (push) (closure-ref 18) (push) (primitive car) (push) (primitive =) (if ((closure-ref 18) (push) (primitive cdr) (push) (primitive cons?) (if ((const true) (push) (closure-ref 18) (push) (primitive cdr) (push) (primitive car) (push) (primitive =) (if ((closure-ref 18) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 18) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 18) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 18) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 2) (const ()) (push) (closure-ref 18) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((local-ref 1) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 23) (push) (primitive cons?) (if ((const not) (push) (closure-ref 23) (push) (primitive car) (push) (primitive =) (if ((closure-ref 23) (push) (primitive cdr) (push) (primitive cons?) (if ((const false) (push) (closure-ref 23) (push) (primitive cdr) (push) (primitive car) (push) (primitive =) (if ((const ()) (push) (closure-ref 23) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const true) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 28) (push) (primitive cons?) (if ((const not) (push) (closure-ref 28) (push) (primitive car) (push) (primitive =) (if ((closure-ref 28) (push) (primitive cdr) (push) (primitive cons?) (if ((const true) (push) (closure-ref 28) (push) (primitive cdr) (push) (primitive car) (push) (primitive =) (if ((const ()) (push) (closure-ref 28) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const false) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 39) (push) (primitive cons?) (if ((const null?) (push) (closure-ref 39) (push) (primitive car) (push) (primitive =) (if ((closure-ref 39) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 39) (push) (primitive cdr) (push) (primitive car) (push) (primitive cons?) (if ((const cons) (push) (closure-ref 39) (push) (primitive cdr) (push) (primitive car) (push) (primitive car) (push) (primitive =) (if ((closure-ref 39) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 39) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 39) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 39) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 2) (const ()) (push) (closure-ref 39) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const ()) (push) (closure-ref 39) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const false) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 44) (push) (primitive cons?) (if ((const null?) (push) (closure-ref 44) (push) (primitive car) (push) (primitive =) (if ((closure-ref 44) (push) (primitive cdr) (push) (primitive cons?) (if ((const ()) (push) (closure-ref 44) (push) (primitive cdr) (push) (primitive car) (push) (primitive =) (if ((const ()) (push) (closure-ref 44) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const true) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 51) (push) (primitive cons?) (if ((const and) (push) (closure-ref 51) (push) (primitive car) (push) (primitive =) (if ((closure-ref 51) (push) (primitive cdr) (push) (primitive cons?) (if ((const true) (push) (closure-ref 51) (push) (primitive cdr) (push) (primitive car) (push) (primitive =) (if ((closure-ref 51) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((const true) (push) (closure-ref 51) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (push) (primitive =) (if ((const ()) (push) (closure-ref 51) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const true) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 62) (push) (primitive cons?) (if ((const cons?) (push) (closure-ref 62) (push) (primitive car) (push) (primitive =) (if ((closure-ref 62) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 62) (push) (primitive cdr) (push) (primitive car) (push) (primitive cons?) (if ((const cons) (push) (closure-ref 62) (push) (primitive cdr) (push) (primitive car) (push) (primitive car) (push) (primitive =) (if ((closure-ref 62) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 62) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 62) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 62) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 2) (const ()) (push) (closure-ref 62) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const ()) (push) (closure-ref 62) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const true) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 73) (push) (primitive cons?) (if ((const cdr) (push) (closure-ref 73) (push) (primitive car) (push) (primitive =) (if ((closure-ref 73) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 73) (push) (primitive cdr) (push) (primitive car) (push) (primitive cons?) (if ((const cons) (push) (closure-ref 73) (push) (primitive cdr) (push) (primitive car) (push) (primitive car) (push) (primitive =) (if ((closure-ref 73) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 73) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 73) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 73) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 2) (const ()) (push) (closure-ref 73) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const ()) (push) (closure-ref 73) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((local-ref 2) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 1) (local-ref 0) (push) (primitive cons?) (if ((const car) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive car) (push) (primitive cons?) (if ((const cons) (push) (local-ref 0) (push) (primitive cdr) (push) (primitive car) (push) (primitive car) (push) (primitive =) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive car) (local-set 2) (local-ref 0) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 3) (const ()) (push) (local-ref 0) (push) (primitive cdr) (push) (primitive car) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const ()) (push) (local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((local-ref 2) (exit)) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/init.propagate-boolean) (push) (make-closure 1 0 ((reserve-locals 2) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (make-closure 0 52 ((reserve-locals 3) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (closure-ref 51) (push) (make-closure 0 47 ((reserve-locals 3) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (closure-ref 46) (push) (make-closure 0 42 ((reserve-locals 3) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (closure-ref 41) (push) (make-closure 0 37 ((reserve-locals 5) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (closure-ref 36) (push) (make-closure 0 30 ((reserve-locals 3) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (closure-ref 29) (push) (make-closure 0 25 ((reserve-locals 3) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (closure-ref 24) (push) (make-closure 0 20 ((reserve-locals 7) (closure-ref 19) (push) (closure-ref 19) (push) (closure-ref 19) (push) (closure-ref 19) (push) (closure-ref 19) (push) (closure-ref 19) (push) (closure-ref 19) (push) (closure-ref 19) (push) (closure-ref 19) (push) (closure-ref 19) (push) (closure-ref 19) (push) (make-closure 0 11 ((reserve-locals 3) (closure-ref 10) (push) (closure-ref 10) (push) (closure-ref 10) (push) (closure-ref 10) (push) (make-closure 0 4 ((reserve-locals 3) (closure-ref 3) (push) (make-closure 0 1 ((reserve-locals 2) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 0) (local-set 1) (local-ref 1) (exit))) (local-set 0) (closure-ref 3) (push) (primitive cons?) (if ((closure-ref 3) (push) (primitive car) (local-set 1) (closure-ref 3) (push) (primitive cdr) (local-set 2) (global-ref map) (push) (global-ref cora/init.propagate-boolean) (push) (local-ref 1) (push) (local-ref 2) (push) (primitive cons) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 10) (push) (primitive cons?) (if ((const lambda) (push) (closure-ref 10) (push) (primitive car) (push) (primitive =) (if ((closure-ref 10) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 10) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 10) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 10) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 2) (const ()) (push) (closure-ref 10) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const lambda) (push) (local-ref 1) (push) (global-ref cora/init.propagate-boolean) (push) (local-ref 2) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 19) (push) (primitive cons?) (if ((const if) (push) (closure-ref 19) (push) (primitive car) (push) (primitive =) (if ((closure-ref 19) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 19) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 19) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 19) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 2) (closure-ref 19) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 19) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 3) (const ()) (push) (closure-ref 19) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((global-ref cora/init.propagate-boolean) (push) (local-ref 1) (push) (call 2) (local-set 4) (global-ref cora/init.propagate-boolean) (push) (local-ref 2) (push) (call 2) (local-set 5) (global-ref cora/init.propagate-boolean) (push) (local-ref 3) (push) (call 2) (local-set 6) (global-ref cora/init.propagate-boolean0) (push) (const if) (push) (local-ref 4) (push) (local-ref 5) (push) (local-ref 6) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (tailcall 2)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 24) (push) (primitive cons?) (if ((const not) (push) (closure-ref 24) (push) (primitive car) (push) (primitive =) (if ((closure-ref 24) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 24) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 24) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((global-ref cora/init.propagate-boolean) (push) (local-ref 1) (push) (call 2) (local-set 2) (global-ref cora/init.propagate-boolean0) (push) (const not) (push) (local-ref 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (tailcall 2)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 29) (push) (primitive cons?) (if ((const null?) (push) (closure-ref 29) (push) (primitive car) (push) (primitive =) (if ((closure-ref 29) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 29) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 29) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((global-ref cora/init.propagate-boolean) (push) (local-ref 1) (push) (call 2) (local-set 2) (global-ref cora/init.propagate-boolean0) (push) (const null?) (push) (local-ref 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (tailcall 2)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 36) (push) (primitive cons?) (if ((const and) (push) (closure-ref 36) (push) (primitive car) (push) (primitive =) (if ((closure-ref 36) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 36) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 36) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 36) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 2) (const ()) (push) (closure-ref 36) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((global-ref cora/init.propagate-boolean) (push) (local-ref 1) (push) (call 2) (local-set 3) (global-ref cora/init.propagate-boolean) (push) (local-ref 2) (push) (call 2) (local-set 4) (global-ref cora/init.propagate-boolean0) (push) (const and) (push) (local-ref 3) (push) (local-ref 4) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (tailcall 2)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 41) (push) (primitive cons?) (if ((const cdr) (push) (closure-ref 41) (push) (primitive car) (push) (primitive =) (if ((closure-ref 41) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 41) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 41) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((global-ref cora/init.propagate-boolean) (push) (local-ref 1) (push) (call 2) (local-set 2) (global-ref cora/init.propagate-boolean0) (push) (const cdr) (push) (local-ref 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (tailcall 2)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 46) (push) (primitive cons?) (if ((const car) (push) (closure-ref 46) (push) (primitive car) (push) (primitive =) (if ((closure-ref 46) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 46) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 46) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((global-ref cora/init.propagate-boolean) (push) (local-ref 1) (push) (call 2) (local-set 2) (global-ref cora/init.propagate-boolean0) (push) (const car) (push) (local-ref 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (tailcall 2)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 51) (push) (primitive cons?) (if ((const cons?) (push) (closure-ref 51) (push) (primitive car) (push) (primitive =) (if ((closure-ref 51) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 51) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 51) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((global-ref cora/init.propagate-boolean) (push) (local-ref 1) (push) (call 2) (local-set 2) (global-ref cora/init.propagate-boolean0) (push) (const cons?) (push) (local-ref 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (tailcall 2)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 1) (local-ref 0) (push) (primitive cons?) (if ((const quote) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive car) (local-set 2) (const ()) (push) (local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const quote) (push) (local-ref 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const macroexpand) (push) (make-closure 1 0 ((global-ref cora/init.propagate-boolean) (push) (global-ref cora/init.macroexpand-boot) (push) (local-ref 0) (push) (call 2) (push) (tailcall 2))) (push) (primitive set) (exit)) ((const cora/init.rewrite-begin) (push) (make-closure 1 0 ((reserve-locals 2) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (make-closure 0 8 ((reserve-locals 3) (closure-ref 7) (push) (closure-ref 7) (push) (closure-ref 7) (push) (make-closure 0 3 ((reserve-locals 3) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 2) (push) (primitive cons?) (if ((closure-ref 2) (push) (primitive car) (local-set 1) (closure-ref 2) (push) (primitive cdr) (local-set 2) (const do) (push) (local-ref 1) (push) (global-ref cora/init.rewrite-begin) (push) (local-ref 2) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 7) (push) (primitive cons?) (if ((closure-ref 7) (push) (primitive car) (local-set 1) (closure-ref 7) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 7) (push) (primitive cdr) (push) (primitive car) (local-set 2) (const ()) (push) (closure-ref 7) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const do) (push) (local-ref 1) (push) (local-ref 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 1) (local-ref 0) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive car) (local-set 2) (const ()) (push) (local-ref 0) (push) (primitive cdr) (push) (primitive =) (if ((local-ref 2) (exit)) ((local-ref 1) (push) (tailcall 1)))) ((local-ref 1) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (push) (const begin) (push) (make-closure 1 0 ((global-ref cora/init.rewrite-begin) (push) (local-ref 0) (push) (primitive cdr) (push) (tailcall 2))) (push) (tailcall 3)) ((const ()) (exit)))