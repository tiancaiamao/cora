(((const cora/lib/compile.assq) (push) (make-closure 2 0 ((reserve-locals 2) (local-ref 1) (push) (local-ref 1) (push) (local-ref 1) (push) (local-ref 1) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 1) (push) (local-ref 1) (push) (local-ref 0) (push) (make-closure 0 10 ((reserve-locals 5) (closure-ref 8) (push) (closure-ref 8) (push) (closure-ref 8) (push) (closure-ref 9) (push) (make-closure 0 4 ((reserve-locals 4) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 3) (local-set 1) (closure-ref 2) (push) (primitive cons?) (if ((closure-ref 2) (push) (primitive car) (local-set 2) (closure-ref 2) (push) (primitive cdr) (local-set 3) (global-ref cora/lib/compile.assq) (push) (local-ref 1) (push) (local-ref 3) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 9) (local-set 1) (closure-ref 8) (push) (primitive cons?) (if ((closure-ref 8) (push) (primitive car) (push) (primitive cons?) (if ((closure-ref 8) (push) (primitive car) (push) (primitive car) (local-set 2) (closure-ref 8) (push) (primitive car) (push) (primitive cdr) (local-set 3) (closure-ref 8) (push) (primitive cdr) (local-set 4) (local-ref 1) (push) (local-ref 2) (push) (primitive =) (if ((local-ref 2) (push) (local-ref 3) (push) (primitive cons) (exit)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 2) (local-ref 0) (local-set 3) (const ()) (push) (local-ref 1) (push) (primitive =) (if ((const ()) (exit)) ((local-ref 2) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/lib/compile.const?) (push) (make-closure 1 0 ((global-ref null?) (push) (local-ref 0) (push) (call 2) (if ((const true) (exit)) ((global-ref boolean?) (push) (local-ref 0) (push) (call 2) (if ((const true) (exit)) ((local-ref 0) (push) (primitive integer?) (if ((const true) (exit)) ((local-ref 0) (push) (primitive string?) (if ((const true) (exit)) ((const false) (exit))))))))))) (push) (primitive set) (exit)) ((const cora/lib/compile.index-h) (push) (make-closure 4 0 ((reserve-locals 4) (local-ref 3) (push) (local-ref 2) (push) (local-ref 1) (push) (local-ref 1) (push) (local-ref 1) (push) (local-ref 0) (push) (make-closure 0 6 ((reserve-locals 6) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 5) (local-set 1) (closure-ref 4) (push) (primitive cons?) (if ((closure-ref 4) (push) (primitive car) (local-set 2) (closure-ref 4) (push) (primitive cdr) (local-set 3) (closure-ref 1) (local-set 4) (closure-ref 0) (local-set 5) (global-ref cora/lib/compile.index-h) (push) (local-ref 1) (push) (local-ref 3) (push) (local-ref 4) (push) (const 1) (push) (primitive +) (push) (local-ref 1) (push) (local-ref 2) (push) (primitive =) (if ((local-ref 4) (push) (tailcall 5)) ((local-ref 5) (push) (tailcall 5)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 4) (local-ref 0) (local-set 5) (const ()) (push) (local-ref 1) (push) (primitive =) (if ((local-ref 2) (local-set 6) (local-ref 3) (local-set 7) (local-ref 7) (exit)) ((local-ref 4) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/lib/compile.index) (push) (make-closure 2 0 ((global-ref cora/lib/compile.index-h) (push) (local-ref 0) (push) (local-ref 1) (push) (const 0) (push) (const -1) (push) (tailcall 5))) (push) (primitive set) (exit)) ((const cora/lib/compile.exist-in-env) (push) (make-closure 2 0 ((reserve-locals 2) (local-ref 1) (push) (local-ref 1) (push) (local-ref 1) (push) (local-ref 0) (push) (make-closure 0 4 ((reserve-locals 4) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 3) (local-set 1) (closure-ref 2) (push) (primitive cons?) (if ((closure-ref 2) (push) (primitive car) (local-set 2) (closure-ref 2) (push) (primitive cdr) (local-set 3) (global-ref cora/lib/compile.index) (push) (local-ref 1) (push) (local-ref 2) (push) (call 3) (push) (const 0) (push) (primitive <) (if ((global-ref cora/lib/compile.exist-in-env) (push) (local-ref 1) (push) (local-ref 3) (push) (tailcall 3)) ((const true) (exit)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 2) (local-ref 0) (local-set 3) (const ()) (push) (local-ref 1) (push) (primitive =) (if ((const false) (exit)) ((local-ref 2) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/lib/compile.member) (push) (make-closure 2 0 ((reserve-locals 2) (local-ref 1) (push) (local-ref 1) (push) (local-ref 1) (push) (local-ref 0) (push) (make-closure 0 4 ((reserve-locals 4) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 3) (local-set 1) (closure-ref 2) (push) (primitive cons?) (if ((closure-ref 2) (push) (primitive car) (local-set 2) (closure-ref 2) (push) (primitive cdr) (local-set 3) (local-ref 1) (push) (local-ref 2) (push) (primitive =) (if ((const true) (exit)) ((global-ref cora/lib/compile.member) (push) (local-ref 1) (push) (local-ref 3) (push) (call 3) (if ((const true) (exit)) ((const false) (exit)))))) ((local-ref 0) (push) (tailcall 1))))) (local-set 2) (local-ref 0) (local-set 3) (const ()) (push) (local-ref 1) (push) (primitive =) (if ((const false) (exit)) ((local-ref 2) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/lib/compile.set-diff) (push) (make-closure 2 0 ((global-ref filter) (push) (local-ref 1) (push) (make-closure 1 1 ((global-ref cora/lib/compile.member) (push) (local-ref 0) (push) (closure-ref 0) (push) (call 3) (push) (primitive not) (exit))) (push) (local-ref 0) (push) (tailcall 3))) (push) (primitive set) (exit)) ((const cora/lib/compile.closure-convert-list) (push) (make-closure 6 0 ((reserve-locals 6) (local-ref 5) (push) (local-ref 4) (push) (local-ref 3) (push) (local-ref 2) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (make-closure 0 8 ((reserve-locals 13) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 7) (push) (primitive cons?) (if ((closure-ref 7) (push) (primitive car) (local-set 1) (closure-ref 7) (push) (primitive cdr) (local-set 2) (closure-ref 4) (local-set 3) (closure-ref 3) (local-set 4) (closure-ref 2) (local-set 5) (closure-ref 1) (local-set 6) (closure-ref 0) (local-set 7) (global-ref cora/lib/compile.closure-convert) (push) (local-ref 1) (push) (local-ref 3) (push) (local-ref 4) (push) (local-ref 5) (push) (local-ref 6) (push) (call 6) (local-set 8) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 9) (local-ref 8) (push) (primitive cons?) (if ((local-ref 8) (push) (primitive car) (local-set 10) (local-ref 8) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 8) (push) (primitive cdr) (push) (primitive car) (local-set 11) (local-ref 8) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 8) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 12) (const ()) (push) (local-ref 8) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((global-ref cora/lib/compile.closure-convert-list) (push) (local-ref 2) (push) (local-ref 3) (push) (local-ref 4) (push) (local-ref 11) (push) (local-ref 12) (push) (local-ref 10) (push) (local-ref 7) (push) (primitive cons) (push) (tailcall 7)) ((local-ref 9) (push) (tailcall 1)))) ((local-ref 9) (push) (tailcall 1)))) ((local-ref 9) (push) (tailcall 1)))) ((local-ref 9) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 6) (const ()) (push) (local-ref 0) (push) (primitive =) (if ((local-ref 1) (local-set 7) (local-ref 2) (local-set 8) (local-ref 3) (local-set 9) (local-ref 4) (local-set 10) (local-ref 5) (local-set 11) (global-ref reverse) (push) (local-ref 11) (push) (call 2) (push) (local-ref 9) (push) (local-ref 10) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 6) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/lib/compile.*builtin-prims*) (push) (const set) (push) (const 2) (push) (primitive cons) (push) (const car) (push) (const 1) (push) (primitive cons) (push) (const cdr) (push) (const 1) (push) (primitive cons) (push) (const cons) (push) (const 2) (push) (primitive cons) (push) (const cons?) (push) (const 1) (push) (primitive cons) (push) (const +) (push) (const 2) (push) (primitive cons) (push) (const -) (push) (const 2) (push) (primitive cons) (push) (const *) (push) (const 2) (push) (primitive cons) (push) (const /) (push) (const 2) (push) (primitive cons) (push) (const =) (push) (const 2) (push) (primitive cons) (push) (const >) (push) (const 2) (push) (primitive cons) (push) (const <) (push) (const 2) (push) (primitive cons) (push) (const gensym) (push) (const 1) (push) (primitive cons) (push) (const symbol?) (push) (const 1) (push) (primitive cons) (push) (const not) (push) (const 1) (push) (primitive cons) (push) (const integer?) (push) (const 1) (push) (primitive cons) (push) (const string?) (push) (const 1) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive set) (exit)) ((const temp-list) (push) (make-closure 2 0 ((reserve-locals 2) (local-ref 1) (push) (local-ref 0) (push) (make-closure 0 2 ((reserve-locals 3) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 1) (local-set 1) (closure-ref 0) (local-set 2) (global-ref temp-list) (push) (local-ref 1) (push) (const 1) (push) (primitive -) (push) (const tmp) (push) (primitive gensym) (push) (local-ref 2) (push) (primitive cons) (push) (tailcall 3))) (local-set 2) (const 0) (push) (local-ref 0) (push) (primitive =) (if ((local-ref 1) (local-set 3) (local-ref 3) (exit)) ((local-ref 2) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/lib/compile.closure-convert) (push) (make-closure 5 0 ((reserve-locals 28) (global-ref cora/lib/compile.const?) (push) (local-ref 0) (push) (call 2) (if ((local-ref 0) (push) (local-ref 3) (push) (local-ref 4) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 0) (push) (primitive symbol?) (if ((global-ref cora/lib/compile.index) (push) (local-ref 0) (push) (local-ref 1) (push) (call 3) (local-set 5) (local-ref 5) (push) (const 0) (push) (primitive <) (if ((global-ref cora/lib/compile.exist-in-env) (push) (local-ref 0) (push) (local-ref 2) (push) (call 3) (if ((local-ref 0) (push) (local-ref 0) (push) (local-ref 3) (push) (primitive cons) (push) (local-ref 4) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 0) (push) (local-ref 3) (push) (local-ref 4) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)))) ((local-ref 0) (push) (local-ref 3) (push) (local-ref 4) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)))) ((local-ref 0) (push) (primitive cons?) (push) (primitive not) (if ((global-ref error) (push) (const "assert fail") (push) (tailcall 2)) ((const quote) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((local-ref 0) (push) (local-ref 3) (push) (local-ref 4) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((const lambda) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((global-ref cadr) (push) (local-ref 0) (push) (call 2) (local-set 5) (global-ref caddr) (push) (local-ref 0) (push) (call 2) (local-set 6) (global-ref cora/lib/compile.closure-convert) (push) (local-ref 6) (push) (local-ref 5) (push) (local-ref 1) (push) (local-ref 2) (push) (primitive cons) (push) (const ()) (push) (const 0) (push) (call 6) (local-set 7) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 8) (local-ref 7) (push) (primitive cons?) (if ((local-ref 7) (push) (primitive car) (local-set 9) (local-ref 7) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 7) (push) (primitive cdr) (push) (primitive car) (local-set 10) (local-ref 7) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 7) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 11) (const ()) (push) (local-ref 7) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const lambda) (push) (local-ref 5) (push) (local-ref 10) (push) (local-ref 11) (push) (local-ref 9) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (global-ref append) (push) (global-ref cora/lib/compile.set-diff) (push) (local-ref 10) (push) (local-ref 1) (push) (call 3) (push) (local-ref 3) (push) (call 3) (push) (local-ref 4) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 8) (push) (tailcall 1)))) ((local-ref 8) (push) (tailcall 1)))) ((local-ref 8) (push) (tailcall 1)))) ((local-ref 8) (push) (tailcall 1)))) ((const let) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((global-ref cadr) (push) (local-ref 0) (push) (call 2) (local-set 5) (global-ref caddr) (push) (local-ref 0) (push) (call 2) (local-set 6) (global-ref cadddr) (push) (local-ref 0) (push) (call 2) (local-set 7) (global-ref cora/lib/compile.closure-convert) (push) (local-ref 6) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (local-ref 4) (push) (call 6) (local-set 8) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 9) (local-ref 8) (push) (primitive cons?) (if ((local-ref 8) (push) (primitive car) (local-set 10) (local-ref 8) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 8) (push) (primitive cdr) (push) (primitive car) (local-set 11) (local-ref 8) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 8) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 12) (const ()) (push) (local-ref 8) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((local-ref 4) (push) (const 1) (push) (primitive +) (push) (local-ref 12) (push) (primitive >) (if ((local-ref 4) (push) (const 1) (push) (primitive +) (local-set 13) (global-ref cora/lib/compile.closure-convert) (push) (local-ref 7) (push) (local-ref 5) (push) (local-ref 1) (push) (primitive cons) (push) (local-ref 2) (push) (local-ref 11) (push) (local-ref 13) (push) (call 6) (local-set 14) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 15) (local-ref 14) (push) (primitive cons?) (if ((local-ref 14) (push) (primitive car) (local-set 16) (local-ref 14) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 14) (push) (primitive cdr) (push) (primitive car) (local-set 17) (local-ref 14) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 14) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 18) (const ()) (push) (local-ref 14) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const let) (push) (local-ref 5) (push) (local-ref 10) (push) (local-ref 16) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 17) (push) (local-ref 18) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 15) (push) (tailcall 1)))) ((local-ref 15) (push) (tailcall 1)))) ((local-ref 15) (push) (tailcall 1)))) ((local-ref 15) (push) (tailcall 1)))) ((local-ref 12) (local-set 13) (global-ref cora/lib/compile.closure-convert) (push) (local-ref 7) (push) (local-ref 5) (push) (local-ref 1) (push) (primitive cons) (push) (local-ref 2) (push) (local-ref 11) (push) (local-ref 13) (push) (call 6) (local-set 14) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 15) (local-ref 14) (push) (primitive cons?) (if ((local-ref 14) (push) (primitive car) (local-set 16) (local-ref 14) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 14) (push) (primitive cdr) (push) (primitive car) (local-set 17) (local-ref 14) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 14) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 18) (const ()) (push) (local-ref 14) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((const let) (push) (local-ref 5) (push) (local-ref 10) (push) (local-ref 16) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 17) (push) (local-ref 18) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (exit)) ((local-ref 15) (push) (tailcall 1)))) ((local-ref 15) (push) (tailcall 1)))) ((local-ref 15) (push) (tailcall 1)))) ((local-ref 15) (push) (tailcall 1)))))) ((local-ref 9) (push) (tailcall 1)))) ((local-ref 9) (push) (tailcall 1)))) ((local-ref 9) (push) (tailcall 1)))) ((local-ref 9) (push) (tailcall 1)))) ((local-ref 0) (push) (primitive car) (push) (primitive symbol?) (if ((local-ref 0) (push) (primitive car) (local-set 5) (local-ref 0) (push) (primitive cdr) (local-set 6) (global-ref cora/lib/compile.assq) (push) (local-ref 5) (push) (global-ref cora/lib/compile.*builtin-prims*) (push) (call 3) (local-set 7) (global-ref null?) (push) (local-ref 7) (push) (call 2) (push) (primitive not) (if ((global-ref length) (push) (local-ref 6) (push) (call 2) (push) (local-ref 7) (push) (primitive cdr) (push) (primitive <) (if ((const true) (if ((global-ref temp-list) (push) (local-ref 7) (push) (primitive cdr) (push) (global-ref length) (push) (local-ref 6) (push) (call 2) (push) (primitive -) (push) (const ()) (push) (call 3) (local-set 8) (global-ref cora/lib/compile.closure-convert) (push) (const lambda) (push) (local-ref 8) (push) (global-ref append) (push) (local-ref 5) (push) (local-ref 6) (push) (primitive cons) (push) (local-ref 8) (push) (call 3) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (local-ref 4) (push) (tailcall 6)) ((global-ref cora/lib/compile.closure-convert-list) (push) (local-ref 5) (push) (local-ref 6) (push) (primitive cons) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (local-ref 4) (push) (const ()) (push) (tailcall 7)))) ((const false) (if ((global-ref temp-list) (push) (local-ref 7) (push) (primitive cdr) (push) (global-ref length) (push) (local-ref 6) (push) (call 2) (push) (primitive -) (push) (const ()) (push) (call 3) (local-set 8) (global-ref cora/lib/compile.closure-convert) (push) (const lambda) (push) (local-ref 8) (push) (global-ref append) (push) (local-ref 5) (push) (local-ref 6) (push) (primitive cons) (push) (local-ref 8) (push) (call 3) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (local-ref 4) (push) (tailcall 6)) ((global-ref cora/lib/compile.closure-convert-list) (push) (local-ref 5) (push) (local-ref 6) (push) (primitive cons) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (local-ref 4) (push) (const ()) (push) (tailcall 7)))))) ((const false) (if ((global-ref temp-list) (push) (local-ref 7) (push) (primitive cdr) (push) (global-ref length) (push) (local-ref 6) (push) (call 2) (push) (primitive -) (push) (const ()) (push) (call 3) (local-set 8) (global-ref cora/lib/compile.closure-convert) (push) (const lambda) (push) (local-ref 8) (push) (global-ref append) (push) (local-ref 5) (push) (local-ref 6) (push) (primitive cons) (push) (local-ref 8) (push) (call 3) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (local-ref 4) (push) (tailcall 6)) ((global-ref cora/lib/compile.closure-convert-list) (push) (local-ref 5) (push) (local-ref 6) (push) (primitive cons) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (local-ref 4) (push) (const ()) (push) (tailcall 7)))))) ((local-ref 0) (push) (primitive car) (local-set 5) (local-ref 0) (push) (primitive cdr) (local-set 6) (global-ref cora/lib/compile.closure-convert-list) (push) (local-ref 5) (push) (local-ref 6) (push) (primitive cons) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (local-ref 4) (push) (const ()) (push) (tailcall 7))))))))))))))))) (push) (primitive set) (exit)) ((const cora/lib/compile.compile) (push) (make-closure 4 0 ((reserve-locals 20) (global-ref cora/lib/compile.const?) (push) (local-ref 0) (push) (call 2) (if ((const const) (push) (local-ref 0) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 3) (push) (primitive cons) (exit)) ((local-ref 0) (push) (primitive symbol?) (if ((global-ref cora/lib/compile.index) (push) (local-ref 0) (push) (local-ref 1) (push) (call 3) (local-set 4) (local-ref 4) (push) (const 0) (push) (primitive <) (if ((global-ref cora/lib/compile.index) (push) (local-ref 0) (push) (local-ref 2) (push) (call 3) (local-set 5) (local-ref 5) (push) (const 0) (push) (primitive <) (if ((const global-ref) (push) (local-ref 0) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 3) (push) (primitive cons) (exit)) ((const closure-ref) (push) (local-ref 5) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 3) (push) (primitive cons) (exit)))) ((const local-ref) (push) (local-ref 4) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 3) (push) (primitive cons) (exit)))) ((const quote) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((const const) (push) (global-ref cadr) (push) (local-ref 0) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 3) (push) (primitive cons) (exit)) ((const if) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((global-ref cadr) (push) (local-ref 0) (push) (call 2) (local-set 4) (global-ref caddr) (push) (local-ref 0) (push) (call 2) (local-set 5) (global-ref cadddr) (push) (local-ref 0) (push) (call 2) (local-set 6) (global-ref cora/lib/compile.compile) (push) (local-ref 5) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (call 5) (local-set 7) (global-ref cora/lib/compile.compile) (push) (local-ref 6) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (call 5) (local-set 8) (global-ref cora/lib/compile.compile) (push) (local-ref 4) (push) (local-ref 1) (push) (local-ref 2) (push) (const if) (push) (local-ref 7) (push) (local-ref 8) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (tailcall 5)) ((const do) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((global-ref cadr) (push) (local-ref 0) (push) (call 2) (local-set 4) (global-ref caddr) (push) (local-ref 0) (push) (call 2) (local-set 5) (global-ref cora/lib/compile.compile) (push) (local-ref 4) (push) (local-ref 1) (push) (local-ref 2) (push) (global-ref cora/lib/compile.compile) (push) (local-ref 5) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (call 5) (push) (tailcall 5)) ((const let) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((global-ref cadr) (push) (local-ref 0) (push) (call 2) (local-set 4) (global-ref caddr) (push) (local-ref 0) (push) (call 2) (local-set 5) (global-ref cadddr) (push) (local-ref 0) (push) (call 2) (local-set 6) (global-ref cora/lib/compile.compile) (push) (local-ref 6) (push) (global-ref append) (push) (local-ref 1) (push) (local-ref 4) (push) (const ()) (push) (primitive cons) (push) (call 3) (push) (local-ref 2) (push) (local-ref 3) (push) (call 5) (local-set 7) (global-ref cora/lib/compile.compile) (push) (local-ref 5) (push) (local-ref 1) (push) (local-ref 2) (push) (const local-set) (push) (global-ref length) (push) (local-ref 1) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 7) (push) (primitive cons) (push) (tailcall 5)) ((const lambda) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 4) (local-ref 0) (push) (primitive cons?) (if ((const lambda) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive car) (local-set 5) (local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 6) (local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 7) (local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 8) (const ()) (push) (local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((global-ref cora/lib/compile.compile) (push) (local-ref 8) (push) (local-ref 5) (push) (local-ref 6) (push) (const exit) (push) (const ()) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (call 5) (local-set 9) (local-ref 7) (push) (const 0) (push) (primitive =) (if ((local-ref 9) (local-set 10) (global-ref cora/lib/compile.compile-list) (push) (local-ref 6) (push) (local-ref 1) (push) (local-ref 2) (push) (const make-closure) (push) (global-ref length) (push) (local-ref 5) (push) (call 2) (push) (global-ref length) (push) (local-ref 6) (push) (call 2) (push) (local-ref 10) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 3) (push) (primitive cons) (push) (tailcall 5)) ((const reserve-locals) (push) (local-ref 7) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 9) (push) (primitive cons) (local-set 10) (global-ref cora/lib/compile.compile-list) (push) (local-ref 6) (push) (local-ref 1) (push) (local-ref 2) (push) (const make-closure) (push) (global-ref length) (push) (local-ref 5) (push) (call 2) (push) (global-ref length) (push) (local-ref 6) (push) (call 2) (push) (local-ref 10) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 3) (push) (primitive cons) (push) (tailcall 5)))) ((local-ref 4) (push) (tailcall 1)))) ((local-ref 4) (push) (tailcall 1)))) ((local-ref 4) (push) (tailcall 1)))) ((local-ref 4) (push) (tailcall 1)))) ((local-ref 4) (push) (tailcall 1)))) ((local-ref 4) (push) (tailcall 1)))) ((local-ref 4) (push) (tailcall 1)))) ((global-ref cora/lib/compile.compile-call) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (tailcall 5))))))))))))))))) (push) (primitive set) (exit)) ((const cora/lib/compile.compile-call) (push) (make-closure 4 0 ((reserve-locals 6) (local-ref 3) (push) (local-ref 3) (push) (local-ref 3) (push) (local-ref 3) (push) (local-ref 3) (push) (local-ref 2) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 3) (push) (local-ref 2) (push) (local-ref 1) (push) (local-ref 0) (push) (make-closure 0 12 ((reserve-locals 4) (closure-ref 8) (push) (closure-ref 9) (push) (closure-ref 10) (push) (closure-ref 11) (push) (make-closure 0 4 ((reserve-locals 5) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 3) (local-set 1) (closure-ref 2) (local-set 2) (closure-ref 1) (local-set 3) (closure-ref 0) (local-set 4) (global-ref cora/lib/compile.compile-list) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (const call) (push) (global-ref length) (push) (local-ref 1) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 4) (push) (primitive cons) (push) (tailcall 5))) (local-set 0) (closure-ref 11) (local-set 1) (closure-ref 10) (local-set 2) (closure-ref 9) (local-set 3) (closure-ref 8) (push) (primitive cons?) (if ((closure-ref 8) (push) (primitive car) (push) (primitive cons?) (if ((const exit) (push) (closure-ref 8) (push) (primitive car) (push) (primitive car) (push) (primitive =) (if ((const ()) (push) (closure-ref 8) (push) (primitive car) (push) (primitive cdr) (push) (primitive =) (if ((const ()) (push) (closure-ref 8) (push) (primitive cdr) (push) (primitive =) (if ((global-ref cora/lib/compile.compile-list) (push) (local-ref 1) (push) (local-ref 2) (push) (local-ref 3) (push) (const tailcall) (push) (global-ref length) (push) (local-ref 1) (push) (call 2) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (tailcall 5)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 4) (local-ref 0) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive car) (local-set 5) (local-ref 0) (push) (primitive cdr) (local-set 6) (local-ref 1) (local-set 7) (local-ref 2) (local-set 8) (local-ref 3) (local-set 9) (local-ref 5) (push) (primitive symbol?) (if ((global-ref null?) (push) (global-ref cora/lib/compile.assq) (push) (local-ref 5) (push) (global-ref cora/lib/compile.*builtin-prims*) (push) (call 3) (push) (call 2) (push) (primitive not) (if ((const true) (if ((global-ref cora/lib/compile.compile-list) (push) (local-ref 6) (push) (local-ref 7) (push) (local-ref 8) (push) (const primitive) (push) (local-ref 5) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 9) (push) (primitive cons) (push) (tailcall 5)) ((local-ref 4) (push) (tailcall 1)))) ((const false) (if ((global-ref cora/lib/compile.compile-list) (push) (local-ref 6) (push) (local-ref 7) (push) (local-ref 8) (push) (const primitive) (push) (local-ref 5) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 9) (push) (primitive cons) (push) (tailcall 5)) ((local-ref 4) (push) (tailcall 1)))))) ((const false) (if ((global-ref cora/lib/compile.compile-list) (push) (local-ref 6) (push) (local-ref 7) (push) (local-ref 8) (push) (const primitive) (push) (local-ref 5) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 9) (push) (primitive cons) (push) (tailcall 5)) ((local-ref 4) (push) (tailcall 1)))))) ((local-ref 4) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/lib/compile.compile-list) (push) (make-closure 4 0 ((reserve-locals 4) (local-ref 3) (push) (local-ref 2) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (make-closure 0 6 ((reserve-locals 6) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 5) (push) (primitive cons?) (if ((closure-ref 5) (push) (primitive car) (local-set 1) (closure-ref 5) (push) (primitive cdr) (local-set 2) (closure-ref 2) (local-set 3) (closure-ref 1) (local-set 4) (closure-ref 0) (local-set 5) (global-ref cora/lib/compile.compile) (push) (local-ref 1) (push) (local-ref 3) (push) (local-ref 4) (push) (const push) (push) (const ()) (push) (primitive cons) (push) (global-ref cora/lib/compile.compile-list) (push) (local-ref 2) (push) (local-ref 3) (push) (local-ref 4) (push) (local-ref 5) (push) (call 5) (push) (primitive cons) (push) (tailcall 5)) ((local-ref 0) (push) (tailcall 1))))) (local-set 4) (const ()) (push) (local-ref 0) (push) (primitive =) (if ((local-ref 1) (local-set 5) (local-ref 2) (local-set 6) (local-ref 3) (local-set 7) (local-ref 7) (exit)) ((local-ref 4) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/lib/compile.cc) (push) (make-closure 1 0 ((reserve-locals 6) (global-ref cora/lib/compile.closure-convert) (push) (local-ref 0) (push) (const ()) (push) (const ()) (push) (const ()) (push) (const 0) (push) (call 6) (local-set 1) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 2) (local-ref 1) (push) (primitive cons?) (if ((local-ref 1) (push) (primitive car) (local-set 3) (local-ref 1) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 1) (push) (primitive cdr) (push) (primitive car) (local-set 4) (local-ref 1) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 1) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 5) (const ()) (push) (local-ref 1) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((global-ref cora/lib/compile.compile) (push) (local-ref 3) (push) (const ()) (push) (const ()) (push) (const exit) (push) (const ()) (push) (primitive cons) (push) (const ()) (push) (primitive cons) (push) (call 5) (local-set 6) (local-ref 5) (push) (const 0) (push) (primitive =) (if ((local-ref 6) (exit)) ((const reserve-locals) (push) (local-ref 5) (push) (const ()) (push) (primitive cons) (push) (primitive cons) (push) (local-ref 6) (push) (primitive cons) (exit)))) ((local-ref 2) (push) (tailcall 1)))) ((local-ref 2) (push) (tailcall 1)))) ((local-ref 2) (push) (tailcall 1)))) ((local-ref 2) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/lib/compile.bytecode-to-exec) (push) (make-closure 1 0 ((reserve-locals 1) (global-ref cora/lib/compile.c-make-program) (push) (call 1) (local-set 1) (global-ref cora/lib/compile.to-exec-many) (push) (local-ref 0) (push) (local-ref 1) (push) (call 3) (local-ref 1) (exit))) (push) (primitive set) (exit)) ((const for-each) (push) (make-closure 2 0 ((reserve-locals 2) (local-ref 1) (push) (local-ref 1) (push) (local-ref 1) (push) (local-ref 0) (push) (make-closure 0 4 ((reserve-locals 4) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 3) (local-set 1) (closure-ref 2) (push) (primitive cons?) (if ((closure-ref 2) (push) (primitive car) (local-set 2) (closure-ref 2) (push) (primitive cdr) (local-set 3) (local-ref 1) (push) (local-ref 2) (push) (call 2) (global-ref for-each) (push) (local-ref 1) (push) (local-ref 3) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1))))) (local-set 2) (local-ref 0) (local-set 3) (const ()) (push) (local-ref 1) (push) (primitive =) (if ((const ()) (exit)) ((local-ref 2) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/lib/compile.to-exec-many) (push) (make-closure 2 0 ((global-ref for-each) (push) (local-ref 1) (push) (make-closure 1 1 ((global-ref cora/lib/compile.to-exec) (push) (local-ref 0) (push) (closure-ref 0) (push) (tailcall 3))) (push) (local-ref 0) (push) (tailcall 3))) (push) (primitive set) (exit)) ((const cora/lib/compile.to-exec) (push) (make-closure 2 0 ((reserve-locals 3) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 1) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (local-ref 0) (push) (make-closure 0 74 ((reserve-locals 3) (closure-ref 68) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 68) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 68) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 68) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 68) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 68) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 68) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 68) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 68) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 68) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 68) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (closure-ref 73) (push) (make-closure 0 68 ((reserve-locals 3) (closure-ref 62) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 62) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 62) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 62) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 62) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 62) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 62) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 62) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 62) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 62) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (closure-ref 67) (push) (make-closure 0 62 ((reserve-locals 3) (closure-ref 56) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 56) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 56) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 56) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 56) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 56) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 56) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 56) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 56) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (closure-ref 61) (push) (make-closure 0 56 ((reserve-locals 5) (closure-ref 50) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 50) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 50) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 50) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 50) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 50) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 50) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 50) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (closure-ref 55) (push) (make-closure 0 48 ((reserve-locals 6) (closure-ref 42) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 42) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 42) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 42) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 42) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 42) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 42) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (closure-ref 47) (push) (make-closure 0 38 ((reserve-locals 3) (closure-ref 32) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 32) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 32) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 32) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 32) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 32) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (closure-ref 37) (push) (make-closure 0 32 ((reserve-locals 3) (closure-ref 26) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 26) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 26) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 26) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 26) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 31) (push) (closure-ref 31) (push) (make-closure 0 26 ((reserve-locals 2) (closure-ref 20) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 20) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 20) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 20) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 25) (push) (closure-ref 25) (push) (make-closure 0 22 ((reserve-locals 2) (closure-ref 16) (push) (closure-ref 21) (push) (closure-ref 21) (push) (closure-ref 21) (push) (closure-ref 21) (push) (closure-ref 21) (push) (closure-ref 16) (push) (closure-ref 21) (push) (closure-ref 21) (push) (closure-ref 21) (push) (closure-ref 21) (push) (closure-ref 21) (push) (closure-ref 16) (push) (closure-ref 21) (push) (closure-ref 21) (push) (closure-ref 21) (push) (closure-ref 21) (push) (closure-ref 21) (push) (make-closure 0 18 ((reserve-locals 3) (closure-ref 12) (push) (closure-ref 17) (push) (closure-ref 17) (push) (closure-ref 17) (push) (closure-ref 17) (push) (closure-ref 17) (push) (closure-ref 12) (push) (closure-ref 17) (push) (closure-ref 17) (push) (closure-ref 17) (push) (closure-ref 17) (push) (closure-ref 17) (push) (make-closure 0 12 ((reserve-locals 3) (closure-ref 6) (push) (closure-ref 11) (push) (closure-ref 11) (push) (closure-ref 11) (push) (closure-ref 11) (push) (closure-ref 11) (push) (make-closure 0 6 ((reserve-locals 3) (make-closure 0 0 ((global-ref error) (push) (const "no match-help found!") (push) (tailcall 2))) (local-set 0) (closure-ref 5) (push) (primitive cons?) (if ((const primitive) (push) (closure-ref 5) (push) (primitive car) (push) (primitive =) (if ((closure-ref 5) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 5) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 5) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 0) (local-set 2) (global-ref cora/lib/compile.c-prog-append-prim) (push) (local-ref 2) (push) (local-ref 1) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 11) (push) (primitive cons?) (if ((const local-set) (push) (closure-ref 11) (push) (primitive car) (push) (primitive =) (if ((closure-ref 11) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 11) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 11) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 6) (local-set 2) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 2) (push) (global-ref cora/lib/compile.c-opLocalSet) (push) (call 3) (global-ref cora/lib/compile.c-prog-append-int32) (push) (local-ref 2) (push) (local-ref 1) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 17) (push) (primitive cons?) (if ((const reserve-locals) (push) (closure-ref 17) (push) (primitive car) (push) (primitive =) (if ((closure-ref 17) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 17) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 17) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 12) (local-set 2) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 2) (push) (global-ref cora/lib/compile.c-opReserveLocals) (push) (call 3) (global-ref cora/lib/compile.c-prog-append-int32) (push) (local-ref 2) (push) (local-ref 1) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 21) (push) (primitive cons?) (if ((const exit) (push) (closure-ref 21) (push) (primitive car) (push) (primitive =) (if ((const ()) (push) (closure-ref 21) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 16) (local-set 1) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 1) (push) (global-ref cora/lib/compile.c-opExit) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 25) (push) (primitive cons?) (if ((const push) (push) (closure-ref 25) (push) (primitive car) (push) (primitive =) (if ((const ()) (push) (closure-ref 25) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 20) (local-set 1) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 1) (push) (global-ref cora/lib/compile.c-opPush) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 31) (push) (primitive cons?) (if ((const call) (push) (closure-ref 31) (push) (primitive car) (push) (primitive =) (if ((closure-ref 31) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 31) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 31) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 26) (local-set 2) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 2) (push) (global-ref cora/lib/compile.c-opCall) (push) (call 3) (global-ref cora/lib/compile.c-prog-append-int32) (push) (local-ref 2) (push) (local-ref 1) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 37) (push) (primitive cons?) (if ((const tailcall) (push) (closure-ref 37) (push) (primitive car) (push) (primitive =) (if ((closure-ref 37) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 37) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 37) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 32) (local-set 2) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 2) (push) (global-ref cora/lib/compile.c-opTailCall) (push) (call 3) (global-ref cora/lib/compile.c-prog-append-int32) (push) (local-ref 2) (push) (local-ref 1) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 47) (push) (primitive cons?) (if ((const make-closure) (push) (closure-ref 47) (push) (primitive car) (push) (primitive =) (if ((closure-ref 47) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 47) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 47) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 47) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 2) (closure-ref 47) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 47) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 3) (const ()) (push) (closure-ref 47) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 42) (local-set 4) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 4) (push) (global-ref cora/lib/compile.c-opMakeClosure) (push) (call 3) (global-ref cora/lib/compile.c-prog-append-int32) (push) (local-ref 4) (push) (local-ref 1) (push) (call 3) (global-ref cora/lib/compile.c-prog-append-int32) (push) (local-ref 4) (push) (local-ref 2) (push) (call 3) (global-ref cora/lib/compile.c-prog-prepare-size) (push) (local-ref 4) (push) (call 2) (local-set 5) (global-ref cora/lib/compile.to-exec-many) (push) (local-ref 3) (push) (local-ref 4) (push) (call 3) (global-ref cora/lib/compile.c-prog-write-back-size) (push) (local-ref 4) (push) (local-ref 5) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 55) (push) (primitive cons?) (if ((const if) (push) (closure-ref 55) (push) (primitive car) (push) (primitive =) (if ((closure-ref 55) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 55) (push) (primitive cdr) (push) (primitive car) (local-set 1) (closure-ref 55) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 55) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive car) (local-set 2) (const ()) (push) (closure-ref 55) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 50) (local-set 3) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 3) (push) (global-ref cora/lib/compile.c-opIf) (push) (call 3) (global-ref cora/lib/compile.c-prog-prepare-size) (push) (local-ref 3) (push) (call 2) (local-set 4) (global-ref cora/lib/compile.to-exec-many) (push) (local-ref 1) (push) (local-ref 3) (push) (call 3) (global-ref cora/lib/compile.c-prog-write-back-size) (push) (local-ref 3) (push) (local-ref 4) (push) (call 3) (global-ref cora/lib/compile.to-exec-many) (push) (local-ref 2) (push) (local-ref 3) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 61) (push) (primitive cons?) (if ((const global-ref) (push) (closure-ref 61) (push) (primitive car) (push) (primitive =) (if ((closure-ref 61) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 61) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 61) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 56) (local-set 2) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 2) (push) (global-ref cora/lib/compile.c-opGlobalRef) (push) (call 3) (global-ref cora/lib/compile.c-prog-append-obj) (push) (local-ref 2) (push) (local-ref 1) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 67) (push) (primitive cons?) (if ((const closure-ref) (push) (closure-ref 67) (push) (primitive car) (push) (primitive =) (if ((closure-ref 67) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 67) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 67) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 62) (local-set 2) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 2) (push) (global-ref cora/lib/compile.c-opClosureRef) (push) (call 3) (global-ref cora/lib/compile.c-prog-append-int32) (push) (local-ref 2) (push) (local-ref 1) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 0) (closure-ref 73) (push) (primitive cons?) (if ((const local-ref) (push) (closure-ref 73) (push) (primitive car) (push) (primitive =) (if ((closure-ref 73) (push) (primitive cdr) (push) (primitive cons?) (if ((closure-ref 73) (push) (primitive cdr) (push) (primitive car) (local-set 1) (const ()) (push) (closure-ref 73) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((closure-ref 68) (local-set 2) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 2) (push) (global-ref cora/lib/compile.c-opLocalRef) (push) (call 3) (global-ref cora/lib/compile.c-prog-append-int32) (push) (local-ref 2) (push) (local-ref 1) (push) (tailcall 3)) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1)))) ((local-ref 0) (push) (tailcall 1))))) (local-set 2) (local-ref 0) (push) (primitive cons?) (if ((const const) (push) (local-ref 0) (push) (primitive car) (push) (primitive =) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive cons?) (if ((local-ref 0) (push) (primitive cdr) (push) (primitive car) (local-set 3) (const ()) (push) (local-ref 0) (push) (primitive cdr) (push) (primitive cdr) (push) (primitive =) (if ((local-ref 1) (local-set 4) (global-ref cora/lib/compile.c-prog-append-op) (push) (local-ref 4) (push) (global-ref cora/lib/compile.c-opConst) (push) (call 3) (global-ref cora/lib/compile.c-prog-append-obj) (push) (local-ref 4) (push) (local-ref 3) (push) (tailcall 3)) ((local-ref 2) (push) (tailcall 1)))) ((local-ref 2) (push) (tailcall 1)))) ((local-ref 2) (push) (tailcall 1)))) ((local-ref 2) (push) (tailcall 1))))) (push) (primitive set) (exit)) ((const cora/lib/compile.eval) (push) (make-closure 1 0 ((global-ref cora/lib/compile.c-prog-run) (push) (global-ref cora/lib/compile.bytecode-to-exec) (push) (global-ref cora/lib/compile.cc) (push) (local-ref 0) (push) (call 2) (push) (call 2) (push) (tailcall 2))) (push) (primitive set) (exit)) ((const ()) (exit)))