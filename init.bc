(((const null?) (make-closure 1 0 ((local-ref 0) (const ()) (primitive =) (exit))) (primitive set) (exit)) ((const cadr) (make-closure 1 0 ((local-ref 0) (primitive cdr) (primitive car) (exit))) (primitive set) (exit)) ((const caar) (make-closure 1 0 ((local-ref 0) (primitive car) (primitive car) (exit))) (primitive set) (exit)) ((const cdar) (make-closure 1 0 ((local-ref 0) (primitive car) (primitive cdr) (exit))) (primitive set) (exit)) ((const cddr) (make-closure 1 0 ((local-ref 0) (primitive cdr) (primitive cdr) (exit))) (primitive set) (exit)) ((const caddr) (make-closure 1 0 ((local-ref 0) (primitive cdr) (primitive cdr) (primitive car) (exit))) (primitive set) (exit)) ((const cadddr) (make-closure 1 0 ((local-ref 0) (primitive cdr) (primitive cdr) (primitive cdr) (primitive car) (exit))) (primitive set) (exit)) ((const cdddr) (make-closure 1 0 ((local-ref 0) (primitive cdr) (primitive cdr) (primitive cdr) (exit))) (primitive set) (exit)) ((const rcons) (make-closure 1 0 ((local-ref 0) (primitive cons?) (if ((const cons) (local-ref 0) (primitive car) (global-ref rcons) (local-ref 0) (primitive cdr) (call 2) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((const ()) (exit))))) (primitive set) (exit)) ((const pair?) (make-closure 1 0 ((local-ref 0) (primitive cons?) (exit))) (primitive set) (exit)) ((const cora/init.reverse-h) (make-closure 2 0 ((local-ref 1) (primitive cons?) (if ((global-ref cora/init.reverse-h) (local-ref 1) (primitive car) (local-ref 0) (primitive cons) (local-ref 1) (primitive cdr) (tailcall 3)) ((local-ref 0) (exit))))) (primitive set) (exit)) ((const reverse) (global-ref cora/init.reverse-h) (const ()) (call 2) (primitive set) (exit)) ((const map-h) (make-closure 3 0 ((local-ref 2) (primitive cons?) (if ((global-ref map-h) (local-ref 1) (local-ref 2) (primitive car) (call 2) (local-ref 0) (primitive cons) (local-ref 1) (local-ref 2) (primitive cdr) (tailcall 4)) ((global-ref reverse) (local-ref 0) (tailcall 2))))) (primitive set) (exit)) ((const map) (make-closure 2 0 ((global-ref map-h) (const ()) (local-ref 0) (local-ref 1) (tailcall 4))) (primitive set) (exit)) ((const *macros*) (const ()) (primitive set) (exit)) ((const *protect-symbol*) (const protect) (primitive gensym) (primitive set) (exit)) ((const cora/init.protect) (make-closure 1 0 ((global-ref *protect-symbol*) (local-ref 0) (primitive cons) (exit))) (primitive set) (exit)) ((const cora/init.add-to-*macros*) (make-closure 2 0 ((const *macros*) (local-ref 0) (local-ref 1) (primitive cons) (global-ref *macros*) (primitive cons) (primitive set) (exit))) (primitive set) (exit)) ((const cora/init.macroexpand1-h) (make-closure 2 0 ((const ()) (local-ref 1) (primitive =) (if ((local-ref 0) (exit)) ((local-ref 1) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (make-closure 1 5 ((closure-ref 4) (primitive cons?) (if ((closure-ref 4) (primitive car) (local-ref 0) (primitive car) (primitive =) (if ((const true) (if ((local-ref 0) (primitive cdr) (closure-ref 4) (tailcall 2)) ((global-ref cora/init.macroexpand1-h) (closure-ref 4) (closure-ref 0) (primitive cdr) (tailcall 3)))) ((const false) (if ((local-ref 0) (primitive cdr) (closure-ref 4) (tailcall 2)) ((global-ref cora/init.macroexpand1-h) (closure-ref 4) (closure-ref 0) (primitive cdr) (tailcall 3)))))) ((const false) (if ((local-ref 0) (primitive cdr) (closure-ref 4) (tailcall 2)) ((global-ref cora/init.macroexpand1-h) (closure-ref 4) (closure-ref 0) (primitive cdr) (tailcall 3))))))) (local-ref 1) (primitive car) (tailcall 2))))) (primitive set) (exit)) ((const cora/init.macroexpand1) (make-closure 1 0 ((global-ref cora/init.macroexpand1-h) (local-ref 0) (global-ref *macros*) (tailcall 3))) (primitive set) (exit)) ((const cora/init.macroexpand-boot) (make-closure 1 0 ((local-ref 0) (primitive cons?) (if ((local-ref 0) (primitive car) (global-ref *protect-symbol*) (primitive =) (if ((local-ref 0) (primitive cdr) (exit)) ((local-ref 0) (primitive car) (const lambda) (primitive =) (if ((const lambda) (global-ref cadr) (local-ref 0) (call 2) (global-ref cora/init.macroexpand-boot) (global-ref caddr) (local-ref 0) (call 2) (call 2) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 0) (primitive car) (const quote) (primitive =) (if ((local-ref 0) (exit)) ((local-ref 0) (make-closure 1 1 ((local-ref 0) (closure-ref 0) (primitive =) (if ((global-ref map) (global-ref cora/init.macroexpand-boot) (local-ref 0) (tailcall 3)) ((global-ref cora/init.macroexpand-boot) (local-ref 0) (tailcall 2))))) (global-ref cora/init.macroexpand1) (local-ref 0) (call 2) (tailcall 2)))))))) ((local-ref 0) (exit))))) (primitive set) (exit)) ((const macroexpand) (global-ref cora/init.macroexpand-boot) (primitive set) (exit)) ((const defmacro-macro) (make-closure 1 0 ((const cora/init.add-to-*macros*) (const quote) (global-ref cadr) (local-ref 0) (call 2) (const ()) (primitive cons) (primitive cons) (const lambda) (global-ref caddr) (local-ref 0) (call 2) (global-ref cdddr) (local-ref 0) (call 2) (primitive cons) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit))) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (const defmacro) (global-ref defmacro-macro) (tailcall 3)) ((global-ref cora/init.add-to-*macros*) (const list) (make-closure 1 0 ((global-ref rcons) (local-ref 0) (primitive cdr) (tailcall 2))) (tailcall 3)) ((global-ref cora/init.add-to-*macros*) (const defun) (make-closure 1 0 ((const set) (const quote) (global-ref cadr) (local-ref 0) (call 2) (const ()) (primitive cons) (primitive cons) (const lambda) (global-ref caddr) (local-ref 0) (call 2) (global-ref cadddr) (local-ref 0) (call 2) (const ()) (primitive cons) (primitive cons) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit))) (tailcall 3)) ((const elem?) (make-closure 2 0 ((local-ref 1) (primitive cons?) (if ((local-ref 1) (primitive car) (local-ref 0) (primitive =) (if ((const true) (exit)) ((global-ref elem?) (local-ref 0) (local-ref 1) (primitive cdr) (tailcall 3)))) ((const false) (exit))))) (primitive set) (exit)) ((const atom?) (make-closure 1 0 ((local-ref 0) (primitive cons?) (primitive not) (exit))) (primitive set) (exit)) ((const cora/init.rewrite-let) (make-closure 1 0 ((global-ref null?) (local-ref 0) (primitive cdr) (call 2) (if ((local-ref 0) (primitive car) (exit)) ((const let) (local-ref 0) (primitive car) (global-ref cadr) (local-ref 0) (call 2) (global-ref cora/init.rewrite-let) (global-ref cddr) (local-ref 0) (call 2) (call 2) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit))))) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (const let) (make-closure 1 0 ((global-ref cora/init.rewrite-let) (local-ref 0) (primitive cdr) (tailcall 2))) (tailcall 3)) ((global-ref cora/init.add-to-*macros*) (const cond) (make-closure 1 0 ((reserve-locals 1) (const ()) (local-ref 0) (primitive cdr) (primitive =) (if ((const error) (const "no cond match") (const ()) (primitive cons) (primitive cons) (exit)) ((global-ref cadr) (local-ref 0) (call 2) (local-set 1) (const if) (local-ref 1) (primitive car) (global-ref cadr) (local-ref 1) (call 2) (const cond) (global-ref cddr) (local-ref 0) (call 2) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit))))) (tailcall 3)) ((const cora/init.rewrite-or) (make-closure 1 0 ((reserve-locals 1) (local-ref 0) (const ()) (primitive =) (if ((const false) (exit)) ((local-ref 0) (primitive car) (const true) (primitive =) (if ((const true) (exit)) ((global-ref cora/init.rewrite-or) (local-ref 0) (primitive cdr) (call 2) (local-set 1) (local-ref 1) (const true) (primitive =) (if ((const true) (exit)) ((const if) (local-ref 0) (primitive car) (const true) (local-ref 1) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit))))))))) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (const or) (make-closure 1 0 ((global-ref cora/init.rewrite-or) (local-ref 0) (primitive cdr) (tailcall 2))) (tailcall 3)) ((const cora/init.rewrite-and) (make-closure 1 0 ((reserve-locals 1) (const ()) (local-ref 0) (primitive =) (if ((const true) (exit)) ((local-ref 0) (primitive car) (const false) (primitive =) (if ((const false) (exit)) ((global-ref cora/init.rewrite-and) (local-ref 0) (primitive cdr) (call 2) (local-set 1) (local-ref 1) (const false) (primitive =) (if ((const false) (exit)) ((const if) (local-ref 0) (primitive car) (local-ref 1) (const false) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit))))))))) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (const and) (make-closure 1 0 ((global-ref cora/init.rewrite-and) (local-ref 0) (primitive cdr) (tailcall 2))) (tailcall 3)) ((const boolean?) (make-closure 1 0 ((local-ref 0) (const true) (primitive =) (if ((const true) (exit)) ((local-ref 0) (const false) (primitive =) (if ((const true) (exit)) ((const false) (exit))))))) (primitive set) (exit)) ((const cora/init.rcons1) (make-closure 1 0 ((global-ref null?) (local-ref 0) (primitive cdr) (call 2) (if ((local-ref 0) (primitive car) (exit)) ((const cons) (local-ref 0) (primitive car) (global-ref cora/init.rcons1) (local-ref 0) (primitive cdr) (call 2) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit))))) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (const list-rest) (make-closure 1 0 ((global-ref cora/init.rcons1) (local-ref 0) (primitive cdr) (tailcall 2))) (tailcall 3)) ((const cora/init.match-cons-expander) (make-closure 4 0 ((reserve-locals 4) (global-ref cadr) (local-ref 0) (call 2) (local-set 4) (global-ref caddr) (local-ref 0) (call 2) (local-set 5) (local-ref 1) (primitive cons?) (if ((local-ref 1) (primitive car) (const cons) (primitive =) (if ((const true) (if ((global-ref cadr) (local-ref 1) (call 2) (local-set 6) (global-ref caddr) (local-ref 1) (call 2) (local-set 7) (global-ref cora/init.match1) (local-ref 4) (local-ref 6) (global-ref cora/init.match1) (local-ref 5) (local-ref 7) (local-ref 2) (local-ref 3) (call 5) (local-ref 3) (tailcall 5)) ((const if) (const cons?) (local-ref 1) (const ()) (primitive cons) (primitive cons) (global-ref cora/init.match1) (local-ref 4) (const car) (local-ref 1) (const ()) (primitive cons) (primitive cons) (global-ref cora/init.match1) (local-ref 5) (const cdr) (local-ref 1) (const ()) (primitive cons) (primitive cons) (local-ref 2) (local-ref 3) (call 5) (local-ref 3) (call 5) (local-ref 3) (const ()) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)))) ((const false) (if ((global-ref cadr) (local-ref 1) (call 2) (local-set 6) (global-ref caddr) (local-ref 1) (call 2) (local-set 7) (global-ref cora/init.match1) (local-ref 4) (local-ref 6) (global-ref cora/init.match1) (local-ref 5) (local-ref 7) (local-ref 2) (local-ref 3) (call 5) (local-ref 3) (tailcall 5)) ((const if) (const cons?) (local-ref 1) (const ()) (primitive cons) (primitive cons) (global-ref cora/init.match1) (local-ref 4) (const car) (local-ref 1) (const ()) (primitive cons) (primitive cons) (global-ref cora/init.match1) (local-ref 5) (const cdr) (local-ref 1) (const ()) (primitive cons) (primitive cons) (local-ref 2) (local-ref 3) (call 5) (local-ref 3) (call 5) (local-ref 3) (const ()) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)))))) ((const false) (if ((global-ref cadr) (local-ref 1) (call 2) (local-set 6) (global-ref caddr) (local-ref 1) (call 2) (local-set 7) (global-ref cora/init.match1) (local-ref 4) (local-ref 6) (global-ref cora/init.match1) (local-ref 5) (local-ref 7) (local-ref 2) (local-ref 3) (call 5) (local-ref 3) (tailcall 5)) ((const if) (const cons?) (local-ref 1) (const ()) (primitive cons) (primitive cons) (global-ref cora/init.match1) (local-ref 4) (const car) (local-ref 1) (const ()) (primitive cons) (primitive cons) (global-ref cora/init.match1) (local-ref 5) (const cdr) (local-ref 1) (const ()) (primitive cons) (primitive cons) (local-ref 2) (local-ref 3) (call 5) (local-ref 3) (call 5) (local-ref 3) (const ()) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit))))))) (primitive set) (exit)) ((const cora/init.match1) (make-closure 4 0 ((reserve-locals 1) (make-closure 1 0 ((global-ref atom?) (local-ref 0) (call 2) (if ((local-ref 0) (primitive symbol?) (primitive not) (if ((const true) (exit)) ((const false) (exit)))) ((const false) (exit))))) (local-set 4) (local-ref 4) (local-ref 0) (call 2) (if ((local-ref 0) (local-ref 1) (primitive =) (if ((local-ref 2) (exit)) ((const if) (const =) (local-ref 0) (local-ref 1) (const ()) (primitive cons) (primitive cons) (primitive cons) (local-ref 2) (local-ref 3) (const ()) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)))) ((local-ref 0) (primitive symbol?) (if ((const let) (local-ref 0) (local-ref 1) (local-ref 2) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)) ((global-ref pair?) (local-ref 0) (call 2) (if ((local-ref 0) (primitive car) (const quote) (primitive =) (if ((const if) (const =) (local-ref 0) (local-ref 1) (const ()) (primitive cons) (primitive cons) (primitive cons) (local-ref 2) (local-ref 3) (const ()) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 0) (primitive car) (const cons) (primitive =) (if ((global-ref cora/init.match-cons-expander) (local-ref 0) (local-ref 1) (local-ref 2) (local-ref 3) (tailcall 5)) ((global-ref error) (const "no cond match") (tailcall 2)))))) ((global-ref error) (global-ref str) (const "match fail ") (local-ref 0) (call 3) (tailcall 2))))))))) (primitive set) (exit)) ((const cora/init.extract-rule-action) (make-closure 2 0 ((reserve-locals 1) (local-ref 0) (primitive cdr) (primitive car) (local-set 2) (global-ref pair?) (local-ref 2) (call 2) (if ((local-ref 2) (primitive car) (const where) (primitive =) (if ((const true) (if ((const if) (global-ref cadr) (local-ref 2) (call 2) (global-ref caddr) (local-ref 2) (call 2) (local-ref 1) (const ()) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 2) (exit)))) ((const false) (if ((const if) (global-ref cadr) (local-ref 2) (call 2) (global-ref caddr) (local-ref 2) (call 2) (local-ref 1) (const ()) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 2) (exit)))))) ((const false) (if ((const if) (global-ref cadr) (local-ref 2) (call 2) (global-ref caddr) (local-ref 2) (call 2) (local-ref 1) (const ()) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 2) (exit))))))) (primitive set) (exit)) ((const cora/init.match-helper) (make-closure 2 0 ((reserve-locals 5) (global-ref null?) (local-ref 1) (call 2) (if ((const error) (const "no match-help found!") (const ()) (primitive cons) (primitive cons) (exit)) ((global-ref pair?) (local-ref 1) (call 2) (if ((global-ref pair?) (local-ref 1) (primitive cdr) (call 2) (if ((const true) (if ((local-ref 1) (primitive car) (local-set 2) (const cc) (primitive gensym) (local-set 3) (global-ref cora/init.extract-rule-action) (local-ref 1) (local-ref 3) (call 3) (local-set 4) (global-ref cora/init.match1) (global-ref macroexpand) (local-ref 2) (call 2) (local-ref 0) (local-ref 4) (local-ref 3) (call 5) (local-set 5) (global-ref cora/init.match-helper) (local-ref 0) (local-ref 1) (primitive cdr) (primitive cdr) (call 3) (local-set 6) (const let) (local-ref 3) (const lambda) (const ()) (local-ref 6) (const ()) (primitive cons) (primitive cons) (primitive cons) (local-ref 5) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)) ((global-ref error) (const "no cond match") (tailcall 2)))) ((const false) (if ((local-ref 1) (primitive car) (local-set 2) (const cc) (primitive gensym) (local-set 3) (global-ref cora/init.extract-rule-action) (local-ref 1) (local-ref 3) (call 3) (local-set 4) (global-ref cora/init.match1) (global-ref macroexpand) (local-ref 2) (call 2) (local-ref 0) (local-ref 4) (local-ref 3) (call 5) (local-set 5) (global-ref cora/init.match-helper) (local-ref 0) (local-ref 1) (primitive cdr) (primitive cdr) (call 3) (local-set 6) (const let) (local-ref 3) (const lambda) (const ()) (local-ref 6) (const ()) (primitive cons) (primitive cons) (primitive cons) (local-ref 5) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)) ((global-ref error) (const "no cond match") (tailcall 2)))))) ((const false) (if ((local-ref 1) (primitive car) (local-set 2) (const cc) (primitive gensym) (local-set 3) (global-ref cora/init.extract-rule-action) (local-ref 1) (local-ref 3) (call 3) (local-set 4) (global-ref cora/init.match1) (global-ref macroexpand) (local-ref 2) (call 2) (local-ref 0) (local-ref 4) (local-ref 3) (call 5) (local-set 5) (global-ref cora/init.match-helper) (local-ref 0) (local-ref 1) (primitive cdr) (primitive cdr) (call 3) (local-set 6) (const let) (local-ref 3) (const lambda) (const ()) (local-ref 6) (const ()) (primitive cons) (primitive cons) (primitive cons) (local-ref 5) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)) ((global-ref error) (const "no cond match") (tailcall 2))))))))) (primitive set) (exit)) ((const cora/init.rewrite-match) (make-closure 1 0 ((reserve-locals 3) (global-ref macroexpand) (global-ref cadr) (local-ref 0) (call 2) (call 2) (local-set 1) (global-ref cddr) (local-ref 0) (call 2) (local-set 2) (local-ref 1) (primitive cons?) (if ((const cons) (local-ref 1) (primitive car) (primitive =) (primitive not) (if ((const true) (if ((const val) (primitive gensym) (local-set 3) (const let) (local-ref 3) (local-ref 1) (global-ref cora/init.match-helper) (local-ref 3) (local-ref 2) (call 3) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)) ((global-ref cora/init.match-helper) (local-ref 1) (local-ref 2) (tailcall 3)))) ((const false) (if ((const val) (primitive gensym) (local-set 3) (const let) (local-ref 3) (local-ref 1) (global-ref cora/init.match-helper) (local-ref 3) (local-ref 2) (call 3) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)) ((global-ref cora/init.match-helper) (local-ref 1) (local-ref 2) (tailcall 3)))))) ((const false) (if ((const val) (primitive gensym) (local-set 3) (const let) (local-ref 3) (local-ref 1) (global-ref cora/init.match-helper) (local-ref 3) (local-ref 2) (call 3) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit)) ((global-ref cora/init.match-helper) (local-ref 1) (local-ref 2) (tailcall 3))))))) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (const match) (make-closure 1 0 ((global-ref cora/init.rewrite-match) (local-ref 0) (tailcall 2))) (tailcall 3)) ((const cora/init.extract-rules1) (make-closure 3 0 ((reserve-locals 1) (local-ref 2) (local-ref 1) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 2) (local-ref 1) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 2) (local-ref 1) (local-ref 0) (local-ref 0) (local-ref 0) (make-closure 0 23 ((reserve-locals 5) (closure-ref 18) (closure-ref 19) (closure-ref 22) (closure-ref 22) (closure-ref 22) (closure-ref 22) (closure-ref 22) (closure-ref 18) (closure-ref 19) (closure-ref 22) (closure-ref 22) (closure-ref 22) (make-closure 0 12 ((reserve-locals 4) (closure-ref 7) (closure-ref 8) (closure-ref 11) (closure-ref 11) (closure-ref 11) (make-closure 0 5 ((reserve-locals 3) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 4) (primitive cons?) (if ((closure-ref 4) (primitive car) (local-set 1) (closure-ref 4) (primitive cdr) (local-set 2) (global-ref cora/init.extract-rules1) (local-ref 2) (local-ref 1) (closure-ref 1) (primitive cons) (closure-ref 0) (tailcall 4)) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 11) (primitive cons?) (if ((const =>) (closure-ref 11) (primitive car) (primitive =) (if ((closure-ref 11) (primitive cdr) (primitive cons?) (if ((closure-ref 11) (primitive cdr) (primitive car) (local-set 1) (closure-ref 11) (primitive cdr) (primitive cdr) (local-set 2) (const list) (global-ref reverse) (closure-ref 8) (call 2) (primitive cons) (local-set 3) (global-ref cora/init.extract-rules1) (local-ref 2) (const ()) (local-ref 1) (local-ref 3) (closure-ref 7) (primitive cons) (primitive cons) (tailcall 4)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 22) (primitive cons?) (if ((const =>) (closure-ref 22) (primitive car) (primitive =) (if ((closure-ref 22) (primitive cdr) (primitive cons?) (if ((closure-ref 22) (primitive cdr) (primitive car) (local-set 1) (closure-ref 22) (primitive cdr) (primitive cdr) (primitive cons?) (if ((const where) (closure-ref 22) (primitive cdr) (primitive cdr) (primitive car) (primitive =) (if ((closure-ref 22) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 22) (primitive cdr) (primitive cdr) (primitive cdr) (primitive car) (local-set 2) (closure-ref 22) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cdr) (local-set 3) (const list) (global-ref reverse) (closure-ref 19) (call 2) (primitive cons) (local-set 4) (global-ref cora/init.extract-rules1) (local-ref 3) (const ()) (const where) (local-ref 2) (local-ref 1) (const ()) (primitive cons) (primitive cons) (primitive cons) (local-ref 4) (closure-ref 18) (primitive cons) (primitive cons) (tailcall 4)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 3) (const ()) (local-ref 0) (primitive =) (if ((global-ref reverse) (local-ref 2) (tailcall 2)) ((local-ref 3) (tailcall 1))))) (primitive set) (exit)) ((const cora/init.extract-rules) (make-closure 1 0 ((global-ref cora/init.extract-rules1) (local-ref 0) (const ()) (const ()) (tailcall 4))) (primitive set) (exit)) ((const cora/init.rules-patterns) (make-closure 2 0 ((global-ref null?) (local-ref 1) (call 2) (if ((global-ref reverse) (local-ref 0) (tailcall 2)) ((global-ref cora/init.rules-patterns) (local-ref 1) (primitive car) (local-ref 0) (primitive cons) (global-ref cddr) (local-ref 1) (call 2) (tailcall 3))))) (primitive set) (exit)) ((const cora/init.length-h) (make-closure 2 0 ((local-ref 1) (const ()) (primitive =) (if ((local-ref 0) (exit)) ((global-ref cora/init.length-h) (local-ref 0) (const 1) (primitive +) (local-ref 1) (primitive cdr) (tailcall 3))))) (primitive set) (exit)) ((const length) (make-closure 1 0 ((global-ref cora/init.length-h) (const 0) (local-ref 0) (tailcall 3))) (primitive set) (exit)) ((const cora/init.filter-h) (make-closure 3 0 ((local-ref 2) (primitive cons?) (if ((local-ref 1) (local-ref 2) (primitive car) (call 2) (if ((global-ref cora/init.filter-h) (local-ref 2) (primitive car) (local-ref 0) (primitive cons) (local-ref 1) (local-ref 2) (primitive cdr) (tailcall 4)) ((global-ref cora/init.filter-h) (local-ref 0) (local-ref 1) (local-ref 2) (primitive cdr) (tailcall 4)))) ((global-ref reverse) (local-ref 0) (tailcall 2))))) (primitive set) (exit)) ((const filter) (make-closure 2 0 ((global-ref cora/init.filter-h) (const ()) (local-ref 0) (local-ref 1) (tailcall 4))) (primitive set) (exit)) ((const append) (make-closure 2 0 ((local-ref 0) (const ()) (primitive =) (if ((local-ref 1) (exit)) ((local-ref 0) (primitive car) (global-ref append) (local-ref 0) (primitive cdr) (local-ref 1) (call 3) (primitive cons) (exit))))) (primitive set) (exit)) ((const cora/init.rules-arg-count) (make-closure 1 0 ((reserve-locals 5) (global-ref cora/init.rules-patterns) (const ()) (local-ref 0) (call 3) (local-set 1) (make-closure 1 0 ((global-ref length) (local-ref 0) (primitive cdr) (tailcall 2))) (local-set 2) (global-ref map) (local-ref 2) (local-ref 1) (call 3) (local-set 3) (local-ref 3) (primitive car) (local-set 4) (local-ref 4) (make-closure 1 1 ((closure-ref 0) (local-ref 0) (primitive =) (primitive not) (exit))) (local-set 5) (global-ref null?) (global-ref filter) (local-ref 5) (local-ref 3) (primitive cdr) (call 3) (call 2) (primitive not) (if ((global-ref error) (const "inconsistent func rule args count") (tailcall 2)) ((local-ref 4) (exit))))) (primitive set) (exit)) ((const cora/init.gen-parameters) (make-closure 1 0 ((local-ref 0) (const 0) (primitive =) (if ((const ()) (exit)) ((const p) (primitive gensym) (global-ref cora/init.gen-parameters) (local-ref 0) (const 1) (primitive -) (call 2) (primitive cons) (exit))))) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (const func) (make-closure 1 0 ((reserve-locals 3) (global-ref cora/init.extract-rules) (global-ref cddr) (local-ref 0) (call 2) (call 2) (local-set 1) (global-ref cora/init.rules-arg-count) (local-ref 1) (call 2) (local-set 2) (global-ref cora/init.gen-parameters) (local-ref 2) (call 2) (local-set 3) (const defun) (global-ref cadr) (local-ref 0) (call 2) (local-ref 3) (const match) (const list) (local-ref 3) (primitive cons) (local-ref 1) (primitive cons) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (exit))) (tailcall 3)) ((const cora/init.propagate-boolean0) (make-closure 1 0 ((reserve-locals 3) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (make-closure 0 74 ((reserve-locals 3) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (closure-ref 73) (make-closure 0 63 ((reserve-locals 3) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (closure-ref 62) (make-closure 0 52 ((reserve-locals 1) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (make-closure 0 45 ((reserve-locals 1) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (closure-ref 44) (make-closure 0 40 ((reserve-locals 3) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (closure-ref 39) (make-closure 0 29 ((reserve-locals 1) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (closure-ref 28) (make-closure 0 24 ((reserve-locals 1) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (closure-ref 23) (make-closure 0 19 ((reserve-locals 3) (closure-ref 18) (closure-ref 18) (closure-ref 18) (closure-ref 18) (closure-ref 18) (closure-ref 18) (closure-ref 18) (closure-ref 18) (closure-ref 18) (closure-ref 18) (make-closure 0 10 ((reserve-locals 3) (closure-ref 9) (make-closure 0 1 ((reserve-locals 2) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 0) (local-set 1) (local-ref 1) (exit))) (local-set 0) (closure-ref 9) (primitive cons?) (if ((const if) (closure-ref 9) (primitive car) (primitive =) (if ((closure-ref 9) (primitive cdr) (primitive cons?) (if ((const false) (closure-ref 9) (primitive cdr) (primitive car) (primitive =) (if ((closure-ref 9) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 9) (primitive cdr) (primitive cdr) (primitive car) (local-set 1) (closure-ref 9) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 9) (primitive cdr) (primitive cdr) (primitive cdr) (primitive car) (local-set 2) (const ()) (closure-ref 9) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((local-ref 2) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 18) (primitive cons?) (if ((const if) (closure-ref 18) (primitive car) (primitive =) (if ((closure-ref 18) (primitive cdr) (primitive cons?) (if ((const true) (closure-ref 18) (primitive cdr) (primitive car) (primitive =) (if ((closure-ref 18) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 18) (primitive cdr) (primitive cdr) (primitive car) (local-set 1) (closure-ref 18) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 18) (primitive cdr) (primitive cdr) (primitive cdr) (primitive car) (local-set 2) (const ()) (closure-ref 18) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((local-ref 1) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 23) (primitive cons?) (if ((const not) (closure-ref 23) (primitive car) (primitive =) (if ((closure-ref 23) (primitive cdr) (primitive cons?) (if ((const false) (closure-ref 23) (primitive cdr) (primitive car) (primitive =) (if ((const ()) (closure-ref 23) (primitive cdr) (primitive cdr) (primitive =) (if ((const true) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 28) (primitive cons?) (if ((const not) (closure-ref 28) (primitive car) (primitive =) (if ((closure-ref 28) (primitive cdr) (primitive cons?) (if ((const true) (closure-ref 28) (primitive cdr) (primitive car) (primitive =) (if ((const ()) (closure-ref 28) (primitive cdr) (primitive cdr) (primitive =) (if ((const false) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 39) (primitive cons?) (if ((const null?) (closure-ref 39) (primitive car) (primitive =) (if ((closure-ref 39) (primitive cdr) (primitive cons?) (if ((closure-ref 39) (primitive cdr) (primitive car) (primitive cons?) (if ((const cons) (closure-ref 39) (primitive cdr) (primitive car) (primitive car) (primitive =) (if ((closure-ref 39) (primitive cdr) (primitive car) (primitive cdr) (primitive cons?) (if ((closure-ref 39) (primitive cdr) (primitive car) (primitive cdr) (primitive car) (local-set 1) (closure-ref 39) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 39) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive car) (local-set 2) (const ()) (closure-ref 39) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((const ()) (closure-ref 39) (primitive cdr) (primitive cdr) (primitive =) (if ((const false) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 44) (primitive cons?) (if ((const null?) (closure-ref 44) (primitive car) (primitive =) (if ((closure-ref 44) (primitive cdr) (primitive cons?) (if ((const ()) (closure-ref 44) (primitive cdr) (primitive car) (primitive =) (if ((const ()) (closure-ref 44) (primitive cdr) (primitive cdr) (primitive =) (if ((const true) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 51) (primitive cons?) (if ((const and) (closure-ref 51) (primitive car) (primitive =) (if ((closure-ref 51) (primitive cdr) (primitive cons?) (if ((const true) (closure-ref 51) (primitive cdr) (primitive car) (primitive =) (if ((closure-ref 51) (primitive cdr) (primitive cdr) (primitive cons?) (if ((const true) (closure-ref 51) (primitive cdr) (primitive cdr) (primitive car) (primitive =) (if ((const ()) (closure-ref 51) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((const true) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 62) (primitive cons?) (if ((const cons?) (closure-ref 62) (primitive car) (primitive =) (if ((closure-ref 62) (primitive cdr) (primitive cons?) (if ((closure-ref 62) (primitive cdr) (primitive car) (primitive cons?) (if ((const cons) (closure-ref 62) (primitive cdr) (primitive car) (primitive car) (primitive =) (if ((closure-ref 62) (primitive cdr) (primitive car) (primitive cdr) (primitive cons?) (if ((closure-ref 62) (primitive cdr) (primitive car) (primitive cdr) (primitive car) (local-set 1) (closure-ref 62) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 62) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive car) (local-set 2) (const ()) (closure-ref 62) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((const ()) (closure-ref 62) (primitive cdr) (primitive cdr) (primitive =) (if ((const true) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 73) (primitive cons?) (if ((const cdr) (closure-ref 73) (primitive car) (primitive =) (if ((closure-ref 73) (primitive cdr) (primitive cons?) (if ((closure-ref 73) (primitive cdr) (primitive car) (primitive cons?) (if ((const cons) (closure-ref 73) (primitive cdr) (primitive car) (primitive car) (primitive =) (if ((closure-ref 73) (primitive cdr) (primitive car) (primitive cdr) (primitive cons?) (if ((closure-ref 73) (primitive cdr) (primitive car) (primitive cdr) (primitive car) (local-set 1) (closure-ref 73) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 73) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive car) (local-set 2) (const ()) (closure-ref 73) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((const ()) (closure-ref 73) (primitive cdr) (primitive cdr) (primitive =) (if ((local-ref 2) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 1) (local-ref 0) (primitive cons?) (if ((const car) (local-ref 0) (primitive car) (primitive =) (if ((local-ref 0) (primitive cdr) (primitive cons?) (if ((local-ref 0) (primitive cdr) (primitive car) (primitive cons?) (if ((const cons) (local-ref 0) (primitive cdr) (primitive car) (primitive car) (primitive =) (if ((local-ref 0) (primitive cdr) (primitive car) (primitive cdr) (primitive cons?) (if ((local-ref 0) (primitive cdr) (primitive car) (primitive cdr) (primitive car) (local-set 2) (local-ref 0) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive cons?) (if ((local-ref 0) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive car) (local-set 3) (const ()) (local-ref 0) (primitive cdr) (primitive car) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((const ()) (local-ref 0) (primitive cdr) (primitive cdr) (primitive =) (if ((local-ref 2) (exit)) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1))))) (primitive set) (exit)) ((const cora/init.propagate-boolean) (make-closure 1 0 ((reserve-locals 2) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (make-closure 0 52 ((reserve-locals 3) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (closure-ref 51) (make-closure 0 47 ((reserve-locals 3) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (closure-ref 46) (make-closure 0 42 ((reserve-locals 3) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (closure-ref 41) (make-closure 0 37 ((reserve-locals 5) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (closure-ref 36) (make-closure 0 30 ((reserve-locals 3) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (closure-ref 29) (make-closure 0 25 ((reserve-locals 3) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (closure-ref 24) (make-closure 0 20 ((reserve-locals 7) (closure-ref 19) (closure-ref 19) (closure-ref 19) (closure-ref 19) (closure-ref 19) (closure-ref 19) (closure-ref 19) (closure-ref 19) (closure-ref 19) (closure-ref 19) (closure-ref 19) (make-closure 0 11 ((reserve-locals 3) (closure-ref 10) (closure-ref 10) (closure-ref 10) (closure-ref 10) (make-closure 0 4 ((reserve-locals 3) (closure-ref 3) (make-closure 0 1 ((reserve-locals 2) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 0) (local-set 1) (local-ref 1) (exit))) (local-set 0) (closure-ref 3) (primitive cons?) (if ((closure-ref 3) (primitive car) (local-set 1) (closure-ref 3) (primitive cdr) (local-set 2) (global-ref map) (global-ref cora/init.propagate-boolean) (local-ref 1) (local-ref 2) (primitive cons) (tailcall 3)) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 10) (primitive cons?) (if ((const lambda) (closure-ref 10) (primitive car) (primitive =) (if ((closure-ref 10) (primitive cdr) (primitive cons?) (if ((closure-ref 10) (primitive cdr) (primitive car) (local-set 1) (closure-ref 10) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 10) (primitive cdr) (primitive cdr) (primitive car) (local-set 2) (const ()) (closure-ref 10) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((const lambda) (local-ref 1) (global-ref cora/init.propagate-boolean) (local-ref 2) (call 2) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 19) (primitive cons?) (if ((const if) (closure-ref 19) (primitive car) (primitive =) (if ((closure-ref 19) (primitive cdr) (primitive cons?) (if ((closure-ref 19) (primitive cdr) (primitive car) (local-set 1) (closure-ref 19) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 19) (primitive cdr) (primitive cdr) (primitive car) (local-set 2) (closure-ref 19) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 19) (primitive cdr) (primitive cdr) (primitive cdr) (primitive car) (local-set 3) (const ()) (closure-ref 19) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((global-ref cora/init.propagate-boolean) (local-ref 1) (call 2) (local-set 4) (global-ref cora/init.propagate-boolean) (local-ref 2) (call 2) (local-set 5) (global-ref cora/init.propagate-boolean) (local-ref 3) (call 2) (local-set 6) (global-ref cora/init.propagate-boolean0) (const if) (local-ref 4) (local-ref 5) (local-ref 6) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (tailcall 2)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 24) (primitive cons?) (if ((const not) (closure-ref 24) (primitive car) (primitive =) (if ((closure-ref 24) (primitive cdr) (primitive cons?) (if ((closure-ref 24) (primitive cdr) (primitive car) (local-set 1) (const ()) (closure-ref 24) (primitive cdr) (primitive cdr) (primitive =) (if ((global-ref cora/init.propagate-boolean) (local-ref 1) (call 2) (local-set 2) (global-ref cora/init.propagate-boolean0) (const not) (local-ref 2) (const ()) (primitive cons) (primitive cons) (tailcall 2)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 29) (primitive cons?) (if ((const null?) (closure-ref 29) (primitive car) (primitive =) (if ((closure-ref 29) (primitive cdr) (primitive cons?) (if ((closure-ref 29) (primitive cdr) (primitive car) (local-set 1) (const ()) (closure-ref 29) (primitive cdr) (primitive cdr) (primitive =) (if ((global-ref cora/init.propagate-boolean) (local-ref 1) (call 2) (local-set 2) (global-ref cora/init.propagate-boolean0) (const null?) (local-ref 2) (const ()) (primitive cons) (primitive cons) (tailcall 2)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 36) (primitive cons?) (if ((const and) (closure-ref 36) (primitive car) (primitive =) (if ((closure-ref 36) (primitive cdr) (primitive cons?) (if ((closure-ref 36) (primitive cdr) (primitive car) (local-set 1) (closure-ref 36) (primitive cdr) (primitive cdr) (primitive cons?) (if ((closure-ref 36) (primitive cdr) (primitive cdr) (primitive car) (local-set 2) (const ()) (closure-ref 36) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((global-ref cora/init.propagate-boolean) (local-ref 1) (call 2) (local-set 3) (global-ref cora/init.propagate-boolean) (local-ref 2) (call 2) (local-set 4) (global-ref cora/init.propagate-boolean0) (const and) (local-ref 3) (local-ref 4) (const ()) (primitive cons) (primitive cons) (primitive cons) (tailcall 2)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 41) (primitive cons?) (if ((const cdr) (closure-ref 41) (primitive car) (primitive =) (if ((closure-ref 41) (primitive cdr) (primitive cons?) (if ((closure-ref 41) (primitive cdr) (primitive car) (local-set 1) (const ()) (closure-ref 41) (primitive cdr) (primitive cdr) (primitive =) (if ((global-ref cora/init.propagate-boolean) (local-ref 1) (call 2) (local-set 2) (global-ref cora/init.propagate-boolean0) (const cdr) (local-ref 2) (const ()) (primitive cons) (primitive cons) (tailcall 2)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 46) (primitive cons?) (if ((const car) (closure-ref 46) (primitive car) (primitive =) (if ((closure-ref 46) (primitive cdr) (primitive cons?) (if ((closure-ref 46) (primitive cdr) (primitive car) (local-set 1) (const ()) (closure-ref 46) (primitive cdr) (primitive cdr) (primitive =) (if ((global-ref cora/init.propagate-boolean) (local-ref 1) (call 2) (local-set 2) (global-ref cora/init.propagate-boolean0) (const car) (local-ref 2) (const ()) (primitive cons) (primitive cons) (tailcall 2)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 51) (primitive cons?) (if ((const cons?) (closure-ref 51) (primitive car) (primitive =) (if ((closure-ref 51) (primitive cdr) (primitive cons?) (if ((closure-ref 51) (primitive cdr) (primitive car) (local-set 1) (const ()) (closure-ref 51) (primitive cdr) (primitive cdr) (primitive =) (if ((global-ref cora/init.propagate-boolean) (local-ref 1) (call 2) (local-set 2) (global-ref cora/init.propagate-boolean0) (const cons?) (local-ref 2) (const ()) (primitive cons) (primitive cons) (tailcall 2)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 1) (local-ref 0) (primitive cons?) (if ((const quote) (local-ref 0) (primitive car) (primitive =) (if ((local-ref 0) (primitive cdr) (primitive cons?) (if ((local-ref 0) (primitive cdr) (primitive car) (local-set 2) (const ()) (local-ref 0) (primitive cdr) (primitive cdr) (primitive =) (if ((const quote) (local-ref 2) (const ()) (primitive cons) (primitive cons) (exit)) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1))))) (primitive set) (exit)) ((const macroexpand) (make-closure 1 0 ((global-ref cora/init.propagate-boolean) (global-ref cora/init.macroexpand-boot) (local-ref 0) (call 2) (tailcall 2))) (primitive set) (exit)) ((const cora/init.rewrite-begin) (make-closure 1 0 ((reserve-locals 2) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (local-ref 0) (make-closure 0 8 ((reserve-locals 3) (closure-ref 7) (closure-ref 7) (closure-ref 7) (make-closure 0 3 ((reserve-locals 3) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 2) (primitive cons?) (if ((closure-ref 2) (primitive car) (local-set 1) (closure-ref 2) (primitive cdr) (local-set 2) (const do) (local-ref 1) (global-ref cora/init.rewrite-begin) (local-ref 2) (call 2) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 7) (primitive cons?) (if ((closure-ref 7) (primitive car) (local-set 1) (closure-ref 7) (primitive cdr) (primitive cons?) (if ((closure-ref 7) (primitive cdr) (primitive car) (local-set 2) (const ()) (closure-ref 7) (primitive cdr) (primitive cdr) (primitive =) (if ((const do) (local-ref 1) (local-ref 2) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 1) (local-ref 0) (primitive cons?) (if ((local-ref 0) (primitive car) (local-set 2) (const ()) (local-ref 0) (primitive cdr) (primitive =) (if ((local-ref 2) (exit)) ((local-ref 1) (tailcall 1)))) ((local-ref 1) (tailcall 1))))) (primitive set) (exit)) ((global-ref cora/init.add-to-*macros*) (const begin) (make-closure 1 0 ((global-ref cora/init.rewrite-begin) (local-ref 0) (primitive cdr) (tailcall 2))) (tailcall 3)))