(((const cora/lib/compile.assq) (make-closure 2 0 ((reserve-locals 2) (local-ref 1) (local-ref 1) (local-ref 1) (local-ref 1) (local-ref 1) (local-ref 0) (local-ref 1) (local-ref 1) (local-ref 1) (local-ref 0) (make-closure 0 10 ((reserve-locals 5) (closure-ref 8) (closure-ref 8) (closure-ref 8) (closure-ref 9) (make-closure 0 4 ((reserve-locals 4) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 3) (local-set 1) (closure-ref 2) (primitive cons?) (if ((closure-ref 2) (primitive car) (local-set 2) (closure-ref 2) (primitive cdr) (local-set 3) (global-ref cora/lib/compile.assq) (local-ref 1) (local-ref 3) (tailcall 3)) ((local-ref 0) (tailcall 1))))) (local-set 0) (closure-ref 9) (local-set 1) (closure-ref 8) (primitive cons?) (if ((closure-ref 8) (primitive car) (primitive cons?) (if ((closure-ref 8) (primitive car) (primitive car) (local-set 2) (closure-ref 8) (primitive car) (primitive cdr) (local-set 3) (closure-ref 8) (primitive cdr) (local-set 4) (local-ref 1) (local-ref 2) (primitive =) (if ((local-ref 2) (local-ref 3) (primitive cons) (exit)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 2) (local-ref 0) (local-set 3) (const ()) (local-ref 1) (primitive =) (if ((const ()) (exit)) ((local-ref 2) (tailcall 1))))) (primitive set) (exit)) ((const cora/lib/compile.const?) (make-closure 1 0 ((global-ref null?) (local-ref 0) (call 2) (if ((const true) (exit)) ((global-ref boolean?) (local-ref 0) (call 2) (if ((const true) (exit)) ((local-ref 0) (primitive integer?) (if ((const true) (exit)) ((local-ref 0) (primitive string?) (if ((const true) (exit)) ((const false) (exit))))))))))) (primitive set) (exit)) ((const cora/lib/compile.index-h) (make-closure 4 0 ((reserve-locals 4) (local-ref 3) (local-ref 2) (local-ref 1) (local-ref 1) (local-ref 1) (local-ref 0) (make-closure 0 6 ((reserve-locals 6) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 5) (local-set 1) (closure-ref 4) (primitive cons?) (if ((closure-ref 4) (primitive car) (local-set 2) (closure-ref 4) (primitive cdr) (local-set 3) (closure-ref 1) (local-set 4) (closure-ref 0) (local-set 5) (global-ref cora/lib/compile.index-h) (local-ref 1) (local-ref 3) (local-ref 4) (const 1) (primitive +) (local-ref 1) (local-ref 2) (primitive =) (if ((local-ref 4) (tailcall 5)) ((local-ref 5) (tailcall 5)))) ((local-ref 0) (tailcall 1))))) (local-set 4) (local-ref 0) (local-set 5) (const ()) (local-ref 1) (primitive =) (if ((local-ref 2) (local-set 6) (local-ref 3) (local-set 7) (local-ref 7) (exit)) ((local-ref 4) (tailcall 1))))) (primitive set) (exit)) ((const cora/lib/compile.index) (make-closure 2 0 ((global-ref cora/lib/compile.index-h) (local-ref 0) (local-ref 1) (const 0) (const -1) (tailcall 5))) (primitive set) (exit)) ((const cora/lib/compile.exist-in-env) (make-closure 2 0 ((reserve-locals 2) (local-ref 1) (local-ref 1) (local-ref 1) (local-ref 0) (make-closure 0 4 ((reserve-locals 4) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 3) (local-set 1) (closure-ref 2) (primitive cons?) (if ((closure-ref 2) (primitive car) (local-set 2) (closure-ref 2) (primitive cdr) (local-set 3) (global-ref cora/lib/compile.index) (local-ref 1) (local-ref 2) (call 3) (const 0) (primitive <) (if ((global-ref cora/lib/compile.exist-in-env) (local-ref 1) (local-ref 3) (tailcall 3)) ((const true) (exit)))) ((local-ref 0) (tailcall 1))))) (local-set 2) (local-ref 0) (local-set 3) (const ()) (local-ref 1) (primitive =) (if ((const false) (exit)) ((local-ref 2) (tailcall 1))))) (primitive set) (exit)) ((const cora/lib/compile.member) (make-closure 2 0 ((reserve-locals 2) (local-ref 1) (local-ref 1) (local-ref 1) (local-ref 0) (make-closure 0 4 ((reserve-locals 4) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 3) (local-set 1) (closure-ref 2) (primitive cons?) (if ((closure-ref 2) (primitive car) (local-set 2) (closure-ref 2) (primitive cdr) (local-set 3) (local-ref 1) (local-ref 2) (primitive =) (if ((const true) (exit)) ((global-ref cora/lib/compile.member) (local-ref 1) (local-ref 3) (call 3) (if ((const true) (exit)) ((const false) (exit)))))) ((local-ref 0) (tailcall 1))))) (local-set 2) (local-ref 0) (local-set 3) (const ()) (local-ref 1) (primitive =) (if ((const false) (exit)) ((local-ref 2) (tailcall 1))))) (primitive set) (exit)) ((const cora/lib/compile.set-diff) (make-closure 2 0 ((global-ref filter) (local-ref 1) (make-closure 1 1 ((global-ref cora/lib/compile.member) (local-ref 0) (closure-ref 0) (call 3) (primitive not) (exit))) (local-ref 0) (tailcall 3))) (primitive set) (exit)) ((const cora/lib/compile.closure-convert-list) (make-closure 6 0 ((reserve-locals 6) (local-ref 5) (local-ref 4) (local-ref 3) (local-ref 2) (local-ref 1) (local-ref 0) (local-ref 0) (local-ref 0) (make-closure 0 8 ((reserve-locals 13) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 7) (primitive cons?) (if ((closure-ref 7) (primitive car) (local-set 1) (closure-ref 7) (primitive cdr) (local-set 2) (closure-ref 4) (local-set 3) (closure-ref 3) (local-set 4) (closure-ref 2) (local-set 5) (closure-ref 1) (local-set 6) (closure-ref 0) (local-set 7) (global-ref cora/lib/compile.closure-convert) (local-ref 1) (local-ref 3) (local-ref 4) (local-ref 5) (local-ref 6) (call 6) (local-set 8) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 9) (local-ref 8) (primitive cons?) (if ((local-ref 8) (primitive car) (local-set 10) (local-ref 8) (primitive cdr) (primitive cons?) (if ((local-ref 8) (primitive cdr) (primitive car) (local-set 11) (local-ref 8) (primitive cdr) (primitive cdr) (primitive cons?) (if ((local-ref 8) (primitive cdr) (primitive cdr) (primitive car) (local-set 12) (const ()) (local-ref 8) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((global-ref cora/lib/compile.closure-convert-list) (local-ref 2) (local-ref 3) (local-ref 4) (local-ref 11) (local-ref 12) (local-ref 10) (local-ref 7) (primitive cons) (tailcall 7)) ((local-ref 9) (tailcall 1)))) ((local-ref 9) (tailcall 1)))) ((local-ref 9) (tailcall 1)))) ((local-ref 9) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 6) (const ()) (local-ref 0) (primitive =) (if ((local-ref 1) (local-set 7) (local-ref 2) (local-set 8) (local-ref 3) (local-set 9) (local-ref 4) (local-set 10) (local-ref 5) (local-set 11) (global-ref reverse) (local-ref 11) (call 2) (local-ref 9) (local-ref 10) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 6) (tailcall 1))))) (primitive set) (exit)) ((const cora/lib/compile.*builtin-prims*) (const set) (const 2) (primitive cons) (const car) (const 1) (primitive cons) (const cdr) (const 1) (primitive cons) (const cons) (const 2) (primitive cons) (const cons?) (const 1) (primitive cons) (const +) (const 2) (primitive cons) (const -) (const 2) (primitive cons) (const *) (const 2) (primitive cons) (const /) (const 2) (primitive cons) (const =) (const 2) (primitive cons) (const >) (const 2) (primitive cons) (const <) (const 2) (primitive cons) (const gensym) (const 1) (primitive cons) (const symbol?) (const 1) (primitive cons) (const not) (const 1) (primitive cons) (const integer?) (const 1) (primitive cons) (const string?) (const 1) (primitive cons) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive set) (exit)) ((const cora/lib/compile.temp-list) (make-closure 2 0 ((reserve-locals 2) (local-ref 1) (local-ref 0) (make-closure 0 2 ((reserve-locals 3) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 1) (local-set 1) (closure-ref 0) (local-set 2) (global-ref cora/lib/compile.temp-list) (local-ref 1) (const 1) (primitive -) (const tmp) (primitive gensym) (local-ref 2) (primitive cons) (tailcall 3))) (local-set 2) (const 0) (local-ref 0) (primitive =) (if ((local-ref 1) (local-set 3) (local-ref 3) (exit)) ((local-ref 2) (tailcall 1))))) (primitive set) (exit)) ((const cora/lib/compile.closure-convert) (make-closure 5 0 ((reserve-locals 28) (global-ref cora/lib/compile.const?) (local-ref 0) (call 2) (if ((local-ref 0) (local-ref 3) (local-ref 4) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 0) (primitive symbol?) (if ((global-ref cora/lib/compile.index) (local-ref 0) (local-ref 1) (call 3) (local-set 5) (local-ref 5) (const 0) (primitive <) (if ((global-ref cora/lib/compile.exist-in-env) (local-ref 0) (local-ref 2) (call 3) (if ((local-ref 0) (local-ref 0) (local-ref 3) (primitive cons) (local-ref 4) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 0) (local-ref 3) (local-ref 4) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)))) ((local-ref 0) (local-ref 3) (local-ref 4) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)))) ((local-ref 0) (primitive cons?) (primitive not) (if ((global-ref error) (const "assert fail") (tailcall 2)) ((const quote) (local-ref 0) (primitive car) (primitive =) (if ((local-ref 0) (local-ref 3) (local-ref 4) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((const lambda) (local-ref 0) (primitive car) (primitive =) (if ((global-ref cadr) (local-ref 0) (call 2) (local-set 5) (global-ref caddr) (local-ref 0) (call 2) (local-set 6) (global-ref cora/lib/compile.closure-convert) (local-ref 6) (local-ref 5) (local-ref 1) (local-ref 2) (primitive cons) (const ()) (const 0) (call 6) (local-set 7) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 8) (local-ref 7) (primitive cons?) (if ((local-ref 7) (primitive car) (local-set 9) (local-ref 7) (primitive cdr) (primitive cons?) (if ((local-ref 7) (primitive cdr) (primitive car) (local-set 10) (local-ref 7) (primitive cdr) (primitive cdr) (primitive cons?) (if ((local-ref 7) (primitive cdr) (primitive cdr) (primitive car) (local-set 11) (const ()) (local-ref 7) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((const lambda) (local-ref 5) (local-ref 10) (local-ref 11) (local-ref 9) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (global-ref append) (global-ref cora/lib/compile.set-diff) (local-ref 10) (local-ref 1) (call 3) (local-ref 3) (call 3) (local-ref 4) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 8) (tailcall 1)))) ((local-ref 8) (tailcall 1)))) ((local-ref 8) (tailcall 1)))) ((local-ref 8) (tailcall 1)))) ((const let) (local-ref 0) (primitive car) (primitive =) (if ((global-ref cadr) (local-ref 0) (call 2) (local-set 5) (global-ref caddr) (local-ref 0) (call 2) (local-set 6) (global-ref cadddr) (local-ref 0) (call 2) (local-set 7) (global-ref cora/lib/compile.closure-convert) (local-ref 6) (local-ref 1) (local-ref 2) (local-ref 3) (local-ref 4) (call 6) (local-set 8) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 9) (local-ref 8) (primitive cons?) (if ((local-ref 8) (primitive car) (local-set 10) (local-ref 8) (primitive cdr) (primitive cons?) (if ((local-ref 8) (primitive cdr) (primitive car) (local-set 11) (local-ref 8) (primitive cdr) (primitive cdr) (primitive cons?) (if ((local-ref 8) (primitive cdr) (primitive cdr) (primitive car) (local-set 12) (const ()) (local-ref 8) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((local-ref 4) (const 1) (primitive +) (local-ref 12) (primitive >) (if ((local-ref 4) (const 1) (primitive +) (local-set 13) (global-ref cora/lib/compile.closure-convert) (local-ref 7) (local-ref 5) (local-ref 1) (primitive cons) (local-ref 2) (local-ref 11) (local-ref 13) (call 6) (local-set 14) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 15) (local-ref 14) (primitive cons?) (if ((local-ref 14) (primitive car) (local-set 16) (local-ref 14) (primitive cdr) (primitive cons?) (if ((local-ref 14) (primitive cdr) (primitive car) (local-set 17) (local-ref 14) (primitive cdr) (primitive cdr) (primitive cons?) (if ((local-ref 14) (primitive cdr) (primitive cdr) (primitive car) (local-set 18) (const ()) (local-ref 14) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((const let) (local-ref 5) (local-ref 10) (local-ref 16) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (local-ref 17) (local-ref 18) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 15) (tailcall 1)))) ((local-ref 15) (tailcall 1)))) ((local-ref 15) (tailcall 1)))) ((local-ref 15) (tailcall 1)))) ((local-ref 12) (local-set 13) (global-ref cora/lib/compile.closure-convert) (local-ref 7) (local-ref 5) (local-ref 1) (primitive cons) (local-ref 2) (local-ref 11) (local-ref 13) (call 6) (local-set 14) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 15) (local-ref 14) (primitive cons?) (if ((local-ref 14) (primitive car) (local-set 16) (local-ref 14) (primitive cdr) (primitive cons?) (if ((local-ref 14) (primitive cdr) (primitive car) (local-set 17) (local-ref 14) (primitive cdr) (primitive cdr) (primitive cons?) (if ((local-ref 14) (primitive cdr) (primitive cdr) (primitive car) (local-set 18) (const ()) (local-ref 14) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((const let) (local-ref 5) (local-ref 10) (local-ref 16) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (local-ref 17) (local-ref 18) (const ()) (primitive cons) (primitive cons) (primitive cons) (exit)) ((local-ref 15) (tailcall 1)))) ((local-ref 15) (tailcall 1)))) ((local-ref 15) (tailcall 1)))) ((local-ref 15) (tailcall 1)))))) ((local-ref 9) (tailcall 1)))) ((local-ref 9) (tailcall 1)))) ((local-ref 9) (tailcall 1)))) ((local-ref 9) (tailcall 1)))) ((local-ref 0) (primitive car) (primitive symbol?) (if ((local-ref 0) (primitive car) (local-set 5) (local-ref 0) (primitive cdr) (local-set 6) (global-ref cora/lib/compile.assq) (local-ref 5) (global-ref cora/lib/compile.*builtin-prims*) (call 3) (local-set 7) (global-ref null?) (local-ref 7) (call 2) (primitive not) (if ((global-ref length) (local-ref 6) (call 2) (local-ref 7) (primitive cdr) (primitive <) (if ((const true) (if ((global-ref cora/lib/compile.temp-list) (local-ref 7) (primitive cdr) (global-ref length) (local-ref 6) (call 2) (primitive -) (const ()) (call 3) (local-set 8) (global-ref cora/lib/compile.closure-convert) (const lambda) (local-ref 8) (global-ref append) (local-ref 5) (local-ref 6) (primitive cons) (local-ref 8) (call 3) (const ()) (primitive cons) (primitive cons) (primitive cons) (local-ref 1) (local-ref 2) (local-ref 3) (local-ref 4) (tailcall 6)) ((global-ref cora/lib/compile.closure-convert-list) (local-ref 5) (local-ref 6) (primitive cons) (local-ref 1) (local-ref 2) (local-ref 3) (local-ref 4) (const ()) (tailcall 7)))) ((const false) (if ((global-ref cora/lib/compile.temp-list) (local-ref 7) (primitive cdr) (global-ref length) (local-ref 6) (call 2) (primitive -) (const ()) (call 3) (local-set 8) (global-ref cora/lib/compile.closure-convert) (const lambda) (local-ref 8) (global-ref append) (local-ref 5) (local-ref 6) (primitive cons) (local-ref 8) (call 3) (const ()) (primitive cons) (primitive cons) (primitive cons) (local-ref 1) (local-ref 2) (local-ref 3) (local-ref 4) (tailcall 6)) ((global-ref cora/lib/compile.closure-convert-list) (local-ref 5) (local-ref 6) (primitive cons) (local-ref 1) (local-ref 2) (local-ref 3) (local-ref 4) (const ()) (tailcall 7)))))) ((const false) (if ((global-ref cora/lib/compile.temp-list) (local-ref 7) (primitive cdr) (global-ref length) (local-ref 6) (call 2) (primitive -) (const ()) (call 3) (local-set 8) (global-ref cora/lib/compile.closure-convert) (const lambda) (local-ref 8) (global-ref append) (local-ref 5) (local-ref 6) (primitive cons) (local-ref 8) (call 3) (const ()) (primitive cons) (primitive cons) (primitive cons) (local-ref 1) (local-ref 2) (local-ref 3) (local-ref 4) (tailcall 6)) ((global-ref cora/lib/compile.closure-convert-list) (local-ref 5) (local-ref 6) (primitive cons) (local-ref 1) (local-ref 2) (local-ref 3) (local-ref 4) (const ()) (tailcall 7)))))) ((local-ref 0) (primitive car) (local-set 5) (local-ref 0) (primitive cdr) (local-set 6) (global-ref cora/lib/compile.closure-convert-list) (local-ref 5) (local-ref 6) (primitive cons) (local-ref 1) (local-ref 2) (local-ref 3) (local-ref 4) (const ()) (tailcall 7))))))))))))))))) (primitive set) (exit)) ((const cora/lib/compile.compile) (make-closure 4 0 ((reserve-locals 20) (global-ref cora/lib/compile.const?) (local-ref 0) (call 2) (if ((const const) (local-ref 0) (const ()) (primitive cons) (primitive cons) (local-ref 3) (primitive cons) (exit)) ((local-ref 0) (primitive symbol?) (if ((global-ref cora/lib/compile.index) (local-ref 0) (local-ref 1) (call 3) (local-set 4) (local-ref 4) (const 0) (primitive <) (if ((global-ref cora/lib/compile.index) (local-ref 0) (local-ref 2) (call 3) (local-set 5) (local-ref 5) (const 0) (primitive <) (if ((const global-ref) (local-ref 0) (const ()) (primitive cons) (primitive cons) (local-ref 3) (primitive cons) (exit)) ((const closure-ref) (local-ref 5) (const ()) (primitive cons) (primitive cons) (local-ref 3) (primitive cons) (exit)))) ((const local-ref) (local-ref 4) (const ()) (primitive cons) (primitive cons) (local-ref 3) (primitive cons) (exit)))) ((const quote) (local-ref 0) (primitive car) (primitive =) (if ((const const) (global-ref cadr) (local-ref 0) (call 2) (const ()) (primitive cons) (primitive cons) (local-ref 3) (primitive cons) (exit)) ((const if) (local-ref 0) (primitive car) (primitive =) (if ((global-ref cadr) (local-ref 0) (call 2) (local-set 4) (global-ref caddr) (local-ref 0) (call 2) (local-set 5) (global-ref cadddr) (local-ref 0) (call 2) (local-set 6) (global-ref cora/lib/compile.compile) (local-ref 5) (local-ref 1) (local-ref 2) (local-ref 3) (call 5) (local-set 7) (global-ref cora/lib/compile.compile) (local-ref 6) (local-ref 1) (local-ref 2) (local-ref 3) (call 5) (local-set 8) (global-ref cora/lib/compile.compile) (local-ref 4) (local-ref 1) (local-ref 2) (const if) (local-ref 7) (local-ref 8) (const ()) (primitive cons) (primitive cons) (primitive cons) (const ()) (primitive cons) (tailcall 5)) ((const do) (local-ref 0) (primitive car) (primitive =) (if ((global-ref cadr) (local-ref 0) (call 2) (local-set 4) (global-ref caddr) (local-ref 0) (call 2) (local-set 5) (global-ref cora/lib/compile.compile) (local-ref 4) (local-ref 1) (local-ref 2) (const pop) (const ()) (primitive cons) (global-ref cora/lib/compile.compile) (local-ref 5) (local-ref 1) (local-ref 2) (local-ref 3) (call 5) (primitive cons) (tailcall 5)) ((const let) (local-ref 0) (primitive car) (primitive =) (if ((global-ref cadr) (local-ref 0) (call 2) (local-set 4) (global-ref caddr) (local-ref 0) (call 2) (local-set 5) (global-ref cadddr) (local-ref 0) (call 2) (local-set 6) (global-ref cora/lib/compile.compile) (local-ref 6) (global-ref append) (local-ref 1) (local-ref 4) (const ()) (primitive cons) (call 3) (local-ref 2) (local-ref 3) (call 5) (local-set 7) (global-ref cora/lib/compile.compile) (local-ref 5) (local-ref 1) (local-ref 2) (const local-set) (global-ref length) (local-ref 1) (call 2) (const ()) (primitive cons) (primitive cons) (local-ref 7) (primitive cons) (tailcall 5)) ((const lambda) (local-ref 0) (primitive car) (primitive =) (if ((make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 4) (local-ref 0) (primitive cons?) (if ((const lambda) (local-ref 0) (primitive car) (primitive =) (if ((local-ref 0) (primitive cdr) (primitive cons?) (if ((local-ref 0) (primitive cdr) (primitive car) (local-set 5) (local-ref 0) (primitive cdr) (primitive cdr) (primitive cons?) (if ((local-ref 0) (primitive cdr) (primitive cdr) (primitive car) (local-set 6) (local-ref 0) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cons?) (if ((local-ref 0) (primitive cdr) (primitive cdr) (primitive cdr) (primitive car) (local-set 7) (local-ref 0) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cons?) (if ((local-ref 0) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cdr) (primitive car) (local-set 8) (const ()) (local-ref 0) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((global-ref cora/lib/compile.compile) (local-ref 8) (local-ref 5) (local-ref 6) (const exit) (const ()) (primitive cons) (const ()) (primitive cons) (call 5) (local-set 9) (local-ref 7) (const 0) (primitive =) (if ((local-ref 9) (local-set 10) (global-ref cora/lib/compile.compile-list) (local-ref 6) (local-ref 1) (local-ref 2) (const make-closure) (global-ref length) (local-ref 5) (call 2) (global-ref length) (local-ref 6) (call 2) (local-ref 10) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (local-ref 3) (primitive cons) (tailcall 5)) ((const reserve-locals) (local-ref 7) (const ()) (primitive cons) (primitive cons) (local-ref 9) (primitive cons) (local-set 10) (global-ref cora/lib/compile.compile-list) (local-ref 6) (local-ref 1) (local-ref 2) (const make-closure) (global-ref length) (local-ref 5) (call 2) (global-ref length) (local-ref 6) (call 2) (local-ref 10) (const ()) (primitive cons) (primitive cons) (primitive cons) (primitive cons) (local-ref 3) (primitive cons) (tailcall 5)))) ((local-ref 4) (tailcall 1)))) ((local-ref 4) (tailcall 1)))) ((local-ref 4) (tailcall 1)))) ((local-ref 4) (tailcall 1)))) ((local-ref 4) (tailcall 1)))) ((local-ref 4) (tailcall 1)))) ((local-ref 4) (tailcall 1)))) ((global-ref cora/lib/compile.compile-call) (local-ref 0) (local-ref 1) (local-ref 2) (local-ref 3) (tailcall 5))))))))))))))))) (primitive set) (exit)) ((const cora/lib/compile.compile-call) (make-closure 4 0 ((reserve-locals 6) (local-ref 3) (local-ref 3) (local-ref 3) (local-ref 3) (local-ref 3) (local-ref 2) (local-ref 1) (local-ref 0) (local-ref 3) (local-ref 2) (local-ref 1) (local-ref 0) (make-closure 0 12 ((reserve-locals 4) (closure-ref 8) (closure-ref 9) (closure-ref 10) (closure-ref 11) (make-closure 0 4 ((reserve-locals 5) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 3) (local-set 1) (closure-ref 2) (local-set 2) (closure-ref 1) (local-set 3) (closure-ref 0) (local-set 4) (global-ref cora/lib/compile.compile-list) (local-ref 1) (local-ref 2) (local-ref 3) (const call) (global-ref length) (local-ref 1) (call 2) (const ()) (primitive cons) (primitive cons) (local-ref 4) (primitive cons) (tailcall 5))) (local-set 0) (closure-ref 11) (local-set 1) (closure-ref 10) (local-set 2) (closure-ref 9) (local-set 3) (closure-ref 8) (primitive cons?) (if ((closure-ref 8) (primitive car) (primitive cons?) (if ((const exit) (closure-ref 8) (primitive car) (primitive car) (primitive =) (if ((const ()) (closure-ref 8) (primitive car) (primitive cdr) (primitive =) (if ((const ()) (closure-ref 8) (primitive cdr) (primitive =) (if ((global-ref cora/lib/compile.compile-list) (local-ref 1) (local-ref 2) (local-ref 3) (const tailcall) (global-ref length) (local-ref 1) (call 2) (const ()) (primitive cons) (primitive cons) (const ()) (primitive cons) (tailcall 5)) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1)))) ((local-ref 0) (tailcall 1))))) (local-set 4) (local-ref 0) (primitive cons?) (if ((local-ref 0) (primitive car) (local-set 5) (local-ref 0) (primitive cdr) (local-set 6) (local-ref 1) (local-set 7) (local-ref 2) (local-set 8) (local-ref 3) (local-set 9) (local-ref 5) (primitive symbol?) (if ((global-ref null?) (global-ref cora/lib/compile.assq) (local-ref 5) (global-ref cora/lib/compile.*builtin-prims*) (call 3) (call 2) (primitive not) (if ((const true) (if ((global-ref cora/lib/compile.compile-list) (local-ref 6) (local-ref 7) (local-ref 8) (const primitive) (local-ref 5) (const ()) (primitive cons) (primitive cons) (local-ref 9) (primitive cons) (tailcall 5)) ((local-ref 4) (tailcall 1)))) ((const false) (if ((global-ref cora/lib/compile.compile-list) (local-ref 6) (local-ref 7) (local-ref 8) (const primitive) (local-ref 5) (const ()) (primitive cons) (primitive cons) (local-ref 9) (primitive cons) (tailcall 5)) ((local-ref 4) (tailcall 1)))))) ((const false) (if ((global-ref cora/lib/compile.compile-list) (local-ref 6) (local-ref 7) (local-ref 8) (const primitive) (local-ref 5) (const ()) (primitive cons) (primitive cons) (local-ref 9) (primitive cons) (tailcall 5)) ((local-ref 4) (tailcall 1)))))) ((local-ref 4) (tailcall 1))))) (primitive set) (exit)) ((const cora/lib/compile.compile-list) (make-closure 4 0 ((reserve-locals 4) (local-ref 3) (local-ref 2) (local-ref 1) (local-ref 0) (local-ref 0) (local-ref 0) (make-closure 0 6 ((reserve-locals 6) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 0) (closure-ref 5) (primitive cons?) (if ((closure-ref 5) (primitive car) (local-set 1) (closure-ref 5) (primitive cdr) (local-set 2) (closure-ref 2) (local-set 3) (closure-ref 1) (local-set 4) (closure-ref 0) (local-set 5) (global-ref cora/lib/compile.compile) (local-ref 1) (local-ref 3) (local-ref 4) (global-ref cora/lib/compile.compile-list) (local-ref 2) (local-ref 3) (local-ref 4) (local-ref 5) (call 5) (tailcall 5)) ((local-ref 0) (tailcall 1))))) (local-set 4) (const ()) (local-ref 0) (primitive =) (if ((local-ref 1) (local-set 5) (local-ref 2) (local-set 6) (local-ref 3) (local-set 7) (local-ref 7) (exit)) ((local-ref 4) (tailcall 1))))) (primitive set) (exit)) ((const cora/lib/compile.cc) (make-closure 1 0 ((reserve-locals 6) (global-ref cora/lib/compile.closure-convert) (local-ref 0) (const ()) (const ()) (const ()) (const 0) (call 6) (local-set 1) (make-closure 0 0 ((global-ref error) (const "no match-help found!") (tailcall 2))) (local-set 2) (local-ref 1) (primitive cons?) (if ((local-ref 1) (primitive car) (local-set 3) (local-ref 1) (primitive cdr) (primitive cons?) (if ((local-ref 1) (primitive cdr) (primitive car) (local-set 4) (local-ref 1) (primitive cdr) (primitive cdr) (primitive cons?) (if ((local-ref 1) (primitive cdr) (primitive cdr) (primitive car) (local-set 5) (const ()) (local-ref 1) (primitive cdr) (primitive cdr) (primitive cdr) (primitive =) (if ((global-ref cora/lib/compile.compile) (local-ref 3) (const ()) (const ()) (const exit) (const ()) (primitive cons) (const ()) (primitive cons) (call 5) (local-set 6) (local-ref 5) (const 0) (primitive =) (if ((local-ref 6) (exit)) ((const reserve-locals) (local-ref 5) (const ()) (primitive cons) (primitive cons) (local-ref 6) (primitive cons) (exit)))) ((local-ref 2) (tailcall 1)))) ((local-ref 2) (tailcall 1)))) ((local-ref 2) (tailcall 1)))) ((local-ref 2) (tailcall 1))))) (primitive set) (exit)) ((const ()) (exit)))