(func parse
      env x => (if (elem? x env) x ['$global x]) where (symbol? x)
      env x => ['$const x] where (or (number? x) (string? x) (boolean? x) (null? x))
      env ['quote x] => ['$const x]
      env ['if x y z] => ['$if (parse env x) (parse env y) (parse env z)]
      env ['do x y] => ['$do (parse env x) (parse env y)]
      env ['lambda args body] => ['$lambda args (parse (append args env) body)]
      env [f . args] => (map (parse env) [f . args]))
    
(defun id (x) x)

(func anf
      x k => (k x) where (symbol? x)
      ['$const x] k => (k ['$const x])
      ['$global x] k => (k ['$global x])
      ['$if x y z] k => (let y1 (anf y id)
			     z1 (anf z id)
			     (anf-a x (lambda (x1)
					(k ['$if x1 y1 z1]))))
      ['$do x y] k => ['do (anf x id) (anf y k)]
      ['$lambda args body] k => (k ['lambda args (anf body id)])
      [f . args] k => (anf-a f (lambda (f1)
				 (anf-a* args (lambda (args1)
						(k ['$call f1 . args1]))))))

(defun anf-a (exp k)
  (anf exp (lambda (x)
	     (anf-a-h x k))))

(func anf-a-h
      x k => (k x) where (symbol? x)
      ['$const x] k => (k ['$const x])
      ['$global x] k => (k ['$global x])
      ['$if x y z] k => ['$if x (anf-a-h y k) (anf-a-h z k)]
      ['let x y z] k => ['let x y (anf-a-h z k)]
      x k => (let t (gensym 'gen)
		  ['let t x (k t)]))

(func anf-a*
      [] k => (k '())
      [hd . tl] k => (anf-a hd (lambda (hd1)
				 (anf-a* tl (lambda (tl1)
					      (k [hd1 . tl1]))))))

(defun codegen (input)
  (let ast (parse () input)
       (anf ast id)))

(defun compile-file (f)
  (let exprs (read-file-as-sexp f)
       (let expands (map macroexpand exprs)
	    (map codegen expands))))
