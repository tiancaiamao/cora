(defun load (V2818) (let Load (let Start (get-time run) (let Result (shen.load-help (value shen.*tc*) (read-file V2818)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (shen.prhush (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if (value shen.*tc*) (shen.prhush (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded)))

(defun shen.load-help (V2825 V2826) (cond ((= false V2825) (for-each (lambda X (shen.prhush (shen.app (shen.eval-without-macros X) "
" shen.s) (stoutput))) V2826)) (true (let RemoveSynonyms (mapcan (lambda X (shen.remove-synonyms X)) V2826) (let Table (mapcan (lambda X (shen.typetable X)) RemoveSynonyms) (let Assume (for-each (lambda X (shen.assumetype X)) Table) (trap-error (for-each (lambda X (shen.typecheck-and-load X)) RemoveSynonyms) (lambda E (shen.unwind-types E Table)))))))))

(defun shen.remove-synonyms (V2828) (cond ((and (cons? V2828) (= shen.synonyms-help (hd V2828))) (do (eval V2828) ())) (true (cons V2828 ()))))

(defun shen.typecheck-and-load (V2830) (do (nl 1) (shen.typecheck-and-evaluate V2830 (gensym A))))

(defun shen.typetable (V2836) (cond ((and (cons? V2836) (and (= define (hd V2836)) (cons? (tl V2836)))) (let Sig (compile (lambda Y (shen.<sig+rest> Y)) (tl (tl V2836)) (lambda E (simple-error (shen.app (hd (tl V2836)) " lacks a proper signature.
" shen.a)))) (cons (cons (hd (tl V2836)) Sig) ()))) (true ())))

(defun shen.assumetype (V2838) (cond ((cons? V2838) (declare (hd V2838) (tl V2838))) (true (shen.f_error shen.assumetype))))

(defun shen.unwind-types (V2845 V2846) (cond ((= () V2846) (simple-error (error-to-string V2845))) ((and (cons? V2846) (cons? (hd V2846))) (do (shen.remtype (hd (hd V2846))) (shen.unwind-types V2845 (tl V2846)))) (true (shen.f_error shen.unwind-types))))

(defun shen.remtype (V2848) (set shen.*signedfuncs* (shen.removetype V2848 (value shen.*signedfuncs*))))

(defun shen.removetype (V2856 V2857) (cond ((= () V2857) ()) ((and (cons? V2857) (and (cons? (hd V2857)) (= (hd (hd V2857)) V2856))) (shen.removetype (hd (hd V2857)) (tl V2857))) ((cons? V2857) (cons (hd V2857) (shen.removetype V2856 (tl V2857)))) (true (shen.f_error shen.removetype))))

(defun shen.<sig+rest> (V2859) (let Parse_shen.<signature> (shen.<signature> V2859) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_<!> (<!> Parse_shen.<signature>) (if (not (= (fail) Parse_<!>)) (shen.pair (hd Parse_<!>) (shen.hdtl Parse_shen.<signature>)) (fail))) (fail))))

(defun write-to-file (V2862 V2863) (let Stream (open V2862 out) (let String (if (string? V2863) (shen.app V2863 "

" shen.a) (shen.app V2863 "

" shen.s)) (let Write (pr String Stream) (let Close (close Stream) V2863)))))



