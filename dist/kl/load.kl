(defun load (V1737) (let Load (let Start (get-time run) (let Result (shen.load-help (value shen.*tc*) (read-file V1737)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (shen.prhush (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if (value shen.*tc*) (shen.prhush (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded)))

(defun shen.load-help (V1744 V1745) (cond ((= false V1744) (for-each (lambda X (shen.prhush (shen.app (shen.eval-without-macros X) "
" shen.s) (stoutput))) V1745)) (true (let RemoveSynonyms (mapcan (lambda X (shen.remove-synonyms X)) V1745) (let Table (mapcan (lambda X (shen.typetable X)) RemoveSynonyms) (let Assume (for-each (lambda X (shen.assumetype X)) Table) (trap-error (for-each (lambda X (shen.typecheck-and-load X)) RemoveSynonyms) (lambda E (shen.unwind-types E Table)))))))))

(defun shen.remove-synonyms (V1747) (cond ((and (cons? V1747) (= shen.synonyms-help (hd V1747))) (do (eval V1747) ())) (true (cons V1747 ()))))

(defun shen.typecheck-and-load (V1749) (do (nl 1) (shen.typecheck-and-evaluate V1749 (gensym A))))

(defun shen.typetable (V1755) (cond ((and (cons? V1755) (and (= define (hd V1755)) (cons? (tl V1755)))) (let Sig (compile (lambda Y (shen.<sig+rest> Y)) (tl (tl V1755)) (lambda E (simple-error (shen.app (hd (tl V1755)) " lacks a proper signature.
" shen.a)))) (cons (cons (hd (tl V1755)) Sig) ()))) (true ())))

(defun shen.assumetype (V1757) (cond ((cons? V1757) (declare (hd V1757) (tl V1757))) (true (shen.f_error shen.assumetype))))

(defun shen.unwind-types (V1764 V1765) (cond ((= () V1765) (simple-error (error-to-string V1764))) ((and (cons? V1765) (cons? (hd V1765))) (do (shen.remtype (hd (hd V1765))) (shen.unwind-types V1764 (tl V1765)))) (true (shen.f_error shen.unwind-types))))

(defun shen.remtype (V1767) (set shen.*signedfuncs* (shen.removetype V1767 (value shen.*signedfuncs*))))

(defun shen.removetype (V1775 V1776) (cond ((= () V1776) ()) ((and (cons? V1776) (and (cons? (hd V1776)) (= (hd (hd V1776)) V1775))) (shen.removetype (hd (hd V1776)) (tl V1776))) ((cons? V1776) (cons (hd V1776) (shen.removetype V1775 (tl V1776)))) (true (shen.f_error shen.removetype))))

(defun shen.<sig+rest> (V1778) (let Parse_shen.<signature> (shen.<signature> V1778) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_<!> (<!> Parse_shen.<signature>) (if (not (= (fail) Parse_<!>)) (shen.pair (hd Parse_<!>) (shen.hdtl Parse_shen.<signature>)) (fail))) (fail))))

