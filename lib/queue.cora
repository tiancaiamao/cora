;; use two stack to implement a list
;; usage:  (let s1 (gensym 's1)
;; 	     s2 (gensym 's2)
;; 	     (begin
;;            (set s1 ())
;;            (set s2 ())
;; 	      (set 'enqueue (make-enqueue s1 s2))
;; 	      (set 'dequeue (make-dequeue s1 s2))
;; 	      (set 'empty? (empty-queue? s1 s2))))

(defun make-enqueue (s1 s2 x)
  (set s1 (cons x (value s1))))

(defun make-dequeue (s1 s2)
  (lambda ()
    (begin
     (if (null? (value s2))
	 (begin
	  (set s2 (reverse (value s1)))
	  (set s1 ()))
       ())
     (let ret (car (value s2))
	  (begin
	   (set s2 (cdr (value s2)))
	   ret)))))

(defun empty-queue? (s1 s2)
  (lambda ()
    (and (null? (value s1)) (null? (value s2)))))
