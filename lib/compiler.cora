(load "lib/sys.cora")

(func beta-replace
      env s => (let find (assq s env)
                    (if (= () find) s (cdr find))) where (symbol? s)
                    env [['lambda [v] body] x] => (beta-replace (cons (cons v x) env) body) where (symbol? x)
                    env ['lambda args body] => (let nenv (filter (lambda (x) (elem? (car x) args)) env)
                                                    ['lambda args (beta-replace env body)])
                    env ['if x y z] => (cons 'if (map (beta-replace env) [x y z]))
                    env ['quote x] => ['quote x]
                    env [x . y] => (map (beta-replace env) [x . y])
                    env x => x)

(defun simplify (exp)
  (beta-replace () (propagate-boolean exp)))

;; update the macroexpand function, add the simplify phase
(defun macroexpand (exp)
  (simplify (propagate-boolean (macroexpand-boot exp))))

;; (defmacro cond (exp)
;;   (if (= () (cdr exp))
;;       ['error "no cond match"]
;;       (let curr (cadr exp)
;;            ['if (car curr)
;;            (cadr curr)
;;            (cons 'cond (cddr exp))])))

;; (func and-macro
;;       ['and true true] => true
;;       ['and false _] => false
;;       ['and _ false] => false
;;       ['and x y] => ['if x y false])

;; (defmacro and (exp)
;;   (and-macro exp))

(defun builtin? (x)
  (elem? x '(+ - * / = set halt car cdr cons cons?)))

(func parse
      _ x => ['%const x] where (or (number? x) (string? x) (boolean? x) (null? x))
      _ ['quote x] => ['%const x]
      env x => (if (elem? x env) x ['%global x]) where (symbol? x)
      env ['lambda args body] => ['lambda args (parse (append args env) body)]
      env ['if . args] => ['if . (map (parse env) args)]
      env ['do x y] => ['do (parse env x) (parse env y)]
      env [op . args] => [['%builtin op] . (map (parse env) args)] where (builtin? op)
      env ls => (map (parse env) ls))

(func union
      [] s2 => s2
      [x . y] s2 => (union y s2) where (elem? x s2)
      [x . y] s2 => (cons x (union y s2)))

(func diff
      [] _ => []
      [x . y] s2 => (diff y s2) where (elem? x s2)
      [x . y] s2 => (cons x (diff y s2)))

(func convert-protect?
      ['%const x] => true
      ['%global x] => true
      ['%builtin op] => true
      ['quote x] => true
      x => false)

(func free-vars
      x => [] where (convert-protect? x)
      x => [x] where (symbol? x)
      ['lambda args body] => (diff (free-vars body) args)
      [if x y z] => (foldl union [] (map free-vars [x y z]))
      [f . args] => (foldl union [] (map free-vars [f . args])))

(func pos-in-list0
      _ x [] => -1
      pos x [a . b] => pos where (= x a)
      pos x [a . b] => (pos-in-list0 (+ pos 1) x b))

(defun pos-in-list (x l)
  (pos-in-list0 0 x l))

(func convert
      _ _ x => x where (convert-protect? x)
      self fvs var => (let pos (pos-in-list var fvs)
			   (if (= -1 pos)
			       var
			     ['%closure-ref self pos])) where (symbol? var)
      self fvs ['do x y] => (cons 'do (map (convert self fvs) [x y]))
      self fvs ['if a b c] => (cons 'if (map (convert self fvs) [a b c]))
      self fvs ['lambda args body] =>
      (let fvs1 (free-vars ['lambda args body])
	   self1 (gensym 'clo)
	   ['%closure ['lambda (cons self1 args) (convert self1 fvs1 body)] .
	   (map (convert self fvs) fvs1)])
      self fvs [['%builtin f] . args] => [['%builtin f] . (map (convert self fvs) args)]
      self fvs [f . args] => (let f0 (convert self fvs f)
				  args0 (map (convert self fvs) args)
				  [f0 . args0]))

(func collect-lambda
      res ['lambda params body] return =>
      (let name (gensym 'clofun)
	   (collect-lambda res body
			   (lambda (res1 body1)
			     (return (cons [name ['lambda params body1]] res1)
				     name))))
      res ['%closure lam . fvs] return => (collect-lambda res lam
							  (lambda (res1 name)
							    (return res1 ['%closure name (length (cadr lam)) . fvs])))
      res f-args return => (collect-lambda-list [] res f-args
						(lambda (res1 args1)
						  (return res1 args1))) where (cons? f-args)
      res x return => (return res x))

(func collect-lambda-list
      res init [] return => (return init (reverse res))
      res init [x . y] return => (collect-lambda init x
						 (lambda (init1 x1)
						   (collect-lambda-list (cons x1 res) init1 y return))))

(defun closure-convert-debug (x)
  (convert '_ [] (parse [] x)))

(defun closure-convert (ast)
  (let res (convert '_ [] ast)
       (collect-lambda [] res
		       (lambda (res1 ast1)
			 (cons ['entry ['lambda () ast1]] res1)))))

(defun id (x) x)

(defun wrap-var (x k)
  (let tmp (gensym 'reg)
       ['let tmp x
       (k tmp)]))

(func code-gen
      x k => (if (= id k) ['%return x] (k x)) where (symbol? x)
      [x . y] k => (wrap-var [x . y]
			     (lambda (x)
			       (if (= id k)
				   ['%return x]
				   (k x))))
      where (elem? x ['%const '%closure-ref '%builtin '%global])
      ['%closure name required . captured] k =>
      (code-gen-list captured
		     (lambda (captured1)
		       (wrap-var ['%closure name required captured1] k)))
      ['if x y z] k =>
      (code-gen x
		(lambda (x1)
		  ['if x1
		  (code-gen y k)
		  (code-gen z k)]))
      ['do . l] k => (code-gen-list l (lambda (ls)
					(code-gen (cadr ls) k))) ;; cadr ignore the first one
      [f . args] k =>
      (code-gen f
		(lambda (f1)
		  (code-gen-list args
				 (lambda (args1)
				   (if (= id k)
				       ['%tailcall f1 . args1]
				       (wrap-var ['%call f1 . args1] k)))))))

(func code-gen-list
      [] k => (k [])
      [x . y] k => (code-gen x (lambda (x1)
                                 (code-gen-list y (lambda (y1)
                                                    (k [x1 . y1]))))))

(defun code-gen-body (x)
  (code-gen x id))

(func code-gen-lambda
      ['lambda args body] => (code-gen-body body))

(defun code-generate (inputs)
  (map (lambda (x)
	 (let lmd (cadr x)
	      (let args (cadr lmd)
		   (let bc (code-gen-lambda lmd)
			['label (car x) args bc]))))
       inputs))

;; (closure-convert '(set 'fact (lambda (n)
;; 			       (if (= n 0)
;; 				   1
;; 				 (* n (fact (- n 1)))))))

;; (code-generate '((#clofun156 (lambda () ((%builtin set) (%const fact) (%closure #clofun155 2)))) (#clofun155 (lambda (#clo154 n) (if ((%builtin =) n (%const 0)) (%const 1) ((%builtin *) n ((%global fact) ((%builtin -) n (%const 1)))))))))

(defun compile (ast)
  (let lam (closure-convert ast)
       (let bc (code-generate lam)
	    bc)))

(defun compile-to-c (from to)
  (let sexp (read-file-as-sexp from)
       (let input (macroexpand sexp)
	    (let ast (parse [] input)
		 (let bc (compile ast)
		      (generate-c to bc))))))

(defun compile-to-so (from to)
  (let tmp-file "/tmp/cora.tmp.c"
       (if (= tmp-file (compile-to-c from tmp-file))
	   (gcc-compile-to-so tmp-file to)
	 ())))

(defun compile-and-load (file)
  (let tmp-file "/tmp/cora.tmp.so"
       (if (= (compile-to-so file tmp-file) 0)
	   (load-so tmp-file)
	 ())))
