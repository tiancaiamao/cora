(define-library "cora/lib/eval"
  (export eval)

  (set 'set (set))
  (set 'car (car))
  (set 'cdr (cdr))
  (set 'cons (cons))
  (set 'cons? (cons?))
  (set '+ (+))
  (set '- (-))
  (set '* (*))
  (set '/ (/))
  (set '= (=))
  (set '> (>))
  (set '< (<))
  (set 'gensym (gensym))
  (set 'symbol? (symbol?))
  (set 'not (not))
  (set 'string? (string?))

  (defun var-with-ns (var ns)
    (cond
     ((= ns "") var)
     ((symbol-cooked? var) var)
     (true (intern (string-append ns (string-append "#" (symbol->string var)))))))

  (func lookup-var
	s ns [] => (var-with-ns s ns)
	s ns [import . more] => (let export (value-or (intern (string-append import "#*ns-export*")) ())
				  (if (elem? s export)
				      (intern (string-append import (string-append "#" (symbol->string s))))
				      (lookup-var s ns more))))

  (func lookup
	s [] => ['fail]
	s [[a . b] . more] => (if (= s a) ['ok b] (lookup s more)))

  (func extend
	params [] env k => (k params [] env)
	[] args env k => (k [] args env)
	[a . params] [b . args] env k => (extend params args (cons (cons a b) env) k))

  (func apply-h 
	['lambda params body . env1] args =>
	(extend params args env1
		(lambda (p a env2)
		  (cond
		   ((and (null? p) (null? a)) (eval body env2))
		   ((null? a) ['lambda p body . env2])
		   ((null? p) (let f2 (eval body env2)
				(apply-h f2 a))))))
	f args => (apply f args))

  (func eval
	exp env => exp where (or (string? exp) (number? exp) (boolean? exp) (null? exp))
	exp env => (match (lookup exp env)
		     ['ok val] val
		     ['fail] (value (lookup-var exp "" cora/init#*imported*)))
	where (symbol? exp)
	['quote more] env => more
	['if a b c] env => (if (eval a env) (eval b env) (eval c env))
	['do a b] env => (do (eval a env) (eval b env))
	['def var val] env => (set var (eval val env))
	['let a b c] env => (eval c (cons (cons a (eval b env)) env))
	['lambda params body] env => ['lambda params body . env]
	[f . args] env => (apply-h (eval f env) (map (lambda (x) (eval x env)) args)))
  )
