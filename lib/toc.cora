(@import "cora/lib/toc/internal" c)
(@import "cora/lib/io" io)

(func .assq
      var [] => ()
      var [(cons x y) . _] => (cons x y) where (= var x)
      var [_ . y] => (.assq var y))

(func .foldl
      f acc [] => acc
      f acc [x . y] => (.foldl f (f acc x) y))

(func .pos-in-list0
      _ x [] => -1
      pos x [a . b] => pos where (= x a)
      pos x [a . b] => (.pos-in-list0 (+ pos 1) x b))

(defun .index (x l)
  (.pos-in-list0 0 x l))

(func .exist-in-env
      x [] => false
      x [hd . tl] => (if (< (.index x hd) 0)
			 (.exist-in-env x tl)
			 true))

(set '.*builtin-prims*
     [['set 2 'primSet] ['car 1 'primCar] ['cdr 1 'primCdr] ['cons 2 'primCons] ['cons? 1 'primIsCons]
     ['+ 2 'primAdd] ['- 2 'primSub] ['* 2 'primMul] ['/ 2 'primDiv]
     ['= 2 'primEQ] ['> 2 'primGT] ['< 2 'primLT] ['gensym 1 'primGenSym] ['symbol? 1 'primIsSymbol]
     ['not 1 'primNot] ['integer? 1 'primIsNumber] ['string? 1 'primIsString]])

(defun builtin? (x)
  (not (null? (.assq x .*builtin-prims*))))

(defun .builtin->name (x)
  (let find (.assq x .*builtin-prims*)
       (if (null? find)
	   "ERROR"
	   (caddr find))))

(defun .builtin->args (x)
  (let find (.assq x .*builtin-prims*)
       (if (null? find)
	   "ERROR"
	   (cadr find))))

(func .temp-list
      0 res => res
      n res => (.temp-list (- n 1) (cons (gensym 'tmp) res)))

(func .parse
      _ x => ['%const x] where (or (number? x) (string? x) (boolean? x) (null? x))
      _ ['quote x] => ['%const x]
      env x => (if (elem? x env) x ['%global x]) where (symbol? x)
      env ['lambda args body] => ['lambda args (.parse (append args env) body)]
      env ['if . args] => ['if . (map (.parse env) args)]
      env ['do x y] => ['do (.parse env x) (.parse env y)]
      env ['let a b c] => ['let a (.parse env b) (.parse (cons a env) c)]
      env [op . args] => (let required (.builtin->args op)
			      provided (length args)
			      (cond
				((= required provided)  [['%builtin op] . (map (.parse env) args)])
				((> required provided)
				 ;; rewrite partial apply of primitives
				 ;; (+ x) => (lambda (tmp) (+ x tmp))
				 (let tmp (.temp-list (- required provided) ())
				      (.parse env ['lambda tmp (append [op . args] tmp)])))
				(true (error "primitive call mismatch"))))
      where (builtin? op)
      env ls => (map (.parse env) ls))

(func .union
      [] s2 => s2
      [x . y] s2 => (.union y s2) where (elem? x s2)
      [x . y] s2 => (cons x (.union y s2)))

(func .diff
      [] _ => []
      [x . y] s2 => (.diff y s2) where (elem? x s2)
      [x . y] s2 => (cons x (.diff y s2)))

(func .convert-protect?
      ['%const x] => true
      ['%global x] => true
      ['%builtin op] => true
      ['quote x] => true
      ['%closure-ref _] => true
      x => false)

(func .free-vars
      x => [] where (.convert-protect? x)
      x => [x] where (symbol? x)
      ['lambda args body] => (.diff (.free-vars body) args)
      ['if x y z] => (.foldl .union [] (map .free-vars [x y z]))
      ['do x y] => (.foldl .union [] (map .free-vars [x y]))
      ['let a b c] => (.union (.free-vars b) (.diff (.free-vars c) [a]))

      ;; the following three rules are used by .explicit-stack, not by .convert
      ['%closure lam . more] => (.free-vars [lam . more])
      ['return x] => (.free-vars x)
      ['call exp cont] => (.foldl .union [] (map .free-vars [exp cont]))
      ['tailcall exp] => (.free-vars exp)
      ['continuation arg body] => (.diff (.free-vars body) arg)

      [f . args] => (.foldl .union [] (map .free-vars [f . args])))

(func .closure-convert
      _ x => x where (.convert-protect? x)
      fvs var => (let pos (.index var fvs)
		      (if (= -1 pos)
			  var
			  ['%closure-ref pos])) where (symbol? var)
      ;; fvs ['do x y] => (cons 'do (map (.convert fvs) [x y]))
      ;; fvs ['if a b c] => (cons 'if (map (.convert fvs) [a b c]))
      fvs ['lambda args body] =>
      (let fvs1 (.free-vars ['lambda args body])
	   ['%closure ['lambda args (.closure-convert fvs1 body)] .
	   (map (.closure-convert fvs) fvs1)])
      fvs ['let a b c] => ['let a (.closure-convert fvs b) (.closure-convert fvs c)]
      fvs [f . args] => (map (.closure-convert fvs) [f . args]))

(defun .id (x) ['return x])

;; (+ (f g) 1) => (call (f g) (continuation (val) (+ val 1)))
;; (f g) => (tailcall (f g))
;; 42 => (return 42)
(func .tailify
      x next => (next x) where (or (symbol? x) (.convert-protect? x))
      x _ => x where (.convert-protect? x)
      ['if a b c] next => (.tailify a (lambda (ra)
					['if ra
					(.tailify b next)
					(.tailify c next)]))
      ['do a b] next => (.tailify a (lambda (ra)
				      (if (symbol? ra)
					  (.tailify b next)
					  ['do ra (.tailify b next)])))
      ['let a b c] next => (.tailify b (lambda (rb)
					 ['let a rb (.tailify c next)]))
      ['%closure ['lambda args body] . frees] next => (next ['%closure ['lambda args (.tailify body .id)] . frees])
      [f . args] next => (.tailify-list [f . args] [] next))

(func .tailify-list
      [] ls next => (let exp (reverse ls)
			 (cond
			   ((and (pair? (car exp)) (= (caar exp) '%builtin)) (.wrap-var exp next))
			   ((= next .id) ['tailcall exp])
			   (true (let val (gensym 'val)
				      ['call exp ['continuation [val] (next val)]]))))
      [hd . tl] ls next => (.tailify hd (lambda (hd1)
					  (.tailify-list tl [hd1 . ls] next))))

;; (continuation (val) body) => (continuation (lambda (vm val) body) . stacks)
(func .explicit-stack
      _ x => x where (.convert-protect? x)
      fvs var => var where (symbol? var)
      ;; fvs ['do x y] => (cons 'do (map (.explicit-stack fvs) [x y]))
      ;; fvs ['if a b c] => (cons 'if (map (.explicit-stack fvs) [a b c]))
      ;; fvs ['let a b c] => ['let a (.explicit-stack fvs b) (.explicit-stack fvs c)]
      ;; fvs ['%closure lam . closed] => ['%closure (.explicit-stack fvs lam) . closed]
      fvs ['lambda args body] => ['lambda args (.explicit-stack fvs body)]
      fvs ['continuation val body] => (let fvs1 (.diff (.free-vars body) val)
					   (let fvs2 (map (.explicit-stack fvs) fvs1)
						['%continuation ['lambda val (.explicit-stack fvs1 body)] . fvs2]))
      fvs ['call exp cont] => ['call (map (.explicit-stack fvs) exp) (.explicit-stack fvs cont)]
      fvs [f . args] => (map (.explicit-stack fvs) [f . args]))


(let v (vector 2)
 (begin
  (vector-set! v 0 0)
  (vector-set! v 1 (gensym 'clofun))

  (defun .reset-label ()
     (vector-set! v 0 0))

  (defun .gen-label ()
   (let curr (vector-ref v 0)
	(if (< curr 50)
	 (begin
	  (vector-set! v 0 (+ curr 1))
	  (cons (vector-ref v 1) curr))
	 (let label (gensym 'clofun)
	  (begin
	   (vector-set! v 0 0)
	   (vector-set! v 1 label)
	   (cons label 0))))))))

;; [%closure (lambda ..) . frees] => [%closure Label . frees]
;; [%continuation (lambda ..) . stacks] => [%continuation Label . stacks]
(func .collect-lambda
      res [clo-or-cont ['lambda params body] . fvs] k =>
      (let name (.gen-label)
	   (.collect-lambda res body
			    (lambda (res1 body1)
			      (if (= clo-or-cont '%closure)
				  (k (cons [name ['lambda params () body1]] res1) [clo-or-cont name (length params) . fvs])
				  (k (cons [name ['lambda params fvs body1]] res1) [clo-or-cont name . fvs])))))
      where (or (= clo-or-cont '%closure)
		(= clo-or-cont '%continuation))
      res f-args k => (.collect-lambda-list [] res f-args k) where (cons? f-args)
      res x k => (k res x))

(func .collect-lambda-list
      res init [] k => (k init (reverse res))
      res init [x . y] k => (.collect-lambda init x
						 (lambda (init1 x1)
						   (.collect-lambda-list (cons x1 res) init1 y k))))

(defun .wrap-var (x k)
  (let tmp (gensym 'reg)
       ['let tmp x
       (k tmp)]))

(func .generate-call-list
 w i [] => ()
 w i [x . more] => (begin
		 (if (not (> i 3))
		  (begin (c.generate-str w "arg")
		   (c.generate-num w i))
		  (begin (c.generate-str w "co->arg[")
		   (c.generate-num w i)
		   (c.generate-str w "]")))
		 (c.generate-str w " = ")
		 (.generate-inst () w x)
		 (c.generate-str w ";\n")
		 (.generate-call-list w (+ i 1) more)))


(func .generate-inst
      env w x => (c.generate-sym w x) where (symbol? x)
      env w ['%global x] => (begin
			     (c.generate-str w "globalRef(intern(\"")
			     (c.generate-str w (symbol->string x))
			     (c.generate-str w "\"))"))
      env w ['%closure-ref idx] => (begin
				    (c.generate-str w "closureRef(co, ")
				    (c.generate-num w idx)
				    (c.generate-str w ")"))
      env w ['%stack-ref idx] => (begin
				  (c.generate-str w "stackRef(co, ")
				  (c.generate-num w idx)
				  (c.generate-str w ")"))
      env w ['%const x] => (cond
			     ((symbol? x) (begin
					   (c.generate-str w "intern(\"")
					   (c.generate-str w (symbol->string x))
					   (c.generate-str w "\")")))
			     ((number? x) (begin
					   (c.generate-str w "makeNumber(")
					   (c.generate-num w x)
					   (c.generate-str w ")")))
			     ((string? x) (begin
					   (c.generate-str w "makeString1(\"")
					   (c.generate-str w (c.escape-str x))
					   (c.generate-str w "\")")))
			     ((= x ()) (c.generate-str w "Nil"))
			     ((= x true) (c.generate-str w "True"))
			     ((= x false) (c.generate-str w "False")))
      env w ['let a b c] => (let idx (.index a env)
				 (begin
				  (if (< idx 0) (c.generate-str w "Obj ") ())
				  (c.generate-sym w a)
				  (c.generate-str w " = ")
				  (.generate-inst env w b)
				  (c.generate-str w ";\n")
				  (.generate-inst (cons a env) w c)))
      env w [['%builtin f] . args] => (begin
				       (c.generate-sym w (.builtin->name f))
				       (c.generate-str w "(")
				       (.generate-inst-list env w args)
				       (c.generate-str w ")"))
      env w ['if a b c] => (begin
			    (c.generate-str w "if (True == ")
			    (.generate-inst env w a)
			    (c.generate-str w ") {\n")
			    (.generate-inst env w b)
			    (c.generate-str w "} else {\n")
			    (.generate-inst env w c)
			    (c.generate-str w "}\n"))
      env w ['%closure label nargs . frees] => (begin
						(c.generate-str w "makeNative(")
						(c.generate-num w (cdr label))
						(c.generate-str w ", ")
						(c.generate-sym w (car label))
						(c.generate-str w ", ")
						(c.generate-num w nargs)
						(c.generate-str w ", ")
						(c.generate-num w (length frees))
						(if (not (null? frees))
						    (begin
						     (c.generate-str w ", ")
						     (.generate-inst-list env w frees))
						    ())
						(c.generate-str w ")"))
      env w ['do a b] => (begin
			  (.generate-inst env w a)
			  (c.generate-str w ";\n")
			  (.generate-inst env w b))
	  env w ['return x] => (begin
					  (c.generate-str w "nargs = 2;\n")
					  (c.generate-str w "arg1 = ")
					  (.generate-inst env w x)
					  (c.generate-str w ";\n")
					  (c.generate-str w "co->ctx = co->callstack.data[--co->callstack.len];\n")
					  (c.generate-str w "if (co->ctx.pc.func != entry) { goto fail; }\n")
					  (c.generate-str w "goto *jumpTable[co->ctx.pc.label];\n"))
      env w ['tailcall exp] => (.generate-inst env w exp)
      env w ['call exp cont] => (begin
				 (.generate-cont w cont)
				 (.generate-inst env w exp))
	  env w [f . args] => (begin
					  (c.generate-str w "nargs = ")
					  (c.generate-num w (+ 1 (length args)))
					  (c.generate-str w ";\n")
					  (.generate-call-list w 0 [f . args])
					  (c.generate-str w "struct pcState ps = OBJ_FIELD(arg0, scmNative, code);\n")
					  (c.generate-str w "if (OBJ_FIELD(arg0, scmNative, required)+1 != nargs) { co->ctx.pc.func = coraDispatch; goto fail; };\n")
					  (c.generate-str w "if (ps.func != entry) { co->ctx.pc = ps; goto fail; };\n")
					  (c.generate-str w "goto *jumpTable[ps.label];\n\n")))

(func .generate-call-args
      env w idx [] => ()
      env w idx [a . b] => (begin
			    (c.generate-str w "co->args[")
			    (c.generate-num w idx)
			    (c.generate-str w "] = ")
			    (.generate-inst env w a)
			    (c.generate-str w ";\n")
			    (.generate-call-args env w (+ idx 1) b)))

(func .generate-cont
      w ['%continuation label . stacks] => (begin
					    (c.generate-str w "pushCont(co, ")
						(c.generate-num w (cdr label))
						(c.generate-str w ", ")
					    (c.generate-sym w (car label))
					    (c.generate-str w ", ")
					    (c.generate-num w (length stacks))
					    (if (not (null? stacks))
						(for-each (lambda (x)
							    (begin
							     (c.generate-str w ", ")
							     (.generate-inst () w x)))
							  stacks)
						())
					    (c.generate-str w ");\n")))

(func .generate-inst-list-h
      env fn w [] => ()
      env fn w [a . b] => (begin (fn env w a)
				 (if (not (null? b))
				     (c.generate-str w ", ")
				     ())
				 (.generate-inst-list-h env fn w b)))

(defun .generate-inst-list (env w l)
  (.generate-inst-list-h env .generate-inst w l))

;; (defun .generate-params-list (env w l)
;;   (.generate-inst-list-h env (lambda (env w x)
;; 			       (begin
;; 				(c.generate-str w "Obj ")
;; 				(.generate-inst env w x)))
;; 			 w l))

(defun .code-gen-func-declare (w label)
  (begin
   (c.generate-str w "void ")
   (c.generate-sym w (car label))
   (c.generate-str w "(struct Cora* co")
   (c.generate-str w ")")))

(func .generate-call-args-reverse
      env w dest-str idx [] => ()
      env w dest-str idx [a . b] => (begin
				     (c.generate-str w "Obj ")
				     (.generate-inst env w a)
				     (c.generate-str w dest-str)
				     (c.generate-num w idx)
				     (c.generate-str w "];\n")
				     (.generate-call-args-reverse env w dest-str (+ idx 1) b)))

(func .code-gen-toplevel
      w [label ['lambda params actives body]] => (begin
						(c.generate-str w "label")
						(c.generate-num w (cdr label))
						(c.generate-str w ":\n{\n")
						(.generate-call-args-reverse () w " = co->args[" 1 params)
						(.generate-call-args-reverse () w " = co->ctx.stk.stack[co->ctx.stk.base + " 0 actives)
						(.generate-inst params w body)
						(c.generate-str w "}\n\n")))

(defun .parse-pass (exp)
  (.parse [] exp))

(defun .closure-convert-pass (exp)
  (.closure-convert [] exp))

(defun .tailify-pass (exp)
  (.tailify exp .id))

(defun .explicit-stack-pass (exp)
  (.explicit-stack [] exp))

(defun .collect-lambda-pass (exp)
  (.collect-lambda [] exp
		   (lambda (ls e1)
		     (cons [(cons 'entry 0) ['lambda () () e1]] ls))))


(func .rewrite-->macro
      obj [] => obj
      obj [hd . more] => (.rewrite-->macro [hd obj] more))

(defmacro -> (exp)
  (let obj (cadr exp)
       (let fns (cddr exp)
	    (.rewrite-->macro obj fns))))

(defun .compile (exp)
  (-> exp
      .parse-pass
      .closure-convert-pass
      .tailify-pass
      .explicit-stack-pass
      .collect-lambda-pass))

(func for-each
      fn [] => []
      fn [x . y] => (begin
                     (fn x)
                     (for-each fn y)))

(defun .generate-jumptable (to i n)
 (cond
  ((= i 0) (begin
		  (c.generate-str to "&&label0")
		  (.generate-jumptable to 1 n)))
  ((< i n) (begin
		  (c.generate-str to ", &&label")
		  (c.generate-num to i)
		  (.generate-jumptable to (+ i 1) n)))
  (true ())))

(defun .generate-toplevel-group (to group)
 (begin
  (.code-gen-func-declare to (caar group))
  (c.generate-str to "{\n")

  (c.generate-str to "int nargs = co->nargs;\n")
  (c.generate-str to "Obj arg0 = co->args[0];\n")
  (c.generate-str to "Obj arg1 = co->args[1];\n")
  (c.generate-str to "Obj arg2 = co->args[2];\n")
  (c.generate-str to "Obj arg3 = co->args[3];\n\n")

  (c.generate-str to "static void* jumpTable[] = {")
  (.generate-jumptable to 0 (length group))
  (c.generate-str to "};\n\n")

  (c.generate-str to "goto *jumpTable[co->ctx.pc.label];\n\n")

  (for-each (lambda (x) (.code-gen-toplevel to x)) group)

  (c.generate-str to "fail:\n")
  (c.generate-str to "co->nargs = nargs;\n")
  (c.generate-str to "co->args[0] = arg0;\n")
  (c.generate-str to "co->args[1] = arg1;\n")
  (c.generate-str to "co->args[2] = arg2;\n")
  (c.generate-str to "co->args[3] = arg3;\n")

 (c.generate-str to "\n}\n\n")))

(defun .same-group (x y)
  (let lblx (car x)
       lbly (car y)
	   (= (car lblx) (car lbly))))

(func .group-bytecode
  [x . xs] [] res => (.group-bytecode xs [x] res)
  [x . xs] [y . more] res => (if (.same-group x y)
								(.group-bytecode xs (cons x [y . more]) res)
								(.group-bytecode [x . xs] [] (cons (reverse [y . more]) res)))
  [] cur res => (if (null? cur) res (cons cur res)))

(defun .generate-c (to bc)
 (begin
  (.reset-label)
  (c.generate-str to "#include \"types.h\"\n")
  (c.generate-str to "#include \"runtime.h\"\n\n")
  (let groups (.group-bytecode bc [] [])
   (begin
	(for-each (lambda (group)
			   (begin
			   (.code-gen-func-declare to (caar group))
			   (c.generate-str to ";\n")))
	 groups)
	(c.generate-str to "\n\n")

	(for-each (lambda (group)
			   (.generate-toplevel-group to group))
	 groups)))))

(func .handle-import-eagerly
      ['begin . remain] => (.handle-import-eagerly remain)
      [['import pkg] . remain] => (begin
				   (import pkg)
				   ;; (io.display "import ==")
				   ;; (io.display pkg)
				   ;; (io.display "\n\n")
				   (.handle-import-eagerly remain))
      _ => ())

(defun .compile-to-c (from to pkg-str)
  (let sexp (read-file-as-sexp from pkg-str)
       (begin
	(.handle-import-eagerly sexp)
	(let input (macroexpand sexp)
	     (let bc (.compile input)
		  (let stream (io.open-output-file to)
		       (begin
			(.generate-c stream bc)
			(io.close-output-file stream))))))))


;; ============== utilities of eval0 ==========

(set 'set (set))
(set 'car (car))
(set 'cdr (cdr))
(set 'cons (cons))
(set 'cons (cons))
(set '+ (+))
(set '- (-))
(set '* (*))
(set '/ (/))
(set '= (=))
(set '> (>))
(set '< (<))
(set 'gensym (gensym))
(set 'symbol? (symbol?))
(set 'not (not))
(set 'string? (string?))

(defun .eval0 (exp)
  (cond
    ((symbol? exp) (value exp))
    ((or (number? exp) (string? exp) (boolean? exp) (null? exp))
     exp)
    ((cons? exp)
     (if (= (car exp) 'quote)
	 (cadr exp)
	 (apply (.eval0 (car exp)) (map .eval0 (cdr exp)))))))
