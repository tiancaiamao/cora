(define-library "cora/lib/toc"
  (import "cora/lib/toc/internal")
  (import "cora/lib/io")
  (import "cora/lib/hash-h")

  (func assq
	var [] => ()
	var [(cons x y) . _] => (cons x y) where (= var x)
	var [_ . y] => (assq var y))

  (func foldl
	f acc [] => acc
	f acc [x . y] => (foldl f (f acc x) y))

  (func pos-in-list0
	_ x [] => -1
	pos x [a . b] => pos where (= x a)
	pos x [a . b] => (pos-in-list0 (+ pos 1) x b))

  (defun index (x l)
    (pos-in-list0 0 x l))

  (func exist-in-env
	x [] => false
	x [hd . tl] => (if (< (index x hd) 0)
			   (exist-in-env x tl)
			   true))

  (def *builtin-prims*
       [['set 2 "primSet"] ['car 1 "PRIM_CAR"] ['cdr 1 "PRIM_CDR"] ['cons 2 "makeCons"] ['cons? 1 "PRIM_ISCONS"]
	['+ 2 "PRIM_ADD"] ['- 2 "PRIM_SUB"] ['* 2 "PRIM_MUL"] ['/ 2 "primDiv"]
	['= 2 "PRIM_EQ"] ['> 2 "PRIM_GT"] ['< 2 "PRIM_LT"] ['gensym 1 "primGenSym"] ['symbol? 1 "primIsSymbol"]
	['not 1 "primNot"] ['integer? 1 "primIsNumber"] ['string? 1 "primIsString"]])

  (defun builtin? (x)
    (not (null? (assq x *builtin-prims*))))

  (defun builtin->name (x)
    (let find (assq x *builtin-prims*)
      (if (null? find)
	  "ERROR"
	  (caddr find))))

  (defun builtin->args (x)
    (let find (assq x *builtin-prims*)
      (if (null? find)
	  "ERROR"
	  (cadr find))))

  (func temp-list
	0 res => res
	n res => (temp-list (- n 1) (cons (gensym 'tmp) res)))

  (defun var-with-ns (var ns)
    (cond
     ((= ns "") var)
     ((symbol-cooked? var) var)
     (true (intern (string-append ns (string-append "#" (symbol->string var)))))))

  (func lookup-var
	s ns [] => (var-with-ns s ns)
	s ns [import . more] => (let export (value-or (intern (string-append import "#*ns-export*")) ())
				  (if (elem? s export)
				      (intern (string-append import (string-append "#" (symbol->string s))))
				      (lookup-var s ns more))))

  (func parse
	_ _ _ globals x => ['%const x] where (or (number? x) (string? x) (boolean? x) (null? x))
	_ _ _ globals ['quote x] => (begin (add-symbol-to-list x globals) ['%const x])
	env ns import globals x => (if (elem? x env) x
				       (let v (lookup-var x ns import)
					    (begin
					     (add-symbol-to-list v globals)
					     ['%global v]))) where (symbol? x)
	env ns import globals ['lambda args body] => ['lambda args (parse (append args env) ns import globals body)]
	env ns import  globals ['if . args] => ['if . (map (parse env ns import globals) args)]
	env ns import globals ['do x y] => ['do (parse env ns import globals x) (parse env ns import globals y)]
	env ns import globals ['let a b c] => ['let a (parse env ns import globals b) (parse (cons a env) ns import globals c)]
	env _ _ globals ['ns path import body] => (parse env path import globals body)
	env ns import globals ['def var val] => (let var1 (var-with-ns var ns)
						     (begin
						      (add-symbol-to-list var1 globals)
						      [['%builtin 'set] ['%const var1] (parse env ns import globals val)]))
	env ns import globals [op . args] => (let required (builtin->args op)
					  provided (length args)
					  (cond
					    ((= required provided)  [['%builtin op] . (map (parse env ns import globals) args)])
					    ((> required provided)
					     ;; rewrite partial apply of primitives
					     ;; (+ x) => (lambda (tmp) (+ x tmp))
					     (let tmp (temp-list (- required provided) ())
						  (parse env ns import globals ['lambda tmp (append [op . args] tmp)])))
					    (true (error "primitive call mismatch"))))
	where (builtin? op)
	env ns import globals ls => (map (parse env ns import globals) ls))

  (func union
	[] s2 => s2
	[x . y] s2 => (union y s2) where (elem? x s2)
	[x . y] s2 => (cons x (union y s2)))

  (func diff
	[] _ => []
	[x . y] s2 => (diff y s2) where (elem? x s2)
	[x . y] s2 => (cons x (diff y s2)))

  (func convert-protect?
	['%const x] => true
	['%global x] => true
	['%builtin op] => true
	['quote x] => true
	['%closure-ref _] => true
	x => false)

  (func free-vars
	x => [] where (convert-protect? x)
	x => [x] where (symbol? x)
	['lambda args body] => (diff (free-vars body) args)
	['if x y z] => (foldl union [] (map free-vars [x y z]))
	['do x y] => (foldl union [] (map free-vars [x y]))
	['let a b c] => (union (free-vars b) (diff (free-vars c) [a]))

	;; the following three rules are used by explicit-stack, not by convert
	['%closure lam . more] => (free-vars [lam . more])
	['return x] => (free-vars x)
	['call exp cont] => (foldl union [] (map free-vars [exp cont]))
	['tailcall exp] => (free-vars exp)
	['continuation arg body] => (diff (free-vars body) arg)

	[f . args] => (foldl union [] (map free-vars [f . args])))

  (func closure-convert
	_ x => x where (convert-protect? x)
	fvs var => (let pos (index var fvs)
		     (if (= -1 pos)
			 var
			 ['%closure-ref pos])) where (symbol? var)
			 ;; fvs ['do x y] => (cons 'do (map (convert fvs) [x y]))
			 ;; fvs ['if a b c] => (cons 'if (map (convert fvs) [a b c]))
			 fvs ['lambda args body] =>
			 (let fvs1 (free-vars ['lambda args body])
			   ['%closure ['lambda args (closure-convert fvs1 body)] .
				      (map (closure-convert fvs) fvs1)])
			 fvs ['let a b c] => ['let a (closure-convert fvs b) (closure-convert fvs c)]
			 fvs [f . args] => (map (closure-convert fvs) [f . args]))

  (defun id (x) ['return x])

  ;; (+ (f g) 1) => (call (f g) (continuation (val) (+ val 1)))
  ;; (f g) => (tailcall (f g))
  ;; 42 => (return 42)
  (func tailify
	x next => (next x) where (or (symbol? x) (convert-protect? x))
	x _ => x where (convert-protect? x)
	['if a b c] next => (tailify a (lambda (ra)
					 ['if ra
					      (tailify b next)
					      (tailify c next)]))
	['do a b] next => (tailify a (lambda (ra)
				       (if (symbol? ra)
					   (tailify b next)
					   ['do ra (tailify b next)])))
	['let a b c] next => (tailify b (lambda (rb)
					  ['let a rb (tailify c next)]))
	['%closure ['lambda args body] . frees] next => (next ['%closure ['lambda args (tailify body id)] . frees])
	[f . args] next => (tailify-list [f . args] [] next))

  (func tailify-list
	[] ls next => (let exp (reverse ls)
			(cond
			 ((and (pair? (car exp)) (= (caar exp) '%builtin)) (wrap-var exp next))
			 ((= next id) ['tailcall exp])
			 (true (let val (gensym 'val)
				 ['call exp ['continuation [val] (next val)]]))))
	[hd . tl] ls next => (tailify hd (lambda (hd1)
					   (tailify-list tl [hd1 . ls] next))))

  ;; (continuation (val) body) => (continuation (lambda (vm val) body) . stacks)
  (func explicit-stack
	_ x => x where (convert-protect? x)
	fvs var => var where (symbol? var)
	;; fvs ['do x y] => (cons 'do (map (explicit-stack fvs) [x y]))
	;; fvs ['if a b c] => (cons 'if (map (explicit-stack fvs) [a b c]))
	;; fvs ['let a b c] => ['let a (explicit-stack fvs b) (explicit-stack fvs c)]
	;; fvs ['%closure lam . closed] => ['%closure (explicit-stack fvs lam) . closed]
	fvs ['lambda args body] => ['lambda args (explicit-stack fvs body)]
	fvs ['continuation val body] => (let fvs1 (diff (free-vars body) val)
					  (let fvs2 (map (explicit-stack fvs) fvs1)
					    ['%continuation ['lambda val (explicit-stack fvs1 body)] . fvs2]))
	fvs ['call exp cont] => ['call (map (explicit-stack fvs) exp) (explicit-stack fvs cont)]
	fvs [f . args] => (map (explicit-stack fvs) [f . args]))

  ;; [%closure (lambda ..) . frees] => [%closure Label . frees]
  ;; [%continuation (lambda ..) . stacks] => [%continuation Label . stacks]
  ;; collect the result to v (vector idx cur final)
  (func collect-lambda
	v [clo-or-cont ['lambda params body] . fvs] => (let body1 (collect-lambda v body)
							 cur (vector-ref v 0)
							 (if (= clo-or-cont '%closure)
							     (begin
							       (append-result v ['lambda params () body1])
							       [clo-or-cont cur (length params) . fvs])
							     (begin
							       (append-result v ['lambda params fvs body1])
							       [clo-or-cont cur . fvs])))
	where (or (= clo-or-cont '%closure) (= clo-or-cont '%continuation))
	v f-args => (map (lambda (e)
			   (collect-lambda v e)) f-args) where (cons? f-args)
			   v x => x)

  (defun append-result (v val)
    (let idx (vector-ref v 0)
      cur (vector-ref v 1)
      (let cur1 (cons [idx val] cur)
	(begin
	  (vector-set! v 0 (+ idx 1))
	  (vector-set! v 1 cur1)))))

  (defun wrap-var(x k)
    (let tmp (gensym 'reg)
      ['let tmp x
	(k tmp)]))

  (func generate-call-list
	self w i [] => ()
	self w i [x . more] => (begin
				 (if (not (> i 3))
				     (begin (generate-str w "__arg")
					    (generate-num w i))
				     (begin (generate-str w "co->args[")
					    (generate-num w i)
					    (generate-str w "]")))
				 (generate-str w " = ")
				 (generate-inst self () w x)
				 (generate-str w ";\n")
				 (generate-call-list self w (+ i 1) more)))

  (defun add-symbol-to-list (sym globals)
    (let val (value globals)
      (if (elem? sym val)
	  ()
	  (set globals (cons sym val)))))

  (defun generate-inst (self env w x1)
    (if (symbol? x1)
	(generate-sym w x1)
	(match x1
	  ['%global x] (begin
			 (generate-str w "globalRef(sym")
			 (generate-sym w x)
			 (generate-str w ")"))
	  ['%closure-ref idx] (begin
				(generate-str w "closureRef(co, ")
				(generate-num w idx)
				(generate-str w ")"))
	  ['%stack-ref idx] (begin
			      (generate-str w "stackRef(co, ")
			      (generate-num w idx)
			      (generate-str w ")"))
	  ['%const x] (cond
		       ((symbol? x) (begin
				      (generate-str w "sym")
				      (generate-sym w x)))
		       ((number? x) (begin
				      (generate-str w "MAKE_NUMBER(")
				      (generate-num w x)
				      (generate-str w ")")))
		       ((string? x) (begin
				      (generate-str w "makeCString(\"")
				      (generate-str w (escape-str x))
				      (generate-str w "\")")))
		       ((= x ()) (generate-str w "Nil"))
		       ((= x true) (generate-str w "True"))
		       ((= x false) (generate-str w "False")))
	  ['let a b c] (let idx (index a env)
			 (begin
			   (if (< idx 0) (generate-str w "Obj ") ())
			   (generate-sym w a)
			   (generate-str w " = ")
			   (generate-inst self env w b)
			   (generate-str w ";\n")
			   (generate-inst self (cons a env) w c)))
	  [['%builtin f] . args] (begin
				   (generate-str w (builtin->name f))
				   (if (= f 'set)
				       (generate-str w "(co, ")
				       (generate-str w "("))
				   (generate-inst-list self env w args)
				   (generate-str w ")"))
	  ['if a b c] (begin
			(generate-str w "if (True == ")
			(generate-inst self env w a)
			(generate-str w ") {\n")
			(generate-inst self env w b)
			(generate-str w "} else {\n")
			(generate-inst self env w c)
			(generate-str w "}\n"))
	  ['%closure label nargs . frees] (begin
					    (generate-str w "makeNative(")
					    (generate-num w (mod (- (car self) label) *mod-num*))
					    (generate-str w ", ")
					    (generate-group-name w label (car self))
					    (generate-str w ", ")
					    (generate-num w nargs)
					    (generate-str w ", ")
					    (generate-num w (length frees))
					    (if (not (null? frees))
						(begin
						  (generate-str w ", ")
						  (generate-inst-list self env w frees))
						())
					    (generate-str w ")"))
	  ['do a b] (begin
		      (generate-inst self env w a)
		      (generate-str w ";\n")
		      (generate-inst self env w b))
	  ['return x] (begin
			(generate-str w "__nargs = 2;\n")
			(generate-str w "__arg1 = ")
			(generate-inst self env w x)
			(generate-str w ";\n")
			(generate-str w "co->ctx = co->callstack.data[--co->callstack.len];\n")
			(generate-str w "if (co->ctx.pc.func != ")
			(generate-group-name w (cdr self) (car self))
			(generate-str w ") { goto fail; }\n")
			(generate-str w "goto *jumpTable[co->ctx.pc.label];\n"))
	  ['tailcall exp] (generate-inst self env w exp)
	  ['call exp cont] (begin
			     (generate-cont self w cont)
			     (generate-inst self env w exp))
	  [f . args] (begin
		       (generate-str w "__nargs = ")
		       (generate-num w (+ 1 (length args)))
		       (generate-str w ";\n")
		       (generate-call-list self w 0 [f . args])
		       (generate-str w "co->ctx.frees = __arg0;\n")
		       (generate-str w "struct pcState ps = OBJ_FIELD(__arg0, scmNative, code);\n")
		       (generate-str w "if (OBJ_FIELD(__arg0, scmNative, required)+1 != __nargs) { co->ctx.pc.func = coraDispatch; goto fail; };\n")
		       (generate-str w "if (ps.func != ")
		       (generate-group-name w (cdr self) (car self))
		       (generate-str w ") { co->ctx.pc = ps; goto fail; };\n")
		       (generate-str w "goto *jumpTable[ps.label];\n")))))

  ;; (func .generate-call-args
  ;;       env w idx [] => ()
  ;;       env w idx [a . b] => (begin
  ;; 			    (generate-str w "co->args[")
  ;; 			    (generate-num w idx)
  ;; 			    (generate-str w "] = ")
  ;; 			    (generate-inst env w a)
  ;; 			    (generate-str w ";\n")
  ;; 			    (.generate-call-args env w (+ idx 1) b)))

  (func generate-cont
	self w ['%continuation label . stacks] => (begin
						    (generate-str w "PUSH_CONT(co, ")
						    (generate-num w (mod (- (car self) label) *mod-num*))
						    (generate-str w ", ")
						    (generate-group-name w label (car self))
						    (generate-str w ", ")
						    (generate-num w (length stacks))
						    (if (not (null? stacks))
							(for-each (lambda (x)
								    (begin
								      (generate-str w ", ")
								      (generate-inst self () w x)))
								  stacks)
							())
						    (generate-str w ");\n")))

  (func generate-inst-list-h
	self env fn w [] => ()
	self env fn w [a . b] => (begin (fn self env w a)
					(if (not (null? b))
					    (generate-str w ", ")
					    ())
					(generate-inst-list-h self env fn w b)))

  (defun generate-inst-list (self env w l)
    (generate-inst-list-h self env generate-inst w l))

  (def *mod-num* 50)

  (defun generate-group-name (w label maxid)
    (let gid (/ (- maxid label) *mod-num*)
      (begin
           (generate-str w "clofun")
           (generate-num w gid))))

  (defun code-gen-func-declare (w label maxid)
    (begin
      (generate-str w "static void ")
      (generate-group-name w label maxid)
      (generate-str w "(struct Cora* co")
      (generate-str w ")")))

  (defun local-from-params (w i var)
    (begin
      (generate-str w "Obj ")
      (generate-inst 'ignore () w var)
      (if (< i 4)
	  (begin (generate-str w " = __arg")
		 (generate-num w i)
		 (generate-str w ";\n"))
	  (begin (generate-str w " = co->args[")
		 (generate-num w i)
		 (generate-str w "];\n")))))

  (defun local-from-cont (w i var)
    (begin
      (generate-str w "Obj ")
      (generate-inst 'ignore () w var)
      (generate-str w  "= co->ctx.stk.stack[co->ctx.stk.base + ")
      (generate-num w i)
      (generate-str w "];\n")))

  (func generate-call-args-reverse
	fn w idx [] => ()
	fn w idx [a . b] => (begin
			      (fn w idx a)
			      (generate-call-args-reverse fn w (+ idx 1) b)))

  (func code-gen-toplevel
	w [label ['lambda params actives body]] maxid => (begin
						     (generate-str w "label")
						     (generate-num w (mod (- maxid label) *mod-num*))
						     (generate-str w ":\n{\n")
						     (generate-call-args-reverse local-from-params w 1 params)
						     (generate-call-args-reverse local-from-cont w 0 actives)
						     (generate-inst (cons maxid label) params w body)
						     (generate-str w "}\n\n"))
	w other maxid =>  (begin (display "wrong format of toplevel\n")
			   (display other)
			   (display "\n")))

  (defun parse-pass (globals exp)
    (parse [] "" [] globals exp))

  (defun closure-convert-pass (exp)
    (closure-convert [] exp))

  (defun tailify-pass (exp)
    (tailify exp id))

  (defun explicit-stack-pass (exp)
    (explicit-stack [] exp))

  (defun collect-lambda-pass (exp)
    (let v (vector 2)
      (begin (vector-set! v 0 0)
	     (vector-set! v 1 ())
	     (let e1 (collect-lambda v exp)
	       (begin
		 (append-result v ['lambda () () e1])
		 (vector-ref v 1))))))

  (func rewrite-->macro
	obj [] => obj
	obj [hd . more] => (rewrite-->macro [hd obj] more))

  (defmacro -> (exp)
    (let obj (cadr exp)
      (let fns (cddr exp)
	(rewrite-->macro obj fns))))

  (defun compile (globals exp)
    (-> exp
	(parse-pass globals)
	closure-convert-pass
	tailify-pass
	explicit-stack-pass
	collect-lambda-pass))

  (func for-each
	fn [] => []
	fn [x . y] => (begin
			(fn x)
			(for-each fn y)))

  (defun generate-jumptable (to i n)
    (cond
     ((= i 0) (begin
		(generate-str to "&&label0")
		(generate-jumptable to 1 n)))
     ((< i n) (begin
		(generate-str to ", &&label")
		(generate-num to i)
		(generate-jumptable to (+ i 1) n)))
     (true ())))

  (defun generate-toplevel-group (to group maxid)
    (begin
      (code-gen-func-declare to (caar group) maxid)
      (generate-str to "{\n")

      (generate-str to "int __nargs = co->nargs;\n")
      (generate-str to "Obj __arg0 = co->args[0];\n")
      (generate-str to "Obj __arg1 = co->args[1];\n")
      (generate-str to "Obj __arg2 = co->args[2];\n")
      (generate-str to "Obj __arg3 = co->args[3];\n\n")

      (generate-str to "static void* jumpTable[] = {")
      (generate-jumptable to 0 (length group))
      (generate-str to "};\n\n")
      (generate-str to "goto *jumpTable[co->ctx.pc.label];\n\n")

      (for-each (lambda (x) (code-gen-toplevel to x maxid)) group)

      (generate-str to "fail:\n")
      (generate-str to "co->nargs = __nargs;\n")
      (generate-str to "co->args[0] = __arg0;\n")
      (generate-str to "co->args[1] = __arg1;\n")
      (generate-str to "co->args[2] = __arg2;\n")
      (generate-str to "co->args[3] = __arg3;\n")

      (generate-str to "\n}\n\n")))

  (func group-by-mod-h
	res idx acc [] => (reverse (if (not (null? acc))
				       (cons (reverse acc) res)
				       res))
	res idx acc [bc . more] => (if (= idx *mod-num*)
				       (group-by-mod-h (cons (reverse acc) res) 0 [] [bc . more])
				       (group-by-mod-h res (+ idx 1) (cons bc acc) more)))

  (defun generate-entry (to globals)
    (begin
      (for-each (lambda (sym)
		  (begin
		    (generate-str to "static Obj sym")
		    (generate-sym to sym)
		    (generate-str to ";\n"))) globals)
      (generate-str to "void entry(struct Cora *co) {\n")
      (for-each (lambda (sym)
		  (begin
		    (generate-str to "sym")
		    (generate-sym to sym)
		    (generate-str to " = intern(\"")
		    (generate-str to (symbol->string sym))
		    (generate-str to "\");\n"))) globals)
      (generate-str to "clofun0(co);\n}\n")))

  (defun generate-c (to bc globals)
    (let groups (group-by-mod-h [] 0 [] bc)
	 maxid (caar bc)
	 (begin
	  (generate-str to "#include \"types.h\"\n")
	  (generate-str to "#include \"runtime.h\"\n\n")
	  (for-each (lambda (group)
		      (begin
		       (code-gen-func-declare to (caar group) maxid)
		       (generate-str to ";\n")))
		    groups)
	  (generate-str to "\n\n")
	  (generate-entry to (value globals))
	  (for-each (lambda (group)
		      (generate-toplevel-group to group maxid))
		    groups))))

  (func handle-import-eagerly
	['define-library _ . remain] => (handle-import-eagerly remain)
	['begin . remain] => (handle-import-eagerly remain)
	[['export . more] . remain] => (handle-import-eagerly remain)
	[['import pkg] . remain] => (begin
				      (import pkg)
				      ;; (display "import ==")
				      ;; (display pkg)
				      ;; (display "\n\n")
				      (handle-import-eagerly remain))
	_ => ())

  (func split-type-and-code
	[] type code k => (k (reverse type) (reverse code))
	[[':type . exp] . more] type code k => (split-type-and-code more (cons ['begin . exp] type) code k)
	[[':declare . exp] . more] type code k => (split-type-and-code more (cons ['declare . exp] type) code k)
	[exp . more] type code k => (split-type-and-code more
							 (cons ['cora/lib/infer#check-type ['macroexpand (cons 'backquote (cons exp ()))] ['tvar] () ()] type)
							 (cons exp code) k))

  (set 'cora/lib/infer#*typecheck* false)

  (defun preprocess (file-path)
    (let sexp (read-file-as-sexp file-path)
      (begin
	(handle-import-eagerly sexp)
	sexp)))

  (defun compile-to-c (from to)
    (let globals (gensym 'collect)
	 (begin
	  (set globals ())
	  (let bc (-> from
		      preprocess
		      macroexpand
		      (compile globals))
	       (let stream (open-output-file to)
		    (begin
		     (generate-c stream bc globals)
		     (close-output-file stream)))))))

    )
