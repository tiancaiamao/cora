;; ~~PEG from janet https://bakpakin.com/writing/how-janets-peg-works.html~~
;; outdated!!!
;; (func match-peg
;;       ['! x] text => (let pos (match-peg x text)
;; 			  (if (> pos 0)
;; 			      0
;; 			      1))
;;       ['+ x y] text => (let pos (match-peg x text)
;; 			    (if (= pos 0)
;; 				(match-peg y text)
;; 				pos))
;;       ['* x y] text => (let pos1 (match-peg x text)
;; 			    (if (> pos1 0)
;; 				(let pos2 (match-peg y (string/slice text pos1))
;; 				     (if (> pos2 0)
;; 					 (+ pos1 pos2)
;; 					 0))
;; 				0))
      
;;       peg text => (if (string/has-prefix? text peg)
;; 		      (string/length peg)
;; 		      0))


;; (set '<digits> ['+ "0" ['+ "1" ['+ "2" ['+ "3"
;;    ['+ "4" ['+ "5" ['+ "6" ['+ "7" ['+ "8" "9"]]]]]]]]])
;; (set '<year> ['* <digits> ['* <digits> ['* <digits> <digits>]]])
;; (set '<month> ['* <digits> <digits>])
;; (set '<day> <month>)
;; (set '<iso-date> ['* <year> ['* "-" ['* <month> ['* "-" <day>]]]])

;; (match-peg <iso-date> "2019-06-10")
;; (match-peg <iso-date> "201-06-10")

;; ============= A parser combinator library ============
;; - parser combinator style DSL
;; - no ambiguities, determined order choice like PEG
;; - provide (cut) to control the backtrace behavior
;; - provide chainl1 to handle left-recursive
(package "cora/lib/peg"

	 (export <char> <satisify> <range> <eof> <string>
		 @seq @or @! @+ @* @?
		 $map $bind)
	 (import "cora/lib/string")

	 ;; --- parser primitives ---

	 ;; match a character
	 (defun <char> (c)
	   (lambda (toks)
	     (if (and (cons? toks)
		      (= (car toks) c))
		 ['ok c (cdr toks)]
		 ['fail toks])))

	 (func sub-list?
	       [] rem => ['ok rem]
	       [h1 . t1] [h2 . t2] => (if (= h1 h2)
					  (sub-list? t1 t2)
					  ['fail]))

	 ;; matches string str
	 (defun <string> (str)
	   (lambda (toks)
	     (let target (string->list str)
	       (match (sub-list? target toks)
		 ['ok rem] ['ok str rem]
		 ['fail] ['fail toks]))))

	 ;; match a character that the predicate return true
	 (defun <satisify> (pred)
	   (lambda (toks)
	     (if (and (cons? toks)
		      (pred (car toks)))
		 ['ok (car toks) (cdr toks)]
		 ['fail toks])))

	 ;; match any char between c1 and c2
	 (defun <range> (c1 c2)
	   (lambda (toks)
	     (if (and (cons? toks)
		      (let v (car toks)
			(and (not (< v c1))
			     (not (> v c2)))))
		 ['ok (car toks) (cdr toks)]
		 ['fail toks])))

	 ;; end of the matching
	 (defun <eof> ()
	   (lambda (toks)
	     (if (null? toks)
		 ['ok () ()]
		 ['fail toks])))

	 ;; matches any character
	 ;; (defun <any-char> ()
	 ;;   (lambda (toks)
	 ;;     ...))

	 ;; always succeeds
	 ;; (defun <epsilon> ()
	 ;;   (lambda (toks)
	 ;;     ...))


	 ;; --- parser combinators ---

	 ;; match a sequence of parser
	 (defun @seq (p1 p2)
	   (lambda (toks)
	     (match (p1 toks)
	       ['fail toks] ['fail toks]
	       ['ok v1 toks1] (match (p2 toks1)
				['fail toks2] ['fail toks2]
				['ok v2 toks2] ['ok (cons v1 v2) toks2]))))

	 (func rewrite-@seq
	       [p q] => ['@seq p q]
	       [p q . more] => ['@seq p (rewrite-@seq [q . more])])

	 (defmacro @seq (exp)
	   (rewrite-@seq (cdr exp)))

	 ;; match one of the parser in order
	 (defun @or (p1 p2)
	   (lambda (toks)
	     (match (p1 toks)
	       ['ok v1 toks] ['ok v1 toks]
	       ['fail toks] (p2 toks))))

	 (defun @! (p)
	   (lambda (toks)
	     (match (p toks)
	       ['ok _ toks1] ['fail toks1]
	       ['fail toks1] ['ok v toks1])))

	 (defun recur-h (p toks res k)
	   (match (p toks)
	     ['ok v toks1] (recur-h p toks1 (cons v res) k)
	     ['fail toks1] (k res toks1)))
	 
	 ;; match p 1 or more times
	 (defun @+ (p)
	   (lambda (toks)
	     (recur-h p toks ()
		      (lambda (res toks1)
			(if (> (length res) 0)
			    ['ok (reverse res) toks1]
			    ['fail toks1])))))

	 ;; match p 0 or more times
	 (defun @* (p)
	   (lambda (toks)
	     (recur-h p toks ()
		      (lambda (res toks1)
			['ok (reverse res) toks1]))))

	 (defun @? (p)
	   (lambda (toks)
	     (match (p toks)
	       ['ok v toks1] ['ok v toks1]
	       ['fail toks1] ['ok () toks1])))

	 ;; (defun @& (p)
	 ;;   ...)

	 (defun $map (p f)
	   (lambda (toks)
	     (match (p toks)
	       ['ok v toks1] ['ok (f v) toks1]
	       ['fail toks1] ['fail toks1])))

	 (defun $bind (p f)
	   (lambda (toks)
	     (match (p toks)
	       ['ok v toks1] ((f v) toks1)
	       ['fail toks1] ['fail toks1])))

	 )
