(package "cora/lib/async"

  (import "cora/lib/sys")
  (import "cora/lib/io")
  (import "cora/lib/net")
  (import "cora/lib/queue")
  (import "cora/lib/hash")
  (import "cora/lib/cml")

  (export recv send accept)

  (def block-queue (hash-make 64))
  (defun add-blocked-queue (fd val)
    (hash-set! block-queue fd val))
  (defun remove-blocked-queue (fd)
    (hash-del! block-queue fd))
  (defun blocked-queue-empty? ()
    (= 0 (hash-count block-queue)))
  (defun find-blocked-by-fd (fd)
    (cdr (hash-get block-queue fd)))

  (func recv-handler
	[fd buf pos] k => (begin
			    ;; (display "run in recv-handler\n")
			    (match (net-recv fd buf pos)
			      [block pos] (begin
					    (add-blocked-queue fd ['Recv fd buf pos k])
					    (net-poll-add fd 'read)
					    ;; (display "recv-handler block and go to scheduler\n")
					    (schedule)
					    ;; (display "finish schedule in recv-handler")
					    )
			      res (begin
				    ;; (display "before recv handler direct return\n")
				    (spawn (lambda () (k res)))
				    ;; (display "after recv handler direct return\n")
				    ))))

  (defun default-wrap (x) x)

  (defun recv-op (fd buf pos)
    (let try (lambda () false)
      block (lambda (k wrap)
	      (begin
		(add-blocked-queue fd ['Recv fd buf pos k])
		(net-poll-add fd 'read)))
      [try block default-wrap]))

  (defun recv (fd buf)
    (begin
      ;; (display "in recv ---\n")
      (perform (recv-op fd buf 0))))

  (func send-handler
	[fd buf pos] k => (match (net-send fd buf pos)
			    [block pos] (begin
					  (add-blocked-queue fd ['Send fd buf pos k])
					  (net-poll-add fd 'write)
					  ;; (display "send-handler block and go to schedule\n")
					  (schedule)
					  ;; (display "finish send-handler\n")
					  )
			    res (spawn (lambda () (k res))))
	_ k => (display "wrong argument for send-handler\n"))


  (defun send-op (fd buf pos)
    (let try (lambda () false)
      block (lambda (k wrap)
	      (begin
		(add-blocked-queue fd ['Send fd buf pos k])
		(net-poll-add fd 'write)))
      [try block default-wrap]))

  (defun send (fd buf)
    (begin
      (perform (send-op fd buf 0))
      ;; (display buf)
      ;; (display "send success!\n")
      ))

  (defun accept-op (ln)
    (let try (lambda () false)
      block (lambda (k wrap)
	      (begin
		(add-blocked-queue ln ['Accept ln k])
		(net-poll-add ln 'read)))
      [try block default-wrap]))

  (defun accept (ln)
    (perform (accept-op ln)))

  (defun scheduler (timeout)
    (if (blocked-queue-empty?)
	(begin
	  ;; (display "block queue empty!!\n")
	  false) ;; no more task
	(let ready-fds (net-poll timeout)
	  (or (null? ready-fds)
	      (begin
		;; (display ready-fds)
		;; (display "ready-blocks\n")
		(for-each (lambda (fd)
			    (let msg (find-blocked-by-fd fd)
			      (begin
				;; (display "poll find blocked fd")
				;; (display msg)
				;; (display "\n")
				(match msg
				  ['Send fd buf pos k] (send-handler [fd buf pos] k)
				  ['Recv fd buf pos k] (recv-handler [fd buf pos] k)
				  ['Accept fd k] (spawn (lambda () (k (net-accept fd))))
				  _ (error "don't know how to handle task?"))
				;; (display fd)
				;; (display "remove blocked queue\n")
				(remove-blocked-queue fd))))
			  ready-fds)
		true)))))

  (register-scheduler scheduler)
  )
