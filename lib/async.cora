(load "lib/sys.cora")
(load "lib/queue.cora")
(load "lib/eff.cora")

(let s1 (gensym 's1)
     s2 (gensym 's2)
     (begin
      (set s1 ())
      (set s2 ())
      (set 'enqueue (make-enqueue s1 s2))
      (set 'dequeue (make-dequeue s1 s2))
      (set 'empty? (empty-queue? s1 s2))))

(let s (gensym 'block)
     (begin
      (set s ())
      (defun add-blocked-queue (fd val)
        (set s (cons (cons fd val) (value s))))
      (defun remove-blocked-queue (fd)
        (set s (filter (lambda (x) (not (= fd (car x)))) (value s))))
      (defun blocked-queue-empty? ()
        (null? (value s)))
      (defun collect-blocked-fds ()
        (map car (value s)))
      (defun find-blocked-by-fd (fd)
        (assq fd (value s)))))

(func recv-handler
      [fd buf pos] k => (begin
			 ;; (display "run in recv-handler")
			 (match (net-recv fd buf pos)
				[block pos] (begin
					     (add-blocked-queue fd ['Blocked ['Recv fd buf pos] k])
					     ;; (display "recv-handler block and go to scheduler\n")
					     (schedule)
					     ;; (display "finish schedule in recv-handler")
                         )
				res (k res))))

(func send-handler
      [fd buf pos] k => (match (net-send fd buf pos)
                               [block pos] (begin
                                            (add-blocked-queue fd ['Blocked ['Send fd buf pos] k])
                                            ;; (display "send-handler block and go to schedule\n")
                                            (schedule)
                                            ;; (display "finish send-handler")
                                            )
                               res (k res))
      _ k => (display "wrong argument for send-handler"))

(defun accept-handler (ln k)
  (begin
   (add-blocked-queue ln ['Blocked ['Accept ln] k])
   (net-accept-1 ln)
   ;; (display "before accept handle go to schedule")
   ;; (display ln)
   (schedule)
   (display "finish schedule")))

(defun yield-handler (_ cc)
  (begin
   (enqueue cc)
   (let task (dequeue)
	(task ()))))

(defun spawn-handler (fn k)
  (begin
   (enqueue k)
   (run fn)))


(defun run (main)
  (handler (lambda (_) (schedule))
	   ['Send send-handler
	   'Recv recv-handler
	   'Accept accept-handler
	   'Spawn spawn-handler
	   'Yield yield-handler]
	   main))

(defun schedule ()
  (if (not (empty?)) ;; running-queue
      (begin
       ;; (display "handle running queue...")
       (let task (dequeue)
            (task ())))
      (if (blocked-queue-empty?)
          (display "no more task, exit!") ;; no more task
          (begin
           (let ready-fds (net-poll)
                (for-each (lambda (fd)
                            (begin
                             (match (find-blocked-by-fd fd)
                                    [fd . ['Blocked ['Accept ln] k]] (k (net-accept-2 fd))
                                    [fd . ['Blocked ['Recv . data] k]] (recv-handler data k)
                                    [fd . ['Blocked ['Send . data] k]] (send-handler data k)
                                    _ (error "fd is not found in the blocked list?"))
                             (remove-blocked-queue fd)))
                          ready-fds))
           (schedule)))))

;; (defun accept-loop (ln)
;;   (yield fd (eff 'Accept ln)
;;          (yield _ (eff 'Spawn (lambda (_)
;;                                 (handle-conn fd)))
;;                 (accept-loop ln))))

;; (defun handle-conn (fd)
;;   (yield v (eff 'Send [fd "hello world" 0])
;;          (let buf (make-buffer 11)
;;               (yield _ (eff 'Recv [fd buf 0])
;;                      (begin
;;                       (display buf)
;;                       (net-close fd))))))

;; (defun client-main (_)
;;   (let fd (net-dial "127.0.0.1:8080")
;;        buf (make-buffer 11)
;;        (yield v (eff 'Recv [fd buf 0])
;;               (begin
;;                (display buf)
;;                (yield v (eff 'Send [fd "hello arthur" 0])
;;                       (net-close fd))))))

;; (defun server-main (_)
;;   (let ln (net-listen "127.0.0.1:8080")
;;        (accept-loop ln)))

;; (run server-main)
;; (run client-main)
