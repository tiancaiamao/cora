(import "cora/lib/sys")
(import "cora/lib/net" net)
(@import "cora/lib/queue" queue)

(set '.task-queue (queue.make))
(set '.enqueue (queue.enqueue .task-queue))
(set '.dequeue (queue.dequeue .task-queue))
(set '.empty? (queue.empty? .task-queue))

(func .recv-handler
      [fd buf pos] k => (begin
			 ;; (display "run in recv-handler")
			 (match (net.recv fd buf pos k)
				[block] (schedule)
				res (k res))))

(func .send-handler
      [fd buf pos] k => (match (net.send fd buf pos k)
			       [block] (schedule)
			       res (k res))
      _ k => (display "wrong argument for send-handler"))

(defun .accept-handler (ln k)
  (begin
   (net.accept-1 ln k)
   ;; (display "before accept handle go to schedule")
   ;; (display ln)
   (schedule)
   (display "finish schedule")))

(defun .yield-handler (cc)
  (begin
   (.enqueue cc)
   (let task (.dequeue)
	(task ()))))

(defun .spawn-handler (fn k)
  (begin
   (.enqueue k)
   (run fn)))

(defun run (main)
  (try main .trap-in-handler))

(func .trap-in-handler
      ['Spawn . data] k =>  (.spawn-handler data k)
      ['Yield] k => (.yield-handler k)
      ['Send . data] k =>  (.send-handler data k)
      ['Accept . data] k =>  (.accept-handler data k)
      ['Recv . data] k => (.recv-handler data k)
      _ => (error "wrong type of trap in"))

(defun .schedule ()
  (if (not (empty?)) ;; running-queue
      (begin
       ;; (display "handle running queue...")
       (let task (.dequeue)
	    (task ())))
      (let ready-tasks (net.poll)
	   (if (null? ready-tasks)
	       (display "no more task, exit!") ;; no more task
	       (begin
		(for-each (lambda (task)
			    (match task
				   ['Send fd buf pos k] (.send-handler [fd buf pos] k)
				   ['Recv fd buf pos k] (.recv-handler [fd buf pos] k)
				   ['Accept fd k] (k (net.accept-2 fd))
				   _ (error "don't know how to handle task?")))
			  ready-tasks)
		(.schedule))))))

;; (defun accept-loop (ln)
;;   (yield fd (eff 'Accept ln)
;;          (yield _ (eff 'Spawn (lambda (_)
;;                                 (handle-conn fd)))
;;                 (accept-loop ln))))

;; (defun handle-conn (fd)
;;   (yield v (eff 'Send [fd "hello world" 0])
;;          (let buf (make-buffer 11)
;;               (yield _ (eff 'Recv [fd buf 0])
;;                      (begin
;;                       (display buf)
;;                       (net.close fd))))))

;; (defun client-main (_)
;;   (let fd (net.dial "127.0.0.1:8080")
;;        buf (make-buffer 11)
;;        (yield v (eff 'Recv [fd buf 0])
;;               (begin
;;                (display buf)
;;                (yield v (eff 'Send [fd "hello arthur" 0])
;;                       (net.close fd))))))

;; (defun server-main (_)
;;   (let ln (net.listen "127.0.0.1:8080")
;;        (accept-loop ln)))

;; (run server-main)
;; (run client-main)
