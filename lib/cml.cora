;; concurrent ml
;; ref https://wingolog.org/archives/2018/05/16/lightweight-concurrency-in-lua
;; https://wingolog.org/archives/2017/06/29/a-new-concurrent-ml
;; "Toward a parallel implementation of Concurrent ML"    John Reppy
;; "Parallel Concurrent ML"          John Reppy

(define-library "cora/lib/cml"
  (import "cora/lib/queue")
  (import "cora/lib/rand")
  (import "cora/lib/sys")
  (import "cora/lib/io")
  (export spawn yield main wrap perform schedule enqueue-task register-scheduler)

  (def task-queue (queue-make))

  (defun enqueue-task (thunk)
    (enqueue task-queue thunk))

  (defun spawn (thunk)
    (enqueue-task (lambda ()
		    (try thunk
			 (lambda (v k)
			   (v k))))))

  (def external-schedulers ())
  (defun register-scheduler (fn)
    (set 'cora/lib/cml#external-schedulers (cons fn external-schedulers)))

  (defun run-external-schedulers (timeout)
    (foldl (lambda (succ sched)
		 (let res (sched timeout)
		      (or succ res)))
	       false
	       external-schedulers))

  ;; schedule take a task out and execute it
  ;; return false if no more tasks
  (defun schedule ()
    (begin
     (display "schedule()\n")
     (let more-work (run-external-schedulers 0)
	  (if (queue-empty? task-queue)
	      (if more-work
		  (begin
		   ;; (display "schedule 2()\n")
		   (run-external-schedulers -1))
		  ())
	      (let task (dequeue task-queue)
		   (begin
		    ;; (display "dequeue and run task\n")
		    (task)))))))

  (defun main ()
    (schedule))

  (defun yield ()
    (throw (lambda (k)
	     (begin
	       (enqueue task-queue (lambda () (k ())))
	       (main)))))


  (defun default-wrap (x) x)

  ;; wrap an operation to get another operation.
  ;; fn receive the value of the operation.
  (func wrap
	[try block wrap] fn => [try block (lambda (v) (fn (wrap v)))])

  (func choice-ops-try
	[] => false
	[[try1 block1 wrap1] . remain] => (match (try1)
					    false (choice-ops-try remain)
					    v (wrap1 v)))

  (defun choice-op (ops)
    (let try (lambda () (choice-ops-try ops))
      block (lambda (k wrap)
	      (for-each (lambda (op)
			  (match op
			    [try1 block1 wrap1]
			    (block1 k (lambda (v)
					(wrap (wrap1 v))))))
			ops))
      [try block default-wrap]))

  (func random-split
	[] to1 to2 => (cons to1 to2)
	[hd . tl] to1 to2 => (if (= (randN 2) 0)
				 (random-split tl (cons hd to1) to2)
				 (random-split tl to1 (cons hd to2))))

  (func random-merge
	[] from to => (append from to)
	from [] to => (append from to)
	from1 from2 to => (if (= (randN 2) 0)
			      (random-merge (cdr from1) from2 (cons (car from1) to))
			      (random-merge from1 (cdr from2) (cons (car from2) to))))

  (func shuffle-h
	l 0 => l
	l n => (let tmp (random-split l [] [])
		 (let res (random-merge (car tmp) (cdr tmp) [])
		   (shuffle-h res (- n 1)))))

  (defun shuffle (arr)
    (shuffle-h arr (/ (+ 1 (length arr)) 2)))

  (defmacro choice (input)
    ['cora/lib/cml#choice-op ['cora/lib/cml#shuffle (cons 'list (cdr input))]])

  ;; ;; perform performs an operation.
  ;; ;; an operation consistent of [try block wrap]
  ;; ;; Usage example:
  ;; ;; (perform (choice
  ;; ;; 	  (wrap (recv ch1)
  ;; ;; 		   (lambda (v) ...))
  ;; ;; 	  (wrap (send ch2)
  ;; ;; 		   (lambda (v) ...))))
  (defun perform (op)
    (let try (car op)
	 block (cadr op)
	 wrap (caddr op)
	 (let v (try)
	      (if (= v false)
		  (throw (lambda (k)
			   (begin
			    (block k wrap)
			    (schedule))))
		  (wrap v)))))
  )

