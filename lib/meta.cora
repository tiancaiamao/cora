(func assq
      var [] => ()
      var [(cons x y) . _] => (cons x y) where (= var x)
      var [_ . y] => (assq var y))

(func walk-h
      f ['quote x] => ['quote x]
      f [x . y] => (map (walk-h f) [x . y])
      f x => (f x))

;; =============== define-library utilities ======

(func parse-define-library-h
      [['import lib] . rest] imports exports k => (parse-define-library-h rest (cons lib imports) exports k)
      [['export . more] . rest]  imports exports k => (parse-define-library-h rest imports more k)
      body imports exports k => (k (reverse imports) exports body))

(defun parse-define-library (data k)
  (parse-define-library-h data () () k))

(defmacro define-library (sexp)
  (let path (cadr sexp)
       ((parse-define-library (cddr sexp))
	(lambda (import export body)
	  ['ns path import
	  ['begin ['set (intern (string-append path "#*ns-export*")) ['backquote export]] . body]]))))
