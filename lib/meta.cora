(@import "cora/lib/string" string)

(defun fake-import (path)
  `(foo bar bax))

(func assq
      var [] => ()
      var [(cons x y) . _] => (cons x y) where (= var x)
      var [_ . y] => (assq var y))

(func walk
      f [x . y] => (map (walk f) [x . y])
      f x => (f x))

(defun global-syntax? (s)
  (cond
    ((elem? s ['if 'do 'lambda 'let]) true)
    ((elem? s cora/init#*default-ns*) true)
    (true (let find (assq s *macros*)
	       (if (null? find)
		   false
		   true)))))

(func imported-syntax?
      [] s => false
      [(cons symbols path) . more] s => (if (elem? s symbols)
					    path
					    (imported-syntax? more s)))

(func parse-define-library-h
      [['import lib] . rest] imports exports k => (parse-define-library-h rest (cons lib imports) exports k)
      [['export . more] . rest]  imports exports k => (parse-define-library-h rest imports more k)
      body imports exports k => (k (reverse imports) exports (cons 'begin body)))

(defun parse-define-library (data k)
  (parse-define-library-h data () () k))

(defun rewrite-syntax (self imports s)
  (if (global-syntax? s)
      s
      (let pkg (imported-syntax? imports s)
	   (let ns (if (string? pkg) pkg self)
		(intern (string.append ns (string.append "#" (symbol->string s))))))))

(defmacro define-library (sexp)
  (let self (cadr sexp)
       remain (cddr sexp)
       ((parse-define-library remain)
	(lambda (imports exports body)
	  (let libexports (map (lambda (path)
				 (cons (fake-import path) path))
			       imports)
	       (let body1 (walk (lambda (s)
				  (if (symbol? s)
				      (rewrite-syntax self libexports s)
				      s)) body)
		    (append body1 (cons ['backquote exports] ()))))))))
