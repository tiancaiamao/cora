;; (let-loop recur (i 0 y 1)
;;           (if (= i 100)
;;               42
;;             (recur (+ i 1) y)))
;;  ==>
;; (let recur (gensym 'recur)
;;      ((set recur (lambda (i y)
;;                    (if (= i 100)
;;                        42
;;                      (recur (+ i 1) y))))
;;       0 1))

(func extract-params-h
      res [] => (reverse res)
      res [x y . l] => (extract-params-h [x . res] l))

(func extract-init-h
      res [] => (reverse res)
      res [x y . l] => (extract-init-h [y . res] l))

(func rewrite-let-loop-macro
      [recur param-init body] => (let params (extract-params-h [] param-init)
                                    inits (extract-init-h [] param-init)
                                    ['let recur ['quote (gensym 'gen-loop)]
                                          [['set recur ['lambda params body]]
                                           . inits]]))

(defmacro let-loop (exp)
  (rewrite-let-loop-macro (cdr exp)))

;; (func fold
;;       acc fn [] => acc
;;       acc fn [h . t] => (fold (fn acc h) fn t))

;; (func range-h
;;       res start end => (reverse res) where (= start end)
;;       res start end => (range-h [start . res] (+ start 1) end))

;; (defun range (start end)
;;   (range-h () start end))
