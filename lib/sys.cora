(package "cora/lib/sys"

  (export assq foldl for-each member thread-local-get thread-local-set)

  (defun thread-local-get (key)
    (let find (assq key (value (vm-symbol-for-tls)))
	 (if (null? find)
	     (error "get non-exist key")
	     (cdr find))))

  (defun thread-local-set (key val)
    (let var (vm-symbol-for-tls)
	 old-val (value var)
	 new-val (cons (cons key val) (filter (lambda (x) (not (= key (car x)))) old-val))
	 (set var new-val)))

  (func assq
	var [] => ()
	var [(cons x y) . _] => (cons x y) where (= var x)
	var [_ . y] => (assq var y))

  (func foldl
	f acc [] => acc
	f acc [x . y] => (foldl f (f acc x) y))

  (func for-each
	fn [] => []
	fn [x . y] => (begin
			(fn x)
			(for-each fn y)))

  (func member
	x [] => false
	x [y . z] => (or (= x y)
			 (member x z)))

  )
