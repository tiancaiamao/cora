(func assv
      s [] => []
      s [[x . y] . z] => [x . y] where (= s x)
      s [_ . z] => (assv s z))

(defun extend (env var val)
  (cons (cons var val) env))

(func subst
      env var => (let find (assv var env)
		      (if (null? find)
			  var
			(cdr find)))
      where (symbol? var)
      env uni => uni where (number? uni)
      env ['pi [x A] B] => ['pi . (subst-abstruction env x A B)]
      env ['lambda [x A] B] => ['lambda . (subst-abstruction env x A B)]
      env [f x] => [(subst env f) (subst env x)])

(func subst-abstruction
      env x t e => (let x1 (gensym x)
			[[x1 (subst env t)] (subst (extend env x x1) e)]))

(func get-type
      ['#def t v] => t
      ['#bind t] => t)

(func infer-type
      ctx x =>  (let find (assv x ctx)
		     (if (null? find)
			 (error "unknown identifer %s" x)
		       (get-type (cdr find))))
      where (symbol? x)
      ctx uni => (+ uni 1) where (number? uni)
      ctx ['pi [x t1] t2] => (let k1 (infer-universe ctx t1)
				  (let k2 (infer-universe (extend ctx x ['#bind t1]) t2)
				       (if (> k1 k2) k1 k2)))
      ctx ['lambda [x t] e] => (let _ (infer-universe ctx t)
				    (let te (infer-type (extend ctx x ['#bind t]) e)
					 ['pi [x t] te]))
      ctx [e1 e2] => (match (infer-pi ctx e1)
			    ['pi [x s] t]
			    (let te (infer-type ctx e2)
				 (let _ (check-equal ctx s te)
				      (subst (extend () x e2) t)))))

(defun check-equal (ctx e1 e2)
  (if (not (alpha-eq? ctx e1 e2))
      (error "expression %t and %t are not equal")
    'ok))

(defun infer-universe (ctx t)
  (let u (infer-type ctx t)
       (let u1 (normalize ctx u)
	    (if (number? u1)
		u1
	      (error "type expected")))))


(defun infer-pi (ctx e)
  (let t (infer-type ctx e)
       (match (normalize ctx t)
	      ['pi . a] ['pi . a]
	      _ (error "function expected"))))

(func normalize
      env var => (let find (assv var env)
		      (if (null? find)
			  (error "unknown identifier %t")
			(match (cdr find)
			       ['#def t val] (normalize env val) 
			       ['#bind t] var)))
      where (symbol? var)
      env [e1 e2] => (let ne2 (normalize env e2)
			  (match (normalize env e1)
				 ['lambda [x _] e] (normalize env (subst (extend () x ne2) e))
				 f [f e2]))
      env uni => uni where (number? uni)
      env ['pi [x A] B] => ['pi . (normalize-abstraction env x A B)]
      env ['lambda [x t] e] => ['lambda . (normalize-abstraction env x t e)])

(defun normalize-abstraction (env x t e)
  (let t1 (normalize env t)
       [[x t1] (normalize (extend env x ['#bind t1]) e)]))

(defun alpha-eq? (ctx e1 e2)
  (alpha-eq-h (normalize ctx e1) (normalize ctx e2)))

(func alpha-eq-h
      x1 x2 => (= x1 x2) where (and (symbol? x1) (symbol? x2))
      k1 k2 => (= k1 k2) where (and (number? k1) (number? k2))
      [f1 x1] [f2 x2] => (and (alpha-eq-h f1 f2)
			      (alpha-eq-h x1 x2))
      ['pi [x1 A1] B1] ['pi [x2 A2] B2] => (and (alpha-eq-h A1 A2)
						(let z (gensym 'bbc)
						     (alpha-eq-h (subst (extend () x1 z) B1)
								 (subst (extend () x2 z) B2))))
      ['lambda [x1 A1] B1] ['lambda [x2 A2] B2] => (and (alpha-eq-h A1 A2)
						    (lambda z (gensym 'cca)
						      (alpha-eq-h (subst (extend () x1 z) B1)
								  (subst (extend () x2 z) B2))))
      _ _ => false)




;; (let ctx [['N . ['#bind 0]]
;;      ['id . ['#def
;;      '(pi (A 0) (pi (_ A) A))
;;      '(lambda (a 0) (lambda (x a) x))]]]
     ;; (infer-type ctx '(id (pi (x N) (pi  (y x) x) ))))
     ;; (normalize ctx '((id (pi (x 0) (pi  (y x) x) )) id)))

;; (let ctx [['N . ['#bind 0]]
;;      ['z . ['#bind 'N]]
;;      ['s . ['#bind '(pi (_ N) N)]]
;;      ['three . ['#def
;;      '(pi (_ (pi (_ N) N))
;; 	  (pi (_ N) N))
;;      '(lambda (f (pi (_ N) N))
;; 	(lambda (x N)
;; 	  (f (f (f x)))))]]]

;;      (normalize ctx '((three (three s)) z)))
;; (infer-type ctx '((three (three s)) z)))
