(package "cora/lib/monad"

	 (export state-bind state-return)

	 ;; state monad
	 ;; https://ns1.hns.to/state-monad.md

	 (defun state-return (x)
	   (lambda (s k)
	     (k s x)))
	 
	 (defun state-bind (m f)
	   (lambda (s)
	     ((m s)
	      (lambda (s1 v)
		(f v s1)))))

	 ;; blog link https://www.zenlife.tk/continuation-monad.md

	 (defun cont-return (x) (lambda (k) (k x)))

	 (defun cont-bind (m f)
	   (lambda (k)
	     (m (lambda (res)
		  (f res k)))))

	 ;; (func rewrite-monad-do-h
	 ;;       [val m . body] => ['bind m ['lambda [val] (rewrite-monad-do-h body)]]
	 ;;       [body] => body)

	 ;; (defmacro monad-do (exp)
	 ;;   (rewrite-monad-do-h (cdr exp)))

	 ;; (defun fib (n)
	 ;;   (cond
	 ;;    ((= n 0) (return 0))
	 ;;    ((= n 1) (return 1))
	 ;;    (true (monad-do
	 ;; 	  x1 (fib (- n 1))
	 ;; 	  x2 (fib (- n 2))
	 ;; 	  (return (+ x1 x2))))))

	 ;; (fib 10 (lambda (x) x))

	 ;; shift/reset based on continuation monad
	 ;; (defun return (v)
	 ;;   (lambda (k)
	 ;;     (k v)))

	 (defun id (x) x)

	 (defun run-cc (c k)
	   (c k))

	 ;; (defun bind (c f)
	 ;;   (lambda (k)
	 ;;     (run-cc c (lambda (v)
	 ;; 		 (run-cc (f v) k)))))

	 (defun reset (cc)
	   (run-cc cc id))


	 (defmacro shift (exp)
	   (let k (cadr exp)
		body (cddr exp)
		['lambda [k] . body]))

	 ;; (func rewrite-monad-do-h
	 ;;       [val m . body] => ['bind m ['lambda [val] (rewrite-monad-do-h body)]]
	 ;;       [body] => body)

	 ;; (defmacro do (exp)
	 ;;   (rewrite-monad-do-h (cdr exp)))
	 
	 ;; (reset
	 ;;  (do
	 ;;   v (shift k (k 666))
	 ;;    (return (+ v 42))))

	 )
