(defun return (x) (lambda (k) (k x)))

(defun bind (m f)
  (lambda (k)
    (m (lambda (res)
	 (f res k)))))

(func rewrite-monad-do-h
      [val m . body] => ['bind m ['lambda [val] (rewrite-monad-do-h body)]]
      [body] => body)

(defmacro monad-do (exp)
  (rewrite-monad-do-h (cdr exp)))

;; (defun fib (n)
;;   (cond
;;    ((= n 0) (return 0))
;;    ((= n 1) (return 1))
;;    (true (monad-do
;; 	  x1 (fib (- n 1))
;; 	  x2 (fib (- n 2))
;; 	  (return (+ x1 x2))))))

;; (fib 10 (lambda (x) x))
